// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package structs

import (
	"errors"
	"fmt"
	pkg1_structs "github.com/hashicorp/nomad/plugins/shared/structs"
	pkg2_raft "github.com/hashicorp/raft"
	codec1978 "github.com/ugorji/go/codec"
	net "net"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF8100 = 1
	codecSelferC_RAW100  = 0
	// ----- value types used ----
	codecSelferValueTypeArray100 = 10
	codecSelferValueTypeMap100   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey100    = 2
	codecSelfer_containerMapValue100  = 3
	codecSelfer_containerMapEnd100    = 4
	codecSelfer_containerArrayElem100 = 6
	codecSelfer_containerArrayEnd100  = 7
)

var (
	codecSelferBitsize100                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr100 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer100 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_structs.Attribute
		var v1 pkg2_raft.ServerID
		var v2 net.IP
		var v3 time.Time
		_, _, _, _ = v0, v1, v2, v3
	}
}

func (x *BatchFuture) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *BatchFuture) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *BatchFuture) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *BatchFuture) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x Bitmap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encBitmap((Bitmap)(x), e)
		}
	}
}

func (x *Bitmap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decBitmap((*Bitmap)(x), d)
	}
}

func (x *DeviceAccounter) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Devices == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapDeviceIdTuplePtrtoDeviceAccounterInstance((map[DeviceIdTuple]*DeviceAccounterInstance)(x.Devices), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Devices"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Devices == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapDeviceIdTuplePtrtoDeviceAccounterInstance((map[DeviceIdTuple]*DeviceAccounterInstance)(x.Devices), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeviceAccounter) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeviceAccounter) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Devices":
			if r.TryDecodeAsNil() {
				x.Devices = nil
			} else {
				yyv4 := &x.Devices
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapDeviceIdTuplePtrtoDeviceAccounterInstance((*map[DeviceIdTuple]*DeviceAccounterInstance)(yyv4), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeviceAccounter) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Devices = nil
	} else {
		yyv7 := &x.Devices
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			h.decMapDeviceIdTuplePtrtoDeviceAccounterInstance((*map[DeviceIdTuple]*DeviceAccounterInstance)(yyv7), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeviceAccounterInstance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Device == nil {
					r.EncodeNil()
				} else {
					x.Device.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Device"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Device == nil {
					r.EncodeNil()
				} else {
					x.Device.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Instances == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringIntV(x.Instances, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Instances"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Instances == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringIntV(x.Instances, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeviceAccounterInstance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeviceAccounterInstance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Device":
			if r.TryDecodeAsNil() {
				if x.Device != nil {
					x.Device = nil
				}
			} else {
				if x.Device == nil {
					x.Device = new(NodeDeviceResource)
				}
				x.Device.CodecDecodeSelf(d)
			}
		case "Instances":
			if r.TryDecodeAsNil() {
				x.Instances = nil
			} else {
				yyv5 := &x.Instances
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					z.F.DecMapStringIntX(yyv5, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeviceAccounterInstance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Device != nil {
			x.Device = nil
		}
	} else {
		if x.Device == nil {
			x.Device = new(NodeDeviceResource)
		}
		x.Device.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Instances = nil
	} else {
		yyv9 := &x.Instances
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			z.F.DecMapStringIntX(yyv9, false, d)
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x DiffType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1 := z.EncBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF8100, string(x))
	}
}

func (x *DiffType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobDiff) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Fields == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePtrtoFieldDiff(([]*FieldDiff)(x.Fields), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Fields"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Fields == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePtrtoFieldDiff(([]*FieldDiff)(x.Fields), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Objects == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoObjectDiff(([]*ObjectDiff)(x.Objects), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Objects"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Objects == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoObjectDiff(([]*ObjectDiff)(x.Objects), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.TaskGroups == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSlicePtrtoTaskGroupDiff(([]*TaskGroupDiff)(x.TaskGroups), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TaskGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.TaskGroups == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSlicePtrtoTaskGroupDiff(([]*TaskGroupDiff)(x.TaskGroups), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobDiff) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobDiff) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv4 := &x.Type
				yyv4.CodecDecodeSelf(d)
			}
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv5 := &x.ID
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		case "Fields":
			if r.TryDecodeAsNil() {
				x.Fields = nil
			} else {
				yyv7 := &x.Fields
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					h.decSlicePtrtoFieldDiff((*[]*FieldDiff)(yyv7), d)
				}
			}
		case "Objects":
			if r.TryDecodeAsNil() {
				x.Objects = nil
			} else {
				yyv9 := &x.Objects
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					h.decSlicePtrtoObjectDiff((*[]*ObjectDiff)(yyv9), d)
				}
			}
		case "TaskGroups":
			if r.TryDecodeAsNil() {
				x.TaskGroups = nil
			} else {
				yyv11 := &x.TaskGroups
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					h.decSlicePtrtoTaskGroupDiff((*[]*TaskGroupDiff)(yyv11), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobDiff) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv14 := &x.Type
		yyv14.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv15 := &x.ID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Fields = nil
	} else {
		yyv17 := &x.Fields
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			h.decSlicePtrtoFieldDiff((*[]*FieldDiff)(yyv17), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Objects = nil
	} else {
		yyv19 := &x.Objects
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSlicePtrtoObjectDiff((*[]*ObjectDiff)(yyv19), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskGroups = nil
	} else {
		yyv21 := &x.TaskGroups
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			h.decSlicePtrtoTaskGroupDiff((*[]*TaskGroupDiff)(yyv21), d)
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *TaskGroupDiff) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Fields == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePtrtoFieldDiff(([]*FieldDiff)(x.Fields), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Fields"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Fields == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePtrtoFieldDiff(([]*FieldDiff)(x.Fields), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Objects == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoObjectDiff(([]*ObjectDiff)(x.Objects), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Objects"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Objects == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoObjectDiff(([]*ObjectDiff)(x.Objects), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSlicePtrtoTaskDiff(([]*TaskDiff)(x.Tasks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tasks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSlicePtrtoTaskDiff(([]*TaskDiff)(x.Tasks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Updates == nil {
					r.EncodeNil()
				} else {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						z.F.EncMapStringUint64V(x.Updates, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Updates"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Updates == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						z.F.EncMapStringUint64V(x.Updates, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *TaskGroupDiff) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *TaskGroupDiff) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv4 := &x.Type
				yyv4.CodecDecodeSelf(d)
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv5 := &x.Name
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		case "Fields":
			if r.TryDecodeAsNil() {
				x.Fields = nil
			} else {
				yyv7 := &x.Fields
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					h.decSlicePtrtoFieldDiff((*[]*FieldDiff)(yyv7), d)
				}
			}
		case "Objects":
			if r.TryDecodeAsNil() {
				x.Objects = nil
			} else {
				yyv9 := &x.Objects
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					h.decSlicePtrtoObjectDiff((*[]*ObjectDiff)(yyv9), d)
				}
			}
		case "Tasks":
			if r.TryDecodeAsNil() {
				x.Tasks = nil
			} else {
				yyv11 := &x.Tasks
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					h.decSlicePtrtoTaskDiff((*[]*TaskDiff)(yyv11), d)
				}
			}
		case "Updates":
			if r.TryDecodeAsNil() {
				x.Updates = nil
			} else {
				yyv13 := &x.Updates
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					z.F.DecMapStringUint64X(yyv13, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *TaskGroupDiff) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv16 := &x.Type
		yyv16.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv17 := &x.Name
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Fields = nil
	} else {
		yyv19 := &x.Fields
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSlicePtrtoFieldDiff((*[]*FieldDiff)(yyv19), d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Objects = nil
	} else {
		yyv21 := &x.Objects
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			h.decSlicePtrtoObjectDiff((*[]*ObjectDiff)(yyv21), d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tasks = nil
	} else {
		yyv23 := &x.Tasks
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decSlicePtrtoTaskDiff((*[]*TaskDiff)(yyv23), d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Updates = nil
	} else {
		yyv25 := &x.Updates
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			z.F.DecMapStringUint64X(yyv25, false, d)
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x TaskGroupDiffs) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encTaskGroupDiffs((TaskGroupDiffs)(x), e)
		}
	}
}

func (x *TaskGroupDiffs) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decTaskGroupDiffs((*TaskGroupDiffs)(x), d)
	}
}

func (x *TaskDiff) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Fields == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePtrtoFieldDiff(([]*FieldDiff)(x.Fields), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Fields"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Fields == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePtrtoFieldDiff(([]*FieldDiff)(x.Fields), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Objects == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoObjectDiff(([]*ObjectDiff)(x.Objects), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Objects"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Objects == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoObjectDiff(([]*ObjectDiff)(x.Objects), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						z.F.EncSliceStringV(x.Annotations, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Annotations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						z.F.EncSliceStringV(x.Annotations, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *TaskDiff) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *TaskDiff) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv4 := &x.Type
				yyv4.CodecDecodeSelf(d)
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv5 := &x.Name
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		case "Fields":
			if r.TryDecodeAsNil() {
				x.Fields = nil
			} else {
				yyv7 := &x.Fields
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					h.decSlicePtrtoFieldDiff((*[]*FieldDiff)(yyv7), d)
				}
			}
		case "Objects":
			if r.TryDecodeAsNil() {
				x.Objects = nil
			} else {
				yyv9 := &x.Objects
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					h.decSlicePtrtoObjectDiff((*[]*ObjectDiff)(yyv9), d)
				}
			}
		case "Annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv11 := &x.Annotations
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					z.F.DecSliceStringX(yyv11, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *TaskDiff) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv14 := &x.Type
		yyv14.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv15 := &x.Name
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Fields = nil
	} else {
		yyv17 := &x.Fields
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			h.decSlicePtrtoFieldDiff((*[]*FieldDiff)(yyv17), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Objects = nil
	} else {
		yyv19 := &x.Objects
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSlicePtrtoObjectDiff((*[]*ObjectDiff)(yyv19), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv21 := &x.Annotations
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			z.F.DecSliceStringX(yyv21, false, d)
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x TaskDiffs) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encTaskDiffs((TaskDiffs)(x), e)
		}
	}
}

func (x *TaskDiffs) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decTaskDiffs((*TaskDiffs)(x), d)
	}
}

func (x *ObjectDiff) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Fields == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePtrtoFieldDiff(([]*FieldDiff)(x.Fields), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Fields"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Fields == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePtrtoFieldDiff(([]*FieldDiff)(x.Fields), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Objects == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoObjectDiff(([]*ObjectDiff)(x.Objects), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Objects"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Objects == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoObjectDiff(([]*ObjectDiff)(x.Objects), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ObjectDiff) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ObjectDiff) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv4 := &x.Type
				yyv4.CodecDecodeSelf(d)
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv5 := &x.Name
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		case "Fields":
			if r.TryDecodeAsNil() {
				x.Fields = nil
			} else {
				yyv7 := &x.Fields
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					h.decSlicePtrtoFieldDiff((*[]*FieldDiff)(yyv7), d)
				}
			}
		case "Objects":
			if r.TryDecodeAsNil() {
				x.Objects = nil
			} else {
				yyv9 := &x.Objects
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					h.decSlicePtrtoObjectDiff((*[]*ObjectDiff)(yyv9), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ObjectDiff) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv12 := &x.Type
		yyv12.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv13 := &x.Name
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Fields = nil
	} else {
		yyv15 := &x.Fields
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decSlicePtrtoFieldDiff((*[]*FieldDiff)(yyv15), d)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Objects = nil
	} else {
		yyv17 := &x.Objects
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			h.decSlicePtrtoObjectDiff((*[]*ObjectDiff)(yyv17), d)
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x ObjectDiffs) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encObjectDiffs((ObjectDiffs)(x), e)
		}
	}
}

func (x *ObjectDiffs) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decObjectDiffs((*ObjectDiffs)(x), d)
	}
}

func (x *FieldDiff) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Old))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Old"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Old))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.New))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("New"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.New))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						z.F.EncSliceStringV(x.Annotations, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Annotations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						z.F.EncSliceStringV(x.Annotations, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *FieldDiff) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *FieldDiff) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv4 := &x.Type
				yyv4.CodecDecodeSelf(d)
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv5 := &x.Name
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		case "Old":
			if r.TryDecodeAsNil() {
				x.Old = ""
			} else {
				yyv7 := &x.Old
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		case "New":
			if r.TryDecodeAsNil() {
				x.New = ""
			} else {
				yyv9 := &x.New
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		case "Annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv11 := &x.Annotations
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					z.F.DecSliceStringX(yyv11, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *FieldDiff) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv14 := &x.Type
		yyv14.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv15 := &x.Name
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Old = ""
	} else {
		yyv17 := &x.Old
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.New = ""
	} else {
		yyv19 := &x.New
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv21 := &x.Annotations
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			z.F.DecSliceStringX(yyv21, false, d)
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x FieldDiffs) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encFieldDiffs((FieldDiffs)(x), e)
		}
	}
}

func (x *FieldDiffs) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decFieldDiffs((*FieldDiffs)(x), d)
	}
}

func (x *NetworkIndex) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AvailNetworks == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoNetworkResource(([]*NetworkResource)(x.AvailNetworks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AvailNetworks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AvailNetworks == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoNetworkResource(([]*NetworkResource)(x.AvailNetworks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AvailBandwidth == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringIntV(x.AvailBandwidth, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AvailBandwidth"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AvailBandwidth == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringIntV(x.AvailBandwidth, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.UsedPorts == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encMapstringBitmap((map[string]Bitmap)(x.UsedPorts), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UsedPorts"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.UsedPorts == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encMapstringBitmap((map[string]Bitmap)(x.UsedPorts), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.UsedBandwidth == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncMapStringIntV(x.UsedBandwidth, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UsedBandwidth"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.UsedBandwidth == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncMapStringIntV(x.UsedBandwidth, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NetworkIndex) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NetworkIndex) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AvailNetworks":
			if r.TryDecodeAsNil() {
				x.AvailNetworks = nil
			} else {
				yyv4 := &x.AvailNetworks
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoNetworkResource((*[]*NetworkResource)(yyv4), d)
				}
			}
		case "AvailBandwidth":
			if r.TryDecodeAsNil() {
				x.AvailBandwidth = nil
			} else {
				yyv6 := &x.AvailBandwidth
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringIntX(yyv6, false, d)
				}
			}
		case "UsedPorts":
			if r.TryDecodeAsNil() {
				x.UsedPorts = nil
			} else {
				yyv8 := &x.UsedPorts
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decMapstringBitmap((*map[string]Bitmap)(yyv8), d)
				}
			}
		case "UsedBandwidth":
			if r.TryDecodeAsNil() {
				x.UsedBandwidth = nil
			} else {
				yyv10 := &x.UsedBandwidth
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecMapStringIntX(yyv10, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NetworkIndex) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AvailNetworks = nil
	} else {
		yyv13 := &x.AvailNetworks
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoNetworkResource((*[]*NetworkResource)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AvailBandwidth = nil
	} else {
		yyv15 := &x.AvailBandwidth
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecMapStringIntX(yyv15, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UsedPorts = nil
	} else {
		yyv17 := &x.UsedPorts
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			h.decMapstringBitmap((*map[string]Bitmap)(yyv17), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UsedBandwidth = nil
	} else {
		yyv19 := &x.UsedBandwidth
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			z.F.DecMapStringIntX(yyv19, false, d)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DriverInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncMapStringStringV(x.Attributes, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Attributes"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncMapStringStringV(x.Attributes, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Detected))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Detected"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Detected))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.Healthy))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Healthy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.Healthy))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HealthDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HealthDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HealthDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy16 := &x.UpdateTime
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
					r.EncodeBuiltin(yym18, yy16)
				} else if z.HasExtensions() && z.EncExt(yy16) {
				} else if yym17 {
					z.EncBinaryMarshal(yy16)
				} else if !yym17 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy16)
				} else {
					z.EncFallback(yy16)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UpdateTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy19 := &x.UpdateTime
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if yym21 := z.TimeRtidIfBinc(); yym21 != 0 {
					r.EncodeBuiltin(yym21, yy19)
				} else if z.HasExtensions() && z.EncExt(yy19) {
				} else if yym20 {
					z.EncBinaryMarshal(yy19)
				} else if !yym20 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy19)
				} else {
					z.EncFallback(yy19)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DriverInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DriverInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Attributes":
			if r.TryDecodeAsNil() {
				x.Attributes = nil
			} else {
				yyv4 := &x.Attributes
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4, false, d)
				}
			}
		case "Detected":
			if r.TryDecodeAsNil() {
				x.Detected = false
			} else {
				yyv6 := &x.Detected
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Healthy":
			if r.TryDecodeAsNil() {
				x.Healthy = false
			} else {
				yyv8 := &x.Healthy
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		case "HealthDescription":
			if r.TryDecodeAsNil() {
				x.HealthDescription = ""
			} else {
				yyv10 := &x.HealthDescription
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "UpdateTime":
			if r.TryDecodeAsNil() {
				x.UpdateTime = time.Time{}
			} else {
				yyv12 := &x.UpdateTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if yym14 := z.TimeRtidIfBinc(); yym14 != 0 {
					r.DecodeBuiltin(yym14, yyv12)
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else if yym13 {
					z.DecBinaryUnmarshal(yyv12)
				} else if !yym13 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv12)
				} else {
					z.DecFallback(yyv12, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DriverInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Attributes = nil
	} else {
		yyv16 := &x.Attributes
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			z.F.DecMapStringStringX(yyv16, false, d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Detected = false
	} else {
		yyv18 := &x.Detected
		yym19 := z.DecBinary()
		_ = yym19
		if false {
		} else {
			*((*bool)(yyv18)) = r.DecodeBool()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Healthy = false
	} else {
		yyv20 := &x.Healthy
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			*((*bool)(yyv20)) = r.DecodeBool()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HealthDescription = ""
	} else {
		yyv22 := &x.HealthDescription
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else {
			*((*string)(yyv22)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UpdateTime = time.Time{}
	} else {
		yyv24 := &x.UpdateTime
		yym25 := z.DecBinary()
		_ = yym25
		if false {
		} else if yym26 := z.TimeRtidIfBinc(); yym26 != 0 {
			r.DecodeBuiltin(yym26, yyv24)
		} else if z.HasExtensions() && z.DecExt(yyv24) {
		} else if yym25 {
			z.DecBinaryUnmarshal(yyv24)
		} else if !yym25 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv24)
		} else {
			z.DecFallback(yyv24, false)
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *RaftServer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ID) {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ID) {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Node))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Node"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Node))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Address) {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Address"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Address) {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Address))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.Leader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Leader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.Leader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Voter))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Voter"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Voter))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RaftProtocol))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RaftProtocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RaftProtocol))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *RaftServer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *RaftServer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Node":
			if r.TryDecodeAsNil() {
				x.Node = ""
			} else {
				yyv6 := &x.Node
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				yyv8 := &x.Address
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Leader":
			if r.TryDecodeAsNil() {
				x.Leader = false
			} else {
				yyv10 := &x.Leader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "Voter":
			if r.TryDecodeAsNil() {
				x.Voter = false
			} else {
				yyv12 := &x.Voter
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "RaftProtocol":
			if r.TryDecodeAsNil() {
				x.RaftProtocol = ""
			} else {
				yyv14 := &x.RaftProtocol
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *RaftServer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv17 := &x.ID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Node = ""
	} else {
		yyv19 := &x.Node
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		yyv21 := &x.Address
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv21) {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Leader = false
	} else {
		yyv23 := &x.Leader
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Voter = false
	} else {
		yyv25 := &x.Voter
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RaftProtocol = ""
	} else {
		yyv27 := &x.RaftProtocol
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *RaftConfigurationResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Servers == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoRaftServer(([]*RaftServer)(x.Servers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Servers"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Servers == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoRaftServer(([]*RaftServer)(x.Servers), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *RaftConfigurationResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *RaftConfigurationResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Servers":
			if r.TryDecodeAsNil() {
				x.Servers = nil
			} else {
				yyv4 := &x.Servers
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoRaftServer((*[]*RaftServer)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *RaftConfigurationResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Servers = nil
	} else {
		yyv9 := &x.Servers
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			h.decSlicePtrtoRaftServer((*[]*RaftServer)(yyv9), d)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv11 := &x.Index
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *RaftPeerByAddressRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Address) {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Address"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Address) {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Address))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *RaftPeerByAddressRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *RaftPeerByAddressRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				yyv4 := &x.Address
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *RaftPeerByAddressRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		yyv15 := &x.Address
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *RaftPeerByIDRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ID) {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ID) {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *RaftPeerByIDRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *RaftPeerByIDRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *RaftPeerByIDRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv15 := &x.ID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AutopilotSetConfigRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Datacenter))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Datacenter"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Datacenter))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy7 := &x.Config
				yy7.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Config"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy9 := &x.Config
				yy9.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym12 := z.EncBinary()
				_ = yym12
				if false {
				} else {
					r.EncodeBool(bool(x.CAS))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CAS"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.CAS))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym18 := z.EncBinary()
				_ = yym18
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym21 := z.EncBinary()
				_ = yym21
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym24 := z.EncBinary()
				_ = yym24
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AutopilotSetConfigRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AutopilotSetConfigRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Datacenter":
			if r.TryDecodeAsNil() {
				x.Datacenter = ""
			} else {
				yyv4 := &x.Datacenter
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Config":
			if r.TryDecodeAsNil() {
				x.Config = AutopilotConfig{}
			} else {
				yyv6 := &x.Config
				yyv6.CodecDecodeSelf(d)
			}
		case "CAS":
			if r.TryDecodeAsNil() {
				x.CAS = false
			} else {
				yyv7 := &x.CAS
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*bool)(yyv7)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv9 := &x.Region
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv11 := &x.Namespace
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*string)(yyv11)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv13 := &x.AuthToken
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*string)(yyv13)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv15 := &x.Forwarded
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*bool)(yyv15)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AutopilotSetConfigRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj17 int
	var yyb17 bool
	var yyhl17 bool = l >= 0
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Datacenter = ""
	} else {
		yyv18 := &x.Datacenter
		yym19 := z.DecBinary()
		_ = yym19
		if false {
		} else {
			*((*string)(yyv18)) = r.DecodeString()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Config = AutopilotConfig{}
	} else {
		yyv20 := &x.Config
		yyv20.CodecDecodeSelf(d)
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CAS = false
	} else {
		yyv21 := &x.CAS
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv23 := &x.Region
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv25 := &x.Namespace
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv27 := &x.AuthToken
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv29 := &x.Forwarded
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	for {
		yyj17++
		if yyhl17 {
			yyb17 = yyj17 > l
		} else {
			yyb17 = r.CheckBreak()
		}
		if yyb17 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj17-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AutopilotConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.CleanupDeadServers))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CleanupDeadServers"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.CleanupDeadServers))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ServerStabilizationTime) {
				} else {
					r.EncodeInt(int64(x.ServerStabilizationTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ServerStabilizationTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ServerStabilizationTime) {
				} else {
					r.EncodeInt(int64(x.ServerStabilizationTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContactThreshold) {
				} else {
					r.EncodeInt(int64(x.LastContactThreshold))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContactThreshold"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContactThreshold) {
				} else {
					r.EncodeInt(int64(x.LastContactThreshold))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MaxTrailingLogs))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxTrailingLogs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MaxTrailingLogs))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.EnableRedundancyZones))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EnableRedundancyZones"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.EnableRedundancyZones))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.DisableUpgradeMigration))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DisableUpgradeMigration"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.DisableUpgradeMigration))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.EnableCustomUpgrades))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EnableCustomUpgrades"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.EnableCustomUpgrades))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AutopilotConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AutopilotConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "CleanupDeadServers":
			if r.TryDecodeAsNil() {
				x.CleanupDeadServers = false
			} else {
				yyv4 := &x.CleanupDeadServers
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "ServerStabilizationTime":
			if r.TryDecodeAsNil() {
				x.ServerStabilizationTime = 0
			} else {
				yyv6 := &x.ServerStabilizationTime
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "LastContactThreshold":
			if r.TryDecodeAsNil() {
				x.LastContactThreshold = 0
			} else {
				yyv8 := &x.LastContactThreshold
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "MaxTrailingLogs":
			if r.TryDecodeAsNil() {
				x.MaxTrailingLogs = 0
			} else {
				yyv10 := &x.MaxTrailingLogs
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "EnableRedundancyZones":
			if r.TryDecodeAsNil() {
				x.EnableRedundancyZones = false
			} else {
				yyv12 := &x.EnableRedundancyZones
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "DisableUpgradeMigration":
			if r.TryDecodeAsNil() {
				x.DisableUpgradeMigration = false
			} else {
				yyv14 := &x.DisableUpgradeMigration
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "EnableCustomUpgrades":
			if r.TryDecodeAsNil() {
				x.EnableCustomUpgrades = false
			} else {
				yyv16 := &x.EnableCustomUpgrades
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv18 := &x.CreateIndex
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*uint64)(yyv18)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv20 := &x.ModifyIndex
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*uint64)(yyv20)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AutopilotConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CleanupDeadServers = false
	} else {
		yyv23 := &x.CleanupDeadServers
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ServerStabilizationTime = 0
	} else {
		yyv25 := &x.ServerStabilizationTime
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv25) {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContactThreshold = 0
	} else {
		yyv27 := &x.LastContactThreshold
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxTrailingLogs = 0
	} else {
		yyv29 := &x.MaxTrailingLogs
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EnableRedundancyZones = false
	} else {
		yyv31 := &x.EnableRedundancyZones
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*bool)(yyv31)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DisableUpgradeMigration = false
	} else {
		yyv33 := &x.DisableUpgradeMigration
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EnableCustomUpgrades = false
	} else {
		yyv35 := &x.EnableCustomUpgrades
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv37 := &x.CreateIndex
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*uint64)(yyv37)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv39 := &x.ModifyIndex
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*uint64)(yyv39)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SchedulerConfiguration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy4 := &x.PreemptionConfig
				yy4.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PreemptionConfig"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy6 := &x.PreemptionConfig
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym9 := z.EncBinary()
				_ = yym9
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym12 := z.EncBinary()
				_ = yym12
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SchedulerConfiguration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SchedulerConfiguration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "PreemptionConfig":
			if r.TryDecodeAsNil() {
				x.PreemptionConfig = PreemptionConfig{}
			} else {
				yyv4 := &x.PreemptionConfig
				yyv4.CodecDecodeSelf(d)
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv5 := &x.CreateIndex
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv7 := &x.ModifyIndex
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SchedulerConfiguration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreemptionConfig = PreemptionConfig{}
	} else {
		yyv10 := &x.PreemptionConfig
		yyv10.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv11 := &x.CreateIndex
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv13 := &x.ModifyIndex
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SchedulerConfigurationResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.SchedulerConfig == nil {
					r.EncodeNil()
				} else {
					x.SchedulerConfig.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SchedulerConfig"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.SchedulerConfig == nil {
					r.EncodeNil()
				} else {
					x.SchedulerConfig.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SchedulerConfigurationResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SchedulerConfigurationResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "SchedulerConfig":
			if r.TryDecodeAsNil() {
				if x.SchedulerConfig != nil {
					x.SchedulerConfig = nil
				}
			} else {
				if x.SchedulerConfig == nil {
					x.SchedulerConfig = new(SchedulerConfiguration)
				}
				x.SchedulerConfig.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SchedulerConfigurationResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.SchedulerConfig != nil {
			x.SchedulerConfig = nil
		}
	} else {
		if x.SchedulerConfig == nil {
			x.SchedulerConfig = new(SchedulerConfiguration)
		}
		x.SchedulerConfig.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SchedulerSetConfigurationResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Updated))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Updated"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Updated))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SchedulerSetConfigurationResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SchedulerSetConfigurationResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Updated":
			if r.TryDecodeAsNil() {
				x.Updated = false
			} else {
				yyv4 := &x.Updated
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SchedulerSetConfigurationResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Updated = false
	} else {
		yyv9 := &x.Updated
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*bool)(yyv9)) = r.DecodeBool()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv11 := &x.Index
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *PreemptionConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.SystemSchedulerEnabled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SystemSchedulerEnabled"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.SystemSchedulerEnabled))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.BatchSchedulerEnabled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("BatchSchedulerEnabled"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.BatchSchedulerEnabled))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.ServiceSchedulerEnabled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ServiceSchedulerEnabled"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.ServiceSchedulerEnabled))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *PreemptionConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *PreemptionConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "SystemSchedulerEnabled":
			if r.TryDecodeAsNil() {
				x.SystemSchedulerEnabled = false
			} else {
				yyv4 := &x.SystemSchedulerEnabled
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "BatchSchedulerEnabled":
			if r.TryDecodeAsNil() {
				x.BatchSchedulerEnabled = false
			} else {
				yyv6 := &x.BatchSchedulerEnabled
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "ServiceSchedulerEnabled":
			if r.TryDecodeAsNil() {
				x.ServiceSchedulerEnabled = false
			} else {
				yyv8 := &x.ServiceSchedulerEnabled
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *PreemptionConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SystemSchedulerEnabled = false
	} else {
		yyv11 := &x.SystemSchedulerEnabled
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*bool)(yyv11)) = r.DecodeBool()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.BatchSchedulerEnabled = false
	} else {
		yyv13 := &x.BatchSchedulerEnabled
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*bool)(yyv13)) = r.DecodeBool()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ServiceSchedulerEnabled = false
	} else {
		yyv15 := &x.ServiceSchedulerEnabled
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SchedulerSetConfigRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy4 := &x.Config
				yy4.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Config"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy6 := &x.Config
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym9 := z.EncBinary()
				_ = yym9
				if false {
				} else {
					r.EncodeBool(bool(x.CAS))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CAS"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.CAS))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym12 := z.EncBinary()
				_ = yym12
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym18 := z.EncBinary()
				_ = yym18
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym21 := z.EncBinary()
				_ = yym21
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SchedulerSetConfigRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SchedulerSetConfigRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Config":
			if r.TryDecodeAsNil() {
				x.Config = SchedulerConfiguration{}
			} else {
				yyv4 := &x.Config
				yyv4.CodecDecodeSelf(d)
			}
		case "CAS":
			if r.TryDecodeAsNil() {
				x.CAS = false
			} else {
				yyv5 := &x.CAS
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*bool)(yyv5)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv7 := &x.Region
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv9 := &x.Namespace
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv11 := &x.AuthToken
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*string)(yyv11)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv13 := &x.Forwarded
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*bool)(yyv13)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SchedulerSetConfigRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Config = SchedulerConfiguration{}
	} else {
		yyv16 := &x.Config
		yyv16.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CAS = false
	} else {
		yyv17 := &x.CAS
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv19 := &x.Region
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv21 := &x.Namespace
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv23 := &x.AuthToken
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv25 := &x.Forwarded
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *StreamingRpcHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Method))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Method"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Method))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *StreamingRpcHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *StreamingRpcHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Method":
			if r.TryDecodeAsNil() {
				x.Method = ""
			} else {
				yyv4 := &x.Method
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *StreamingRpcHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Method = ""
	} else {
		yyv7 := &x.Method
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*string)(yyv7)) = r.DecodeString()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *StreamingRpcAck) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Error))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Error"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Error))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *StreamingRpcAck) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *StreamingRpcAck) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				yyv4 := &x.Error
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *StreamingRpcAck) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		yyv7 := &x.Error
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*string)(yyv7)) = r.DecodeString()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *StreamingRpcRegistry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *StreamingRpcRegistry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *StreamingRpcRegistry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *StreamingRpcRegistry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x MessageType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1 := z.EncBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *MessageType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*uint8)(x)) = uint8(r.DecodeUint(8))
	}
}

func (x Context) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1 := z.EncBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF8100, string(x))
	}
}

func (x *Context) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespacedID) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NamespacedID) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NamespacedID) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NamespacedID) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv9 := &x.ID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv11 := &x.Namespace
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *InternalRpcInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *InternalRpcInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *InternalRpcInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv4 := &x.Forwarded
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *InternalRpcInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv7 := &x.Forwarded
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*bool)(yyv7)) = r.DecodeBool()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *QueryOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *QueryOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *QueryOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv16 := &x.AuthToken
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv18 := &x.Forwarded
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *QueryOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv33 := &x.AuthToken
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv35 := &x.Forwarded
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *WriteRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *WriteRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *WriteRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv8 := &x.AuthToken
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv10 := &x.Forwarded
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *WriteRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv13 := &x.Region
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv15 := &x.Namespace
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv17 := &x.AuthToken
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv19 := &x.Forwarded
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *QueryMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *QueryMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *QueryMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv4 := &x.Index
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv6 := &x.LastContact
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv8 := &x.KnownLeader
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *QueryMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv11 := &x.Index
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv13 := &x.LastContact
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv13) {
		} else {
			*((*int64)(yyv13)) = int64(r.DecodeInt(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv15 := &x.KnownLeader
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *WriteMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *WriteMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *WriteMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv4 := &x.Index
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *WriteMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv7 := &x.Index
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeRegisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					x.Node.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Node"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					x.Node.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeEvent == nil {
					r.EncodeNil()
				} else {
					x.NodeEvent.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeEvent"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeEvent == nil {
					r.EncodeNil()
				} else {
					x.NodeEvent.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeRegisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeRegisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Node":
			if r.TryDecodeAsNil() {
				if x.Node != nil {
					x.Node = nil
				}
			} else {
				if x.Node == nil {
					x.Node = new(Node)
				}
				x.Node.CodecDecodeSelf(d)
			}
		case "NodeEvent":
			if r.TryDecodeAsNil() {
				if x.NodeEvent != nil {
					x.NodeEvent = nil
				}
			} else {
				if x.NodeEvent == nil {
					x.NodeEvent = new(NodeEvent)
				}
				x.NodeEvent.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeRegisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Node != nil {
			x.Node = nil
		}
	} else {
		if x.Node == nil {
			x.Node = new(Node)
		}
		x.Node.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.NodeEvent != nil {
			x.NodeEvent = nil
		}
	} else {
		if x.NodeEvent == nil {
			x.NodeEvent = new(NodeEvent)
		}
		x.NodeEvent.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeDeregisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeDeregisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeDeregisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeDeregisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv15 := &x.NodeID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeBatchDeregisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeIDs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.NodeIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeIDs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.NodeIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeBatchDeregisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeBatchDeregisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeIDs":
			if r.TryDecodeAsNil() {
				x.NodeIDs = nil
			} else {
				yyv4 := &x.NodeIDs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeBatchDeregisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeIDs = nil
	} else {
		yyv15 := &x.NodeIDs
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeServerInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RPCAdvertiseAddr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RPCAdvertiseAddr"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RPCAdvertiseAddr))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.RPCMajorVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RPCMajorVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.RPCMajorVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.RPCMinorVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RPCMinorVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.RPCMinorVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Datacenter))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Datacenter"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Datacenter))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeServerInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeServerInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "RPCAdvertiseAddr":
			if r.TryDecodeAsNil() {
				x.RPCAdvertiseAddr = ""
			} else {
				yyv4 := &x.RPCAdvertiseAddr
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "RPCMajorVersion":
			if r.TryDecodeAsNil() {
				x.RPCMajorVersion = 0
			} else {
				yyv6 := &x.RPCMajorVersion
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int32)(yyv6)) = int32(r.DecodeInt(32))
				}
			}
		case "RPCMinorVersion":
			if r.TryDecodeAsNil() {
				x.RPCMinorVersion = 0
			} else {
				yyv8 := &x.RPCMinorVersion
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int32)(yyv8)) = int32(r.DecodeInt(32))
				}
			}
		case "Datacenter":
			if r.TryDecodeAsNil() {
				x.Datacenter = ""
			} else {
				yyv10 := &x.Datacenter
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeServerInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RPCAdvertiseAddr = ""
	} else {
		yyv13 := &x.RPCAdvertiseAddr
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RPCMajorVersion = 0
	} else {
		yyv15 := &x.RPCMajorVersion
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*int32)(yyv15)) = int32(r.DecodeInt(32))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RPCMinorVersion = 0
	} else {
		yyv17 := &x.RPCMinorVersion
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*int32)(yyv17)) = int32(r.DecodeInt(32))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Datacenter = ""
	} else {
		yyv19 := &x.Datacenter
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeUpdateStatusRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeEvent == nil {
					r.EncodeNil()
				} else {
					x.NodeEvent.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeEvent"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeEvent == nil {
					r.EncodeNil()
				} else {
					x.NodeEvent.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.UpdatedAt))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UpdatedAt"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.UpdatedAt))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeUpdateStatusRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeUpdateStatusRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv6 := &x.Status
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "NodeEvent":
			if r.TryDecodeAsNil() {
				if x.NodeEvent != nil {
					x.NodeEvent = nil
				}
			} else {
				if x.NodeEvent == nil {
					x.NodeEvent = new(NodeEvent)
				}
				x.NodeEvent.CodecDecodeSelf(d)
			}
		case "UpdatedAt":
			if r.TryDecodeAsNil() {
				x.UpdatedAt = 0
			} else {
				yyv9 := &x.UpdatedAt
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*int64)(yyv9)) = int64(r.DecodeInt(64))
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv11 := &x.Region
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*string)(yyv11)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv13 := &x.Namespace
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*string)(yyv13)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv15 := &x.AuthToken
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*string)(yyv15)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv17 := &x.Forwarded
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					*((*bool)(yyv17)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeUpdateStatusRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv20 := &x.NodeID
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			*((*string)(yyv20)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv22 := &x.Status
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else {
			*((*string)(yyv22)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.NodeEvent != nil {
			x.NodeEvent = nil
		}
	} else {
		if x.NodeEvent == nil {
			x.NodeEvent = new(NodeEvent)
		}
		x.NodeEvent.CodecDecodeSelf(d)
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UpdatedAt = 0
	} else {
		yyv25 := &x.UpdatedAt
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv27 := &x.Region
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv29 := &x.Namespace
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv31 := &x.AuthToken
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv33 := &x.Forwarded
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeUpdateDrainRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DrainStrategy == nil {
					r.EncodeNil()
				} else {
					x.DrainStrategy.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DrainStrategy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DrainStrategy == nil {
					r.EncodeNil()
				} else {
					x.DrainStrategy.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Drain"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.MarkEligible))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MarkEligible"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.MarkEligible))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeEvent == nil {
					r.EncodeNil()
				} else {
					x.NodeEvent.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeEvent"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeEvent == nil {
					r.EncodeNil()
				} else {
					x.NodeEvent.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.UpdatedAt))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UpdatedAt"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.UpdatedAt))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeUpdateDrainRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeUpdateDrainRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "DrainStrategy":
			if r.TryDecodeAsNil() {
				if x.DrainStrategy != nil {
					x.DrainStrategy = nil
				}
			} else {
				if x.DrainStrategy == nil {
					x.DrainStrategy = new(DrainStrategy)
				}
				x.DrainStrategy.CodecDecodeSelf(d)
			}
		case "Drain":
			if r.TryDecodeAsNil() {
				x.Drain = false
			} else {
				yyv7 := &x.Drain
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*bool)(yyv7)) = r.DecodeBool()
				}
			}
		case "MarkEligible":
			if r.TryDecodeAsNil() {
				x.MarkEligible = false
			} else {
				yyv9 := &x.MarkEligible
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		case "NodeEvent":
			if r.TryDecodeAsNil() {
				if x.NodeEvent != nil {
					x.NodeEvent = nil
				}
			} else {
				if x.NodeEvent == nil {
					x.NodeEvent = new(NodeEvent)
				}
				x.NodeEvent.CodecDecodeSelf(d)
			}
		case "UpdatedAt":
			if r.TryDecodeAsNil() {
				x.UpdatedAt = 0
			} else {
				yyv12 := &x.UpdatedAt
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv14 := &x.Region
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv16 := &x.Namespace
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeUpdateDrainRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv23 := &x.NodeID
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.DrainStrategy != nil {
			x.DrainStrategy = nil
		}
	} else {
		if x.DrainStrategy == nil {
			x.DrainStrategy = new(DrainStrategy)
		}
		x.DrainStrategy.CodecDecodeSelf(d)
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Drain = false
	} else {
		yyv26 := &x.Drain
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else {
			*((*bool)(yyv26)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MarkEligible = false
	} else {
		yyv28 := &x.MarkEligible
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			*((*bool)(yyv28)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.NodeEvent != nil {
			x.NodeEvent = nil
		}
	} else {
		if x.NodeEvent == nil {
			x.NodeEvent = new(NodeEvent)
		}
		x.NodeEvent.CodecDecodeSelf(d)
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UpdatedAt = 0
	} else {
		yyv31 := &x.UpdatedAt
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv33 := &x.Region
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv35 := &x.Namespace
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *BatchNodeUpdateDrainRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Updates == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringPtrtoDrainUpdate((map[string]*DrainUpdate)(x.Updates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Updates"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Updates == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringPtrtoDrainUpdate((map[string]*DrainUpdate)(x.Updates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeEvents == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encMapstringPtrtoNodeEvent((map[string]*NodeEvent)(x.NodeEvents), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeEvents"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeEvents == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encMapstringPtrtoNodeEvent((map[string]*NodeEvent)(x.NodeEvents), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.UpdatedAt))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UpdatedAt"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.UpdatedAt))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *BatchNodeUpdateDrainRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *BatchNodeUpdateDrainRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Updates":
			if r.TryDecodeAsNil() {
				x.Updates = nil
			} else {
				yyv4 := &x.Updates
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringPtrtoDrainUpdate((*map[string]*DrainUpdate)(yyv4), d)
				}
			}
		case "NodeEvents":
			if r.TryDecodeAsNil() {
				x.NodeEvents = nil
			} else {
				yyv6 := &x.NodeEvents
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decMapstringPtrtoNodeEvent((*map[string]*NodeEvent)(yyv6), d)
				}
			}
		case "UpdatedAt":
			if r.TryDecodeAsNil() {
				x.UpdatedAt = 0
			} else {
				yyv8 := &x.UpdatedAt
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv12 := &x.Namespace
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv14 := &x.AuthToken
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv16 := &x.Forwarded
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *BatchNodeUpdateDrainRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Updates = nil
	} else {
		yyv19 := &x.Updates
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decMapstringPtrtoDrainUpdate((*map[string]*DrainUpdate)(yyv19), d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeEvents = nil
	} else {
		yyv21 := &x.NodeEvents
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			h.decMapstringPtrtoNodeEvent((*map[string]*NodeEvent)(yyv21), d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UpdatedAt = 0
	} else {
		yyv23 := &x.UpdatedAt
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*int64)(yyv23)) = int64(r.DecodeInt(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv29 := &x.AuthToken
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv31 := &x.Forwarded
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*bool)(yyv31)) = r.DecodeBool()
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DrainUpdate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DrainStrategy == nil {
					r.EncodeNil()
				} else {
					x.DrainStrategy.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DrainStrategy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DrainStrategy == nil {
					r.EncodeNil()
				} else {
					x.DrainStrategy.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.MarkEligible))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MarkEligible"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.MarkEligible))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DrainUpdate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DrainUpdate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DrainStrategy":
			if r.TryDecodeAsNil() {
				if x.DrainStrategy != nil {
					x.DrainStrategy = nil
				}
			} else {
				if x.DrainStrategy == nil {
					x.DrainStrategy = new(DrainStrategy)
				}
				x.DrainStrategy.CodecDecodeSelf(d)
			}
		case "MarkEligible":
			if r.TryDecodeAsNil() {
				x.MarkEligible = false
			} else {
				yyv5 := &x.MarkEligible
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*bool)(yyv5)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DrainUpdate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.DrainStrategy != nil {
			x.DrainStrategy = nil
		}
	} else {
		if x.DrainStrategy == nil {
			x.DrainStrategy = new(DrainStrategy)
		}
		x.DrainStrategy.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MarkEligible = false
	} else {
		yyv9 := &x.MarkEligible
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*bool)(yyv9)) = r.DecodeBool()
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeUpdateEligibilityRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Eligibility))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Eligibility"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Eligibility))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeEvent == nil {
					r.EncodeNil()
				} else {
					x.NodeEvent.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeEvent"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeEvent == nil {
					r.EncodeNil()
				} else {
					x.NodeEvent.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.UpdatedAt))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UpdatedAt"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.UpdatedAt))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeUpdateEligibilityRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeUpdateEligibilityRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Eligibility":
			if r.TryDecodeAsNil() {
				x.Eligibility = ""
			} else {
				yyv6 := &x.Eligibility
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "NodeEvent":
			if r.TryDecodeAsNil() {
				if x.NodeEvent != nil {
					x.NodeEvent = nil
				}
			} else {
				if x.NodeEvent == nil {
					x.NodeEvent = new(NodeEvent)
				}
				x.NodeEvent.CodecDecodeSelf(d)
			}
		case "UpdatedAt":
			if r.TryDecodeAsNil() {
				x.UpdatedAt = 0
			} else {
				yyv9 := &x.UpdatedAt
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*int64)(yyv9)) = int64(r.DecodeInt(64))
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv11 := &x.Region
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*string)(yyv11)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv13 := &x.Namespace
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*string)(yyv13)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv15 := &x.AuthToken
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*string)(yyv15)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv17 := &x.Forwarded
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					*((*bool)(yyv17)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeUpdateEligibilityRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv20 := &x.NodeID
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			*((*string)(yyv20)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Eligibility = ""
	} else {
		yyv22 := &x.Eligibility
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else {
			*((*string)(yyv22)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.NodeEvent != nil {
			x.NodeEvent = nil
		}
	} else {
		if x.NodeEvent == nil {
			x.NodeEvent = new(NodeEvent)
		}
		x.NodeEvent.CodecDecodeSelf(d)
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UpdatedAt = 0
	} else {
		yyv25 := &x.UpdatedAt
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv27 := &x.Region
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv29 := &x.Namespace
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv31 := &x.AuthToken
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv33 := &x.Forwarded
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeEvaluateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeEvaluateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeEvaluateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeEvaluateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv15 := &x.NodeID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SecretID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "SecretID":
			if r.TryDecodeAsNil() {
				x.SecretID = ""
			} else {
				yyv6 := &x.SecretID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv12 := &x.MinQueryIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv14 := &x.MaxQueryTime
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv16 := &x.AllowStale
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv18 := &x.Prefix
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv20 := &x.AuthToken
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv22 := &x.Forwarded
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv25 := &x.NodeID
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SecretID = ""
	} else {
		yyv27 := &x.SecretID
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv29 := &x.Region
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv31 := &x.Namespace
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv33 := &x.MinQueryIndex
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv35 := &x.MaxQueryTime
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv35) {
		} else {
			*((*int64)(yyv35)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv37 := &x.AllowStale
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv39 := &x.Prefix
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv41 := &x.AuthToken
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv43 := &x.Forwarded
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SearchResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Matches == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapContextSlicestring((map[Context][]string)(x.Matches), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Matches"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Matches == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapContextSlicestring((map[Context][]string)(x.Matches), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Truncations == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encMapContextbool((map[Context]bool)(x.Truncations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Truncations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Truncations == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encMapContextbool((map[Context]bool)(x.Truncations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SearchResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SearchResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Matches":
			if r.TryDecodeAsNil() {
				x.Matches = nil
			} else {
				yyv4 := &x.Matches
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapContextSlicestring((*map[Context][]string)(yyv4), d)
				}
			}
		case "Truncations":
			if r.TryDecodeAsNil() {
				x.Truncations = nil
			} else {
				yyv6 := &x.Truncations
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decMapContextbool((*map[Context]bool)(yyv6), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv8 := &x.Index
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv10 := &x.LastContact
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv12 := &x.KnownLeader
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SearchResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Matches = nil
	} else {
		yyv15 := &x.Matches
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decMapContextSlicestring((*map[Context][]string)(yyv15), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Truncations = nil
	} else {
		yyv17 := &x.Truncations
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			h.decMapContextbool((*map[Context]bool)(yyv17), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv19 := &x.Index
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv21 := &x.LastContact
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv21) {
		} else {
			*((*int64)(yyv21)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv23 := &x.KnownLeader
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SearchRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				x.Context.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Context"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				x.Context.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SearchRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SearchRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv4 := &x.Prefix
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Context":
			if r.TryDecodeAsNil() {
				x.Context = ""
			} else {
				yyv6 := &x.Context
				yyv6.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv7 := &x.Region
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv9 := &x.Namespace
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv11 := &x.MinQueryIndex
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv13 := &x.MaxQueryTime
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv13) {
				} else {
					*((*int64)(yyv13)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv15 := &x.AllowStale
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*bool)(yyv15)) = r.DecodeBool()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv17 := &x.AuthToken
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					*((*string)(yyv17)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv19 := &x.Forwarded
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					*((*bool)(yyv19)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SearchRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj21 int
	var yyb21 bool
	var yyhl21 bool = l >= 0
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv22 := &x.Prefix
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else {
			*((*string)(yyv22)) = r.DecodeString()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Context = ""
	} else {
		yyv24 := &x.Context
		yyv24.CodecDecodeSelf(d)
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv35 := &x.AuthToken
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv37 := &x.Forwarded
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	for {
		yyj21++
		if yyhl21 {
			yyb21 = yyj21 > l
		} else {
			yyb21 = r.CheckBreak()
		}
		if yyb21 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj21-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobRegisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.EnforceIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EnforceIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.EnforceIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.PolicyOverride))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PolicyOverride"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.PolicyOverride))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobRegisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobRegisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "EnforceIndex":
			if r.TryDecodeAsNil() {
				x.EnforceIndex = false
			} else {
				yyv5 := &x.EnforceIndex
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*bool)(yyv5)) = r.DecodeBool()
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv7 := &x.JobModifyIndex
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
				}
			}
		case "PolicyOverride":
			if r.TryDecodeAsNil() {
				x.PolicyOverride = false
			} else {
				yyv9 := &x.PolicyOverride
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv11 := &x.Region
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*string)(yyv11)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv13 := &x.Namespace
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*string)(yyv13)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv15 := &x.AuthToken
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*string)(yyv15)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv17 := &x.Forwarded
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					*((*bool)(yyv17)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobRegisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EnforceIndex = false
	} else {
		yyv21 := &x.EnforceIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv23 := &x.JobModifyIndex
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PolicyOverride = false
	} else {
		yyv25 := &x.PolicyOverride
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv27 := &x.Region
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv29 := &x.Namespace
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv31 := &x.AuthToken
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv33 := &x.Forwarded
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobDeregisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Purge))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Purge"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Purge))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobDeregisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobDeregisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Purge":
			if r.TryDecodeAsNil() {
				x.Purge = false
			} else {
				yyv6 := &x.Purge
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv12 := &x.AuthToken
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv14 := &x.Forwarded
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobDeregisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv17 := &x.JobID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Purge = false
	} else {
		yyv19 := &x.Purge
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv25 := &x.AuthToken
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv27 := &x.Forwarded
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobBatchDeregisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Jobs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapNamespacedIDPtrtoJobDeregisterOptions((map[NamespacedID]*JobDeregisterOptions)(x.Jobs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Jobs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Jobs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapNamespacedIDPtrtoJobDeregisterOptions((map[NamespacedID]*JobDeregisterOptions)(x.Jobs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Evals"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobBatchDeregisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobBatchDeregisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Jobs":
			if r.TryDecodeAsNil() {
				x.Jobs = nil
			} else {
				yyv4 := &x.Jobs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapNamespacedIDPtrtoJobDeregisterOptions((*map[NamespacedID]*JobDeregisterOptions)(yyv4), d)
				}
			}
		case "Evals":
			if r.TryDecodeAsNil() {
				x.Evals = nil
			} else {
				yyv6 := &x.Evals
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv6), d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv12 := &x.AuthToken
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv14 := &x.Forwarded
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobBatchDeregisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Jobs = nil
	} else {
		yyv17 := &x.Jobs
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			h.decMapNamespacedIDPtrtoJobDeregisterOptions((*map[NamespacedID]*JobDeregisterOptions)(yyv17), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Evals = nil
	} else {
		yyv19 := &x.Evals
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv19), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv25 := &x.AuthToken
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv27 := &x.Forwarded
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobDeregisterOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Purge))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Purge"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Purge))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobDeregisterOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobDeregisterOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Purge":
			if r.TryDecodeAsNil() {
				x.Purge = false
			} else {
				yyv4 := &x.Purge
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobDeregisterOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Purge = false
	} else {
		yyv7 := &x.Purge
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*bool)(yyv7)) = r.DecodeBool()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobEvaluateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy7 := &x.EvalOptions
				yy7.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalOptions"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy9 := &x.EvalOptions
				yy9.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym12 := z.EncBinary()
				_ = yym12
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym18 := z.EncBinary()
				_ = yym18
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym21 := z.EncBinary()
				_ = yym21
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobEvaluateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobEvaluateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalOptions":
			if r.TryDecodeAsNil() {
				x.EvalOptions = EvalOptions{}
			} else {
				yyv6 := &x.EvalOptions
				yyv6.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv7 := &x.Region
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv9 := &x.Namespace
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv11 := &x.AuthToken
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*string)(yyv11)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv13 := &x.Forwarded
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*bool)(yyv13)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobEvaluateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv16 := &x.JobID
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			*((*string)(yyv16)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalOptions = EvalOptions{}
	} else {
		yyv18 := &x.EvalOptions
		yyv18.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv19 := &x.Region
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv21 := &x.Namespace
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv23 := &x.AuthToken
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv25 := &x.Forwarded
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.ForceReschedule))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ForceReschedule"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.ForceReschedule))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ForceReschedule":
			if r.TryDecodeAsNil() {
				x.ForceReschedule = false
			} else {
				yyv4 := &x.ForceReschedule
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ForceReschedule = false
	} else {
		yyv7 := &x.ForceReschedule
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*bool)(yyv7)) = r.DecodeBool()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.All))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("All"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.All))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "All":
			if r.TryDecodeAsNil() {
				x.All = false
			} else {
				yyv6 := &x.All
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv12 := &x.MinQueryIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv14 := &x.MaxQueryTime
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv16 := &x.AllowStale
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv18 := &x.Prefix
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv20 := &x.AuthToken
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv22 := &x.Forwarded
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv25 := &x.JobID
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.All = false
	} else {
		yyv27 := &x.All
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv29 := &x.Region
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv31 := &x.Namespace
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv33 := &x.MinQueryIndex
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv35 := &x.MaxQueryTime
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv35) {
		} else {
			*((*int64)(yyv35)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv37 := &x.AllowStale
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv39 := &x.Prefix
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv41 := &x.AuthToken
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv43 := &x.Forwarded
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv16 := &x.AuthToken
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv18 := &x.Forwarded
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv33 := &x.AuthToken
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv35 := &x.Forwarded
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobPlanRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Diff))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Diff"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Diff))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.PolicyOverride))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PolicyOverride"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.PolicyOverride))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobPlanRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobPlanRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Diff":
			if r.TryDecodeAsNil() {
				x.Diff = false
			} else {
				yyv5 := &x.Diff
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*bool)(yyv5)) = r.DecodeBool()
				}
			}
		case "PolicyOverride":
			if r.TryDecodeAsNil() {
				x.PolicyOverride = false
			} else {
				yyv7 := &x.PolicyOverride
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*bool)(yyv7)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv9 := &x.Region
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv11 := &x.Namespace
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*string)(yyv11)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv13 := &x.AuthToken
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*string)(yyv13)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv15 := &x.Forwarded
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*bool)(yyv15)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobPlanRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj17 int
	var yyb17 bool
	var yyhl17 bool = l >= 0
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Diff = false
	} else {
		yyv19 := &x.Diff
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PolicyOverride = false
	} else {
		yyv21 := &x.PolicyOverride
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv23 := &x.Region
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv25 := &x.Namespace
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv27 := &x.AuthToken
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv29 := &x.Forwarded
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	for {
		yyj17++
		if yyhl17 {
			yyb17 = yyj17 > l
		} else {
			yyb17 = r.CheckBreak()
		}
		if yyb17 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj17-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobSummaryRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobSummaryRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobSummaryRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobSummaryRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv23 := &x.JobID
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobDispatchRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Payload))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Payload"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Payload))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobDispatchRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobDispatchRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				yyv6 := &x.Payload
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*yyv6 = r.DecodeBytes(*(*[]byte)(yyv6), false, false)
				}
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv8 := &x.Meta
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecMapStringStringX(yyv8, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv12 := &x.Namespace
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv14 := &x.AuthToken
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv16 := &x.Forwarded
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobDispatchRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv19 := &x.JobID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		yyv21 := &x.Payload
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*yyv21 = r.DecodeBytes(*(*[]byte)(yyv21), false, false)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv23 := &x.Meta
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			z.F.DecMapStringStringX(yyv23, false, d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv29 := &x.AuthToken
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv31 := &x.Forwarded
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*bool)(yyv31)) = r.DecodeBool()
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobValidateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobValidateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobValidateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv5 := &x.Region
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv7 := &x.Namespace
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv9 := &x.AuthToken
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv11 := &x.Forwarded
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*bool)(yyv11)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobValidateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv17 := &x.Namespace
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv19 := &x.AuthToken
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv21 := &x.Forwarded
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobRevertRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.JobVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.JobVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.EnforcePriorVersion == nil {
					r.EncodeNil()
				} else {
					yy10 := *x.EnforcePriorVersion
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeUint(uint64(yy10))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EnforcePriorVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.EnforcePriorVersion == nil {
					r.EncodeNil()
				} else {
					yy12 := *x.EnforcePriorVersion
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeUint(uint64(yy12))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.VaultToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("VaultToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.VaultToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym18 := z.EncBinary()
				_ = yym18
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym21 := z.EncBinary()
				_ = yym21
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym24 := z.EncBinary()
				_ = yym24
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym27 := z.EncBinary()
				_ = yym27
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobRevertRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobRevertRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "JobVersion":
			if r.TryDecodeAsNil() {
				x.JobVersion = 0
			} else {
				yyv6 := &x.JobVersion
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "EnforcePriorVersion":
			if r.TryDecodeAsNil() {
				if x.EnforcePriorVersion != nil {
					x.EnforcePriorVersion = nil
				}
			} else {
				if x.EnforcePriorVersion == nil {
					x.EnforcePriorVersion = new(uint64)
				}
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(x.EnforcePriorVersion)) = uint64(r.DecodeUint(64))
				}
			}
		case "VaultToken":
			if r.TryDecodeAsNil() {
				x.VaultToken = ""
			} else {
				yyv10 := &x.VaultToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv12 := &x.Region
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv14 := &x.Namespace
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv16 := &x.AuthToken
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv18 := &x.Forwarded
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobRevertRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv21 := &x.JobID
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobVersion = 0
	} else {
		yyv23 := &x.JobVersion
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.EnforcePriorVersion != nil {
			x.EnforcePriorVersion = nil
		}
	} else {
		if x.EnforcePriorVersion == nil {
			x.EnforcePriorVersion = new(uint64)
		}
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(x.EnforcePriorVersion)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.VaultToken = ""
	} else {
		yyv27 := &x.VaultToken
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv29 := &x.Region
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv31 := &x.Namespace
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv33 := &x.AuthToken
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv35 := &x.Forwarded
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobStabilityRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.JobVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.JobVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.Stable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Stable"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.Stable))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobStabilityRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobStabilityRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "JobVersion":
			if r.TryDecodeAsNil() {
				x.JobVersion = 0
			} else {
				yyv6 := &x.JobVersion
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "Stable":
			if r.TryDecodeAsNil() {
				x.Stable = false
			} else {
				yyv8 := &x.Stable
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv12 := &x.Namespace
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv14 := &x.AuthToken
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv16 := &x.Forwarded
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobStabilityRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv19 := &x.JobID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobVersion = 0
	} else {
		yyv21 := &x.JobVersion
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Stable = false
	} else {
		yyv23 := &x.Stable
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv29 := &x.AuthToken
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv31 := &x.Forwarded
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*bool)(yyv31)) = r.DecodeBool()
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobStabilityResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobStabilityResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobStabilityResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv4 := &x.Index
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobStabilityResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv7 := &x.Index
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv16 := &x.AuthToken
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv18 := &x.Forwarded
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv33 := &x.AuthToken
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv35 := &x.Forwarded
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalUpdateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Evals"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalUpdateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalUpdateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Evals":
			if r.TryDecodeAsNil() {
				x.Evals = nil
			} else {
				yyv4 := &x.Evals
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv4), d)
				}
			}
		case "EvalToken":
			if r.TryDecodeAsNil() {
				x.EvalToken = ""
			} else {
				yyv6 := &x.EvalToken
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv12 := &x.AuthToken
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv14 := &x.Forwarded
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalUpdateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Evals = nil
	} else {
		yyv17 := &x.Evals
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv17), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalToken = ""
	} else {
		yyv19 := &x.EvalToken
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv25 := &x.AuthToken
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv27 := &x.Forwarded
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalDeleteRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Evals, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Evals"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Evals, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.Allocs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Allocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.Allocs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalDeleteRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalDeleteRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Evals":
			if r.TryDecodeAsNil() {
				x.Evals = nil
			} else {
				yyv4 := &x.Evals
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Allocs":
			if r.TryDecodeAsNil() {
				x.Allocs = nil
			} else {
				yyv6 := &x.Allocs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv12 := &x.AuthToken
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv14 := &x.Forwarded
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalDeleteRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Evals = nil
	} else {
		yyv17 := &x.Evals
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecSliceStringX(yyv17, false, d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Allocs = nil
	} else {
		yyv19 := &x.Allocs
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			z.F.DecSliceStringX(yyv19, false, d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv25 := &x.AuthToken
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv27 := &x.Forwarded
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv23 := &x.EvalID
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalAckRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Token))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Token"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Token))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalAckRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalAckRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Token":
			if r.TryDecodeAsNil() {
				x.Token = ""
			} else {
				yyv6 := &x.Token
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv12 := &x.AuthToken
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv14 := &x.Forwarded
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalAckRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv17 := &x.EvalID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Token = ""
	} else {
		yyv19 := &x.Token
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv25 := &x.AuthToken
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv27 := &x.Forwarded
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalDequeueRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Schedulers == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Schedulers, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Schedulers"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Schedulers == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Schedulers, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Timeout) {
				} else {
					r.EncodeInt(int64(x.Timeout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Timeout"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Timeout) {
				} else {
					r.EncodeInt(int64(x.Timeout))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.SchedulerVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SchedulerVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.SchedulerVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalDequeueRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalDequeueRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Schedulers":
			if r.TryDecodeAsNil() {
				x.Schedulers = nil
			} else {
				yyv4 := &x.Schedulers
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Timeout":
			if r.TryDecodeAsNil() {
				x.Timeout = 0
			} else {
				yyv6 := &x.Timeout
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "SchedulerVersion":
			if r.TryDecodeAsNil() {
				x.SchedulerVersion = 0
			} else {
				yyv8 := &x.SchedulerVersion
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint16)(yyv8)) = uint16(r.DecodeUint(16))
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv12 := &x.Namespace
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv14 := &x.AuthToken
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv16 := &x.Forwarded
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalDequeueRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Schedulers = nil
	} else {
		yyv19 := &x.Schedulers
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			z.F.DecSliceStringX(yyv19, false, d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Timeout = 0
	} else {
		yyv21 := &x.Timeout
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv21) {
		} else {
			*((*int64)(yyv21)) = int64(r.DecodeInt(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SchedulerVersion = 0
	} else {
		yyv23 := &x.SchedulerVersion
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint16)(yyv23)) = uint16(r.DecodeUint(16))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv29 := &x.AuthToken
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv31 := &x.Forwarded
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*bool)(yyv31)) = r.DecodeBool()
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv16 := &x.AuthToken
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv18 := &x.Forwarded
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv33 := &x.AuthToken
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv35 := &x.Forwarded
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *PlanRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Plan == nil {
					r.EncodeNil()
				} else {
					x.Plan.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Plan"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Plan == nil {
					r.EncodeNil()
				} else {
					x.Plan.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *PlanRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *PlanRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Plan":
			if r.TryDecodeAsNil() {
				if x.Plan != nil {
					x.Plan = nil
				}
			} else {
				if x.Plan == nil {
					x.Plan = new(Plan)
				}
				x.Plan.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv5 := &x.Region
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv7 := &x.Namespace
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv9 := &x.AuthToken
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv11 := &x.Forwarded
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*bool)(yyv11)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *PlanRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Plan != nil {
			x.Plan = nil
		}
	} else {
		if x.Plan == nil {
			x.Plan = new(Plan)
		}
		x.Plan.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv17 := &x.Namespace
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv19 := &x.AuthToken
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv21 := &x.Forwarded
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ApplyPlanResultsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 15
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Alloc), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Alloc"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Alloc), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AllocsStopped == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSlicePtrtoAllocationDiff(([]*AllocationDiff)(x.AllocsStopped), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocsStopped"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AllocsStopped == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSlicePtrtoAllocationDiff(([]*AllocationDiff)(x.AllocsStopped), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AllocsUpdated == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.AllocsUpdated), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocsUpdated"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AllocsUpdated == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.AllocsUpdated), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Evals"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			}
			var yyn15 bool
			if x.AllocUpdateRequest.Job == nil {
				yyn15 = true
				goto LABEL15
			}
		LABEL15:
			if yyr2 || yy2arr2 {
				if yyn15 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem100)
					if x.Job == nil {
						r.EncodeNil()
					} else {
						x.Job.CodecEncodeSelf(e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if yyn15 {
					r.EncodeNil()
				} else {
					if x.Job == nil {
						r.EncodeNil()
					} else {
						x.Job.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Deployment == nil {
					r.EncodeNil()
				} else {
					x.Deployment.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Deployment"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Deployment == nil {
					r.EncodeNil()
				} else {
					x.Deployment.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DeploymentUpdates == nil {
					r.EncodeNil()
				} else {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						h.encSlicePtrtoDeploymentStatusUpdate(([]*DeploymentStatusUpdate)(x.DeploymentUpdates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentUpdates"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DeploymentUpdates == nil {
					r.EncodeNil()
				} else {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						h.encSlicePtrtoDeploymentStatusUpdate(([]*DeploymentStatusUpdate)(x.DeploymentUpdates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodePreemptions == nil {
					r.EncodeNil()
				} else {
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.NodePreemptions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodePreemptions"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodePreemptions == nil {
					r.EncodeNil()
				} else {
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.NodePreemptions), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AllocsPreempted == nil {
					r.EncodeNil()
				} else {
					yym43 := z.EncBinary()
					_ = yym43
					if false {
					} else {
						h.encSlicePtrtoAllocationDiff(([]*AllocationDiff)(x.AllocsPreempted), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocsPreempted"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AllocsPreempted == nil {
					r.EncodeNil()
				} else {
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else {
						h.encSlicePtrtoAllocationDiff(([]*AllocationDiff)(x.AllocsPreempted), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.PreemptionEvals == nil {
					r.EncodeNil()
				} else {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.PreemptionEvals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PreemptionEvals"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.PreemptionEvals == nil {
					r.EncodeNil()
				} else {
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.PreemptionEvals), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ApplyPlanResultsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ApplyPlanResultsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Alloc":
			if r.TryDecodeAsNil() {
				x.Alloc = nil
			} else {
				yyv4 := &x.Alloc
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv4), d)
				}
			}
		case "AllocsStopped":
			if r.TryDecodeAsNil() {
				x.AllocsStopped = nil
			} else {
				yyv6 := &x.AllocsStopped
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSlicePtrtoAllocationDiff((*[]*AllocationDiff)(yyv6), d)
				}
			}
		case "AllocsUpdated":
			if r.TryDecodeAsNil() {
				x.AllocsUpdated = nil
			} else {
				yyv8 := &x.AllocsUpdated
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv8), d)
				}
			}
		case "Evals":
			if r.TryDecodeAsNil() {
				x.Evals = nil
			} else {
				yyv10 := &x.Evals
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv10), d)
				}
			}
		case "Job":
			if x.AllocUpdateRequest.Job == nil {
				x.AllocUpdateRequest.Job = new(Job)
			}
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv13 := &x.Region
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*string)(yyv13)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv15 := &x.Namespace
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*string)(yyv15)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv17 := &x.AuthToken
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					*((*string)(yyv17)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv19 := &x.Forwarded
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					*((*bool)(yyv19)) = r.DecodeBool()
				}
			}
		case "Deployment":
			if r.TryDecodeAsNil() {
				if x.Deployment != nil {
					x.Deployment = nil
				}
			} else {
				if x.Deployment == nil {
					x.Deployment = new(Deployment)
				}
				x.Deployment.CodecDecodeSelf(d)
			}
		case "DeploymentUpdates":
			if r.TryDecodeAsNil() {
				x.DeploymentUpdates = nil
			} else {
				yyv22 := &x.DeploymentUpdates
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					h.decSlicePtrtoDeploymentStatusUpdate((*[]*DeploymentStatusUpdate)(yyv22), d)
				}
			}
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv24 := &x.EvalID
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "NodePreemptions":
			if r.TryDecodeAsNil() {
				x.NodePreemptions = nil
			} else {
				yyv26 := &x.NodePreemptions
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv26), d)
				}
			}
		case "AllocsPreempted":
			if r.TryDecodeAsNil() {
				x.AllocsPreempted = nil
			} else {
				yyv28 := &x.AllocsPreempted
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					h.decSlicePtrtoAllocationDiff((*[]*AllocationDiff)(yyv28), d)
				}
			}
		case "PreemptionEvals":
			if r.TryDecodeAsNil() {
				x.PreemptionEvals = nil
			} else {
				yyv30 := &x.PreemptionEvals
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv30), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ApplyPlanResultsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj32 int
	var yyb32 bool
	var yyhl32 bool = l >= 0
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Alloc = nil
	} else {
		yyv33 := &x.Alloc
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv33), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocsStopped = nil
	} else {
		yyv35 := &x.AllocsStopped
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			h.decSlicePtrtoAllocationDiff((*[]*AllocationDiff)(yyv35), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocsUpdated = nil
	} else {
		yyv37 := &x.AllocsUpdated
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv37), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Evals = nil
	} else {
		yyv39 := &x.Evals
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv39), d)
		}
	}
	if x.AllocUpdateRequest.Job == nil {
		x.AllocUpdateRequest.Job = new(Job)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv42 := &x.Region
		yym43 := z.DecBinary()
		_ = yym43
		if false {
		} else {
			*((*string)(yyv42)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv44 := &x.Namespace
		yym45 := z.DecBinary()
		_ = yym45
		if false {
		} else {
			*((*string)(yyv44)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv46 := &x.AuthToken
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else {
			*((*string)(yyv46)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv48 := &x.Forwarded
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			*((*bool)(yyv48)) = r.DecodeBool()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Deployment != nil {
			x.Deployment = nil
		}
	} else {
		if x.Deployment == nil {
			x.Deployment = new(Deployment)
		}
		x.Deployment.CodecDecodeSelf(d)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentUpdates = nil
	} else {
		yyv51 := &x.DeploymentUpdates
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			h.decSlicePtrtoDeploymentStatusUpdate((*[]*DeploymentStatusUpdate)(yyv51), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv53 := &x.EvalID
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*string)(yyv53)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodePreemptions = nil
	} else {
		yyv55 := &x.NodePreemptions
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv55), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocsPreempted = nil
	} else {
		yyv57 := &x.AllocsPreempted
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			h.decSlicePtrtoAllocationDiff((*[]*AllocationDiff)(yyv57), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreemptionEvals = nil
	} else {
		yyv59 := &x.PreemptionEvals
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv59), d)
		}
	}
	for {
		yyj32++
		if yyhl32 {
			yyb32 = yyj32 > l
		} else {
			yyb32 = r.CheckBreak()
		}
		if yyb32 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj32-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocUpdateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Alloc), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Alloc"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Alloc), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AllocsStopped == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSlicePtrtoAllocationDiff(([]*AllocationDiff)(x.AllocsStopped), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocsStopped"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AllocsStopped == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSlicePtrtoAllocationDiff(([]*AllocationDiff)(x.AllocsStopped), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AllocsUpdated == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.AllocsUpdated), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocsUpdated"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AllocsUpdated == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.AllocsUpdated), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Evals"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocUpdateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocUpdateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Alloc":
			if r.TryDecodeAsNil() {
				x.Alloc = nil
			} else {
				yyv4 := &x.Alloc
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv4), d)
				}
			}
		case "AllocsStopped":
			if r.TryDecodeAsNil() {
				x.AllocsStopped = nil
			} else {
				yyv6 := &x.AllocsStopped
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSlicePtrtoAllocationDiff((*[]*AllocationDiff)(yyv6), d)
				}
			}
		case "AllocsUpdated":
			if r.TryDecodeAsNil() {
				x.AllocsUpdated = nil
			} else {
				yyv8 := &x.AllocsUpdated
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv8), d)
				}
			}
		case "Evals":
			if r.TryDecodeAsNil() {
				x.Evals = nil
			} else {
				yyv10 := &x.Evals
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv10), d)
				}
			}
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv13 := &x.Region
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*string)(yyv13)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv15 := &x.Namespace
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*string)(yyv15)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv17 := &x.AuthToken
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					*((*string)(yyv17)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv19 := &x.Forwarded
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					*((*bool)(yyv19)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocUpdateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj21 int
	var yyb21 bool
	var yyhl21 bool = l >= 0
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Alloc = nil
	} else {
		yyv22 := &x.Alloc
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv22), d)
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocsStopped = nil
	} else {
		yyv24 := &x.AllocsStopped
		yym25 := z.DecBinary()
		_ = yym25
		if false {
		} else {
			h.decSlicePtrtoAllocationDiff((*[]*AllocationDiff)(yyv24), d)
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocsUpdated = nil
	} else {
		yyv26 := &x.AllocsUpdated
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv26), d)
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Evals = nil
	} else {
		yyv28 := &x.Evals
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv28), d)
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv31 := &x.Region
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv33 := &x.Namespace
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv35 := &x.AuthToken
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv37 := &x.Forwarded
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	for {
		yyj21++
		if yyhl21 {
			yyb21 = yyj21 > l
		} else {
			yyb21 = r.CheckBreak()
		}
		if yyb21 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj21-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocUpdateDesiredTransitionRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringPtrtoDesiredTransition((map[string]*DesiredTransition)(x.Allocs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Allocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringPtrtoDesiredTransition((map[string]*DesiredTransition)(x.Allocs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Evals"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocUpdateDesiredTransitionRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocUpdateDesiredTransitionRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Allocs":
			if r.TryDecodeAsNil() {
				x.Allocs = nil
			} else {
				yyv4 := &x.Allocs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringPtrtoDesiredTransition((*map[string]*DesiredTransition)(yyv4), d)
				}
			}
		case "Evals":
			if r.TryDecodeAsNil() {
				x.Evals = nil
			} else {
				yyv6 := &x.Evals
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv6), d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv12 := &x.AuthToken
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv14 := &x.Forwarded
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocUpdateDesiredTransitionRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Allocs = nil
	} else {
		yyv17 := &x.Allocs
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			h.decMapstringPtrtoDesiredTransition((*map[string]*DesiredTransition)(yyv17), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Evals = nil
	} else {
		yyv19 := &x.Evals
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv19), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv25 := &x.AuthToken
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv27 := &x.Forwarded
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocStopRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocStopRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocStopRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocStopRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv15 := &x.AllocID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocStopResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocStopResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocStopResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocStopResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv9 := &x.EvalID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv11 := &x.Index
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv16 := &x.AuthToken
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv18 := &x.Forwarded
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv33 := &x.AuthToken
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv35 := &x.Forwarded
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv23 := &x.AllocID
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocSignalRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [11]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(11)
			} else {
				yynn2 = 11
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Task))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Task"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Task))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Signal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Signal"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Signal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocSignalRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocSignalRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Task":
			if r.TryDecodeAsNil() {
				x.Task = ""
			} else {
				yyv6 := &x.Task
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Signal":
			if r.TryDecodeAsNil() {
				x.Signal = ""
			} else {
				yyv8 := &x.Signal
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv12 := &x.Namespace
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv14 := &x.MinQueryIndex
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv16 := &x.MaxQueryTime
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv16) {
				} else {
					*((*int64)(yyv16)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv18 := &x.AllowStale
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv20 := &x.Prefix
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv22 := &x.AuthToken
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv24 := &x.Forwarded
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*bool)(yyv24)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocSignalRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv27 := &x.AllocID
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Task = ""
	} else {
		yyv29 := &x.Task
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Signal = ""
	} else {
		yyv31 := &x.Signal
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv33 := &x.Region
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv35 := &x.Namespace
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv37 := &x.MinQueryIndex
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*uint64)(yyv37)) = uint64(r.DecodeUint(64))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv39 := &x.MaxQueryTime
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv39) {
		} else {
			*((*int64)(yyv39)) = int64(r.DecodeInt(64))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv41 := &x.AllowStale
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*bool)(yyv41)) = r.DecodeBool()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv43 := &x.Prefix
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv45 := &x.AuthToken
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*string)(yyv45)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv47 := &x.Forwarded
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*bool)(yyv47)) = r.DecodeBool()
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocsGetRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AllocIDs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.AllocIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AllocIDs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.AllocIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocsGetRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocsGetRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AllocIDs":
			if r.TryDecodeAsNil() {
				x.AllocIDs = nil
			} else {
				yyv4 := &x.AllocIDs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocsGetRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocIDs = nil
	} else {
		yyv23 := &x.AllocIDs
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			z.F.DecSliceStringX(yyv23, false, d)
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocRestartRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TaskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TaskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TaskName))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocRestartRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocRestartRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "TaskName":
			if r.TryDecodeAsNil() {
				x.TaskName = ""
			} else {
				yyv6 := &x.TaskName
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv12 := &x.MinQueryIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv14 := &x.MaxQueryTime
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv16 := &x.AllowStale
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv18 := &x.Prefix
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv20 := &x.AuthToken
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv22 := &x.Forwarded
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocRestartRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv25 := &x.AllocID
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskName = ""
	} else {
		yyv27 := &x.TaskName
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv29 := &x.Region
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv31 := &x.Namespace
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv33 := &x.MinQueryIndex
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv35 := &x.MaxQueryTime
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv35) {
		} else {
			*((*int64)(yyv35)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv37 := &x.AllowStale
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv39 := &x.Prefix
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv41 := &x.AuthToken
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv43 := &x.Forwarded
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *PeriodicForceRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *PeriodicForceRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *PeriodicForceRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *PeriodicForceRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv15 := &x.JobID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ServerMembersResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ServerName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ServerName"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ServerName))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ServerRegion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ServerRegion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ServerRegion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ServerDC))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ServerDC"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ServerDC))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Members == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoServerMember(([]*ServerMember)(x.Members), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Members"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Members == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoServerMember(([]*ServerMember)(x.Members), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ServerMembersResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ServerMembersResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ServerName":
			if r.TryDecodeAsNil() {
				x.ServerName = ""
			} else {
				yyv4 := &x.ServerName
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "ServerRegion":
			if r.TryDecodeAsNil() {
				x.ServerRegion = ""
			} else {
				yyv6 := &x.ServerRegion
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "ServerDC":
			if r.TryDecodeAsNil() {
				x.ServerDC = ""
			} else {
				yyv8 := &x.ServerDC
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Members":
			if r.TryDecodeAsNil() {
				x.Members = nil
			} else {
				yyv10 := &x.Members
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSlicePtrtoServerMember((*[]*ServerMember)(yyv10), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ServerMembersResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ServerName = ""
	} else {
		yyv13 := &x.ServerName
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ServerRegion = ""
	} else {
		yyv15 := &x.ServerRegion
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ServerDC = ""
	} else {
		yyv17 := &x.ServerDC
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Members = nil
	} else {
		yyv19 := &x.Members
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSlicePtrtoServerMember((*[]*ServerMember)(yyv19), d)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ServerMember) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [11]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(11)
			} else {
				yynn2 = 11
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Addr == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Addr) {
					} else if !yym7 {
						z.EncTextMarshal(x.Addr)
					} else {
						h.encnet_IP((net.IP)(x.Addr), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Addr"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Addr == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Addr) {
					} else if !yym8 {
						z.EncTextMarshal(x.Addr)
					} else {
						h.encnet_IP((net.IP)(x.Addr), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Port))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tags == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncMapStringStringV(x.Tags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tags"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tags == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncMapStringStringV(x.Tags, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolMin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ProtocolMin"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolMin))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolMax))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ProtocolMax"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolMax))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolCur))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ProtocolCur"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolCur))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateMin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DelegateMin"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateMin))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateMax))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DelegateMax"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateMax))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateCur))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DelegateCur"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateCur))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ServerMember) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ServerMember) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Addr":
			if r.TryDecodeAsNil() {
				x.Addr = nil
			} else {
				yyv6 := &x.Addr
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else if !yym7 {
					z.DecTextUnmarshal(yyv6)
				} else {
					h.decnet_IP((*net.IP)(yyv6), d)
				}
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				yyv8 := &x.Port
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint16)(yyv8)) = uint16(r.DecodeUint(16))
				}
			}
		case "Tags":
			if r.TryDecodeAsNil() {
				x.Tags = nil
			} else {
				yyv10 := &x.Tags
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecMapStringStringX(yyv10, false, d)
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv12 := &x.Status
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "ProtocolMin":
			if r.TryDecodeAsNil() {
				x.ProtocolMin = 0
			} else {
				yyv14 := &x.ProtocolMin
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint8)(yyv14)) = uint8(r.DecodeUint(8))
				}
			}
		case "ProtocolMax":
			if r.TryDecodeAsNil() {
				x.ProtocolMax = 0
			} else {
				yyv16 := &x.ProtocolMax
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*uint8)(yyv16)) = uint8(r.DecodeUint(8))
				}
			}
		case "ProtocolCur":
			if r.TryDecodeAsNil() {
				x.ProtocolCur = 0
			} else {
				yyv18 := &x.ProtocolCur
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*uint8)(yyv18)) = uint8(r.DecodeUint(8))
				}
			}
		case "DelegateMin":
			if r.TryDecodeAsNil() {
				x.DelegateMin = 0
			} else {
				yyv20 := &x.DelegateMin
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*uint8)(yyv20)) = uint8(r.DecodeUint(8))
				}
			}
		case "DelegateMax":
			if r.TryDecodeAsNil() {
				x.DelegateMax = 0
			} else {
				yyv22 := &x.DelegateMax
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*uint8)(yyv22)) = uint8(r.DecodeUint(8))
				}
			}
		case "DelegateCur":
			if r.TryDecodeAsNil() {
				x.DelegateCur = 0
			} else {
				yyv24 := &x.DelegateCur
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*uint8)(yyv24)) = uint8(r.DecodeUint(8))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ServerMember) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv27 := &x.Name
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Addr = nil
	} else {
		yyv29 := &x.Addr
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv29) {
		} else if !yym30 {
			z.DecTextUnmarshal(yyv29)
		} else {
			h.decnet_IP((*net.IP)(yyv29), d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		yyv31 := &x.Port
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*uint16)(yyv31)) = uint16(r.DecodeUint(16))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tags = nil
	} else {
		yyv33 := &x.Tags
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			z.F.DecMapStringStringX(yyv33, false, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv35 := &x.Status
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ProtocolMin = 0
	} else {
		yyv37 := &x.ProtocolMin
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*uint8)(yyv37)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ProtocolMax = 0
	} else {
		yyv39 := &x.ProtocolMax
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*uint8)(yyv39)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ProtocolCur = 0
	} else {
		yyv41 := &x.ProtocolCur
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*uint8)(yyv41)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DelegateMin = 0
	} else {
		yyv43 := &x.DelegateMin
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*uint8)(yyv43)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DelegateMax = 0
	} else {
		yyv45 := &x.DelegateMax
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*uint8)(yyv45)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DelegateCur = 0
	} else {
		yyv47 := &x.DelegateCur
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*uint8)(yyv47)) = uint8(r.DecodeUint(8))
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeriveVaultTokenRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 12
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SecretID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncSliceStringV(x.Tasks, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tasks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncSliceStringV(x.Tasks, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeriveVaultTokenRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeriveVaultTokenRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "SecretID":
			if r.TryDecodeAsNil() {
				x.SecretID = ""
			} else {
				yyv6 := &x.SecretID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv8 := &x.AllocID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Tasks":
			if r.TryDecodeAsNil() {
				x.Tasks = nil
			} else {
				yyv10 := &x.Tasks
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecSliceStringX(yyv10, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv12 := &x.Region
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv14 := &x.Namespace
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv16 := &x.MinQueryIndex
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*uint64)(yyv16)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv18 := &x.MaxQueryTime
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv18) {
				} else {
					*((*int64)(yyv18)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv20 := &x.AllowStale
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv22 := &x.Prefix
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv24 := &x.AuthToken
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv26 := &x.Forwarded
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*bool)(yyv26)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeriveVaultTokenRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj28 int
	var yyb28 bool
	var yyhl28 bool = l >= 0
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv29 := &x.NodeID
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SecretID = ""
	} else {
		yyv31 := &x.SecretID
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv33 := &x.AllocID
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tasks = nil
	} else {
		yyv35 := &x.Tasks
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			z.F.DecSliceStringX(yyv35, false, d)
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv37 := &x.Region
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv39 := &x.Namespace
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv41 := &x.MinQueryIndex
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*uint64)(yyv41)) = uint64(r.DecodeUint(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv43 := &x.MaxQueryTime
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv43) {
		} else {
			*((*int64)(yyv43)) = int64(r.DecodeInt(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv45 := &x.AllowStale
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*bool)(yyv45)) = r.DecodeBool()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv47 := &x.Prefix
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*string)(yyv47)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv49 := &x.AuthToken
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*string)(yyv49)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv51 := &x.Forwarded
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*bool)(yyv51)) = r.DecodeBool()
		}
	}
	for {
		yyj28++
		if yyhl28 {
			yyb28 = yyj28 > l
		} else {
			yyb28 = r.CheckBreak()
		}
		if yyb28 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj28-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *VaultAccessorsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Accessors == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoVaultAccessor(([]*VaultAccessor)(x.Accessors), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Accessors"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Accessors == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoVaultAccessor(([]*VaultAccessor)(x.Accessors), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *VaultAccessorsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *VaultAccessorsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Accessors":
			if r.TryDecodeAsNil() {
				x.Accessors = nil
			} else {
				yyv4 := &x.Accessors
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoVaultAccessor((*[]*VaultAccessor)(yyv4), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *VaultAccessorsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Accessors = nil
	} else {
		yyv7 := &x.Accessors
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			h.decSlicePtrtoVaultAccessor((*[]*VaultAccessor)(yyv7), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *VaultAccessor) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Task))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Task"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Task))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Accessor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Accessor"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Accessor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.CreationTTL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreationTTL"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeInt(int64(x.CreationTTL))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *VaultAccessor) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *VaultAccessor) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Task":
			if r.TryDecodeAsNil() {
				x.Task = ""
			} else {
				yyv6 := &x.Task
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv8 := &x.NodeID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Accessor":
			if r.TryDecodeAsNil() {
				x.Accessor = ""
			} else {
				yyv10 := &x.Accessor
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "CreationTTL":
			if r.TryDecodeAsNil() {
				x.CreationTTL = 0
			} else {
				yyv12 := &x.CreationTTL
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*int)(yyv12)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv14 := &x.CreateIndex
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *VaultAccessor) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv17 := &x.AllocID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Task = ""
	} else {
		yyv19 := &x.Task
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv21 := &x.NodeID
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Accessor = ""
	} else {
		yyv23 := &x.Accessor
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreationTTL = 0
	} else {
		yyv25 := &x.CreationTTL
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*int)(yyv25)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv27 := &x.CreateIndex
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeriveVaultTokenResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncMapStringStringV(x.Tasks, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tasks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncMapStringStringV(x.Tasks, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Error == nil {
					r.EncodeNil()
				} else {
					x.Error.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Error"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Error == nil {
					r.EncodeNil()
				} else {
					x.Error.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeriveVaultTokenResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeriveVaultTokenResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Tasks":
			if r.TryDecodeAsNil() {
				x.Tasks = nil
			} else {
				yyv4 := &x.Tasks
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4, false, d)
				}
			}
		case "Error":
			if r.TryDecodeAsNil() {
				if x.Error != nil {
					x.Error = nil
				}
			} else {
				if x.Error == nil {
					x.Error = new(RecoverableError)
				}
				x.Error.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv7 := &x.Index
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv9 := &x.LastContact
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv9) {
				} else {
					*((*int64)(yyv9)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv11 := &x.KnownLeader
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*bool)(yyv11)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeriveVaultTokenResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tasks = nil
	} else {
		yyv14 := &x.Tasks
		yym15 := z.DecBinary()
		_ = yym15
		if false {
		} else {
			z.F.DecMapStringStringX(yyv14, false, d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Error != nil {
			x.Error = nil
		}
	} else {
		if x.Error == nil {
			x.Error = new(RecoverableError)
		}
		x.Error.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv17 := &x.Index
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv19 := &x.LastContact
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv21 := &x.KnownLeader
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *GenericRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *GenericRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *GenericRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv16 := &x.AuthToken
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv18 := &x.Forwarded
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *GenericRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv33 := &x.AuthToken
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv35 := &x.Forwarded
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv16 := &x.AuthToken
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv18 := &x.Forwarded
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv33 := &x.AuthToken
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv35 := &x.Forwarded
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentDeleteRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Deployments == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Deployments, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Deployments"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Deployments == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Deployments, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentDeleteRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentDeleteRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Deployments":
			if r.TryDecodeAsNil() {
				x.Deployments = nil
			} else {
				yyv4 := &x.Deployments
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentDeleteRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Deployments = nil
	} else {
		yyv15 := &x.Deployments
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentStatusUpdateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Eval"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DeploymentUpdate == nil {
					r.EncodeNil()
				} else {
					x.DeploymentUpdate.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentUpdate"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DeploymentUpdate == nil {
					r.EncodeNil()
				} else {
					x.DeploymentUpdate.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentStatusUpdateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentStatusUpdateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Eval":
			if r.TryDecodeAsNil() {
				if x.Eval != nil {
					x.Eval = nil
				}
			} else {
				if x.Eval == nil {
					x.Eval = new(Evaluation)
				}
				x.Eval.CodecDecodeSelf(d)
			}
		case "DeploymentUpdate":
			if r.TryDecodeAsNil() {
				if x.DeploymentUpdate != nil {
					x.DeploymentUpdate = nil
				}
			} else {
				if x.DeploymentUpdate == nil {
					x.DeploymentUpdate = new(DeploymentStatusUpdate)
				}
				x.DeploymentUpdate.CodecDecodeSelf(d)
			}
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentStatusUpdateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Eval != nil {
			x.Eval = nil
		}
	} else {
		if x.Eval == nil {
			x.Eval = new(Evaluation)
		}
		x.Eval.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.DeploymentUpdate != nil {
			x.DeploymentUpdate = nil
		}
	} else {
		if x.DeploymentUpdate == nil {
			x.DeploymentUpdate = new(DeploymentStatusUpdate)
		}
		x.DeploymentUpdate.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentAllocHealthRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.HealthyAllocationIDs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.HealthyAllocationIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HealthyAllocationIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.HealthyAllocationIDs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.HealthyAllocationIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.UnhealthyAllocationIDs == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncSliceStringV(x.UnhealthyAllocationIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UnhealthyAllocationIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.UnhealthyAllocationIDs == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncSliceStringV(x.UnhealthyAllocationIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentAllocHealthRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentAllocHealthRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv4 := &x.DeploymentID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "HealthyAllocationIDs":
			if r.TryDecodeAsNil() {
				x.HealthyAllocationIDs = nil
			} else {
				yyv6 := &x.HealthyAllocationIDs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "UnhealthyAllocationIDs":
			if r.TryDecodeAsNil() {
				x.UnhealthyAllocationIDs = nil
			} else {
				yyv8 := &x.UnhealthyAllocationIDs
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv12 := &x.Namespace
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv14 := &x.AuthToken
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv16 := &x.Forwarded
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentAllocHealthRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv19 := &x.DeploymentID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HealthyAllocationIDs = nil
	} else {
		yyv21 := &x.HealthyAllocationIDs
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			z.F.DecSliceStringX(yyv21, false, d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UnhealthyAllocationIDs = nil
	} else {
		yyv23 := &x.UnhealthyAllocationIDs
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			z.F.DecSliceStringX(yyv23, false, d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv29 := &x.AuthToken
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv31 := &x.Forwarded
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*bool)(yyv31)) = r.DecodeBool()
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ApplyDeploymentAllocHealthRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [11]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(11)
			} else {
				yynn2 = 11
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.HealthyAllocationIDs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.HealthyAllocationIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HealthyAllocationIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.HealthyAllocationIDs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.HealthyAllocationIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.UnhealthyAllocationIDs == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncSliceStringV(x.UnhealthyAllocationIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UnhealthyAllocationIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.UnhealthyAllocationIDs == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncSliceStringV(x.UnhealthyAllocationIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy25 := &x.Timestamp
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else if yym27 := z.TimeRtidIfBinc(); yym27 != 0 {
					r.EncodeBuiltin(yym27, yy25)
				} else if z.HasExtensions() && z.EncExt(yy25) {
				} else if yym26 {
					z.EncBinaryMarshal(yy25)
				} else if !yym26 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy25)
				} else {
					z.EncFallback(yy25)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Timestamp"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy28 := &x.Timestamp
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else if yym30 := z.TimeRtidIfBinc(); yym30 != 0 {
					r.EncodeBuiltin(yym30, yy28)
				} else if z.HasExtensions() && z.EncExt(yy28) {
				} else if yym29 {
					z.EncBinaryMarshal(yy28)
				} else if !yym29 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy28)
				} else {
					z.EncFallback(yy28)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DeploymentUpdate == nil {
					r.EncodeNil()
				} else {
					x.DeploymentUpdate.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentUpdate"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DeploymentUpdate == nil {
					r.EncodeNil()
				} else {
					x.DeploymentUpdate.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Eval"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ApplyDeploymentAllocHealthRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ApplyDeploymentAllocHealthRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv4 := &x.DeploymentID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "HealthyAllocationIDs":
			if r.TryDecodeAsNil() {
				x.HealthyAllocationIDs = nil
			} else {
				yyv6 := &x.HealthyAllocationIDs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "UnhealthyAllocationIDs":
			if r.TryDecodeAsNil() {
				x.UnhealthyAllocationIDs = nil
			} else {
				yyv8 := &x.UnhealthyAllocationIDs
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv12 := &x.Namespace
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv14 := &x.AuthToken
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv16 := &x.Forwarded
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				yyv18 := &x.Timestamp
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else if yym20 := z.TimeRtidIfBinc(); yym20 != 0 {
					r.DecodeBuiltin(yym20, yyv18)
				} else if z.HasExtensions() && z.DecExt(yyv18) {
				} else if yym19 {
					z.DecBinaryUnmarshal(yyv18)
				} else if !yym19 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv18)
				} else {
					z.DecFallback(yyv18, false)
				}
			}
		case "DeploymentUpdate":
			if r.TryDecodeAsNil() {
				if x.DeploymentUpdate != nil {
					x.DeploymentUpdate = nil
				}
			} else {
				if x.DeploymentUpdate == nil {
					x.DeploymentUpdate = new(DeploymentStatusUpdate)
				}
				x.DeploymentUpdate.CodecDecodeSelf(d)
			}
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Eval":
			if r.TryDecodeAsNil() {
				if x.Eval != nil {
					x.Eval = nil
				}
			} else {
				if x.Eval == nil {
					x.Eval = new(Evaluation)
				}
				x.Eval.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ApplyDeploymentAllocHealthRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv25 := &x.DeploymentID
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HealthyAllocationIDs = nil
	} else {
		yyv27 := &x.HealthyAllocationIDs
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			z.F.DecSliceStringX(yyv27, false, d)
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UnhealthyAllocationIDs = nil
	} else {
		yyv29 := &x.UnhealthyAllocationIDs
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			z.F.DecSliceStringX(yyv29, false, d)
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv31 := &x.Region
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv33 := &x.Namespace
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv35 := &x.AuthToken
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv37 := &x.Forwarded
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		yyv39 := &x.Timestamp
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else if yym41 := z.TimeRtidIfBinc(); yym41 != 0 {
			r.DecodeBuiltin(yym41, yyv39)
		} else if z.HasExtensions() && z.DecExt(yyv39) {
		} else if yym40 {
			z.DecBinaryUnmarshal(yyv39)
		} else if !yym40 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv39)
		} else {
			z.DecFallback(yyv39, false)
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.DeploymentUpdate != nil {
			x.DeploymentUpdate = nil
		}
	} else {
		if x.DeploymentUpdate == nil {
			x.DeploymentUpdate = new(DeploymentStatusUpdate)
		}
		x.DeploymentUpdate.CodecDecodeSelf(d)
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Eval != nil {
			x.Eval = nil
		}
	} else {
		if x.Eval == nil {
			x.Eval = new(Evaluation)
		}
		x.Eval.CodecDecodeSelf(d)
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentPromoteRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.All))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("All"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.All))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Groups == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncSliceStringV(x.Groups, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Groups"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Groups == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncSliceStringV(x.Groups, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentPromoteRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentPromoteRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv4 := &x.DeploymentID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "All":
			if r.TryDecodeAsNil() {
				x.All = false
			} else {
				yyv6 := &x.All
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Groups":
			if r.TryDecodeAsNil() {
				x.Groups = nil
			} else {
				yyv8 := &x.Groups
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv12 := &x.Namespace
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv14 := &x.AuthToken
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv16 := &x.Forwarded
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentPromoteRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv19 := &x.DeploymentID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.All = false
	} else {
		yyv21 := &x.All
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Groups = nil
	} else {
		yyv23 := &x.Groups
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			z.F.DecSliceStringX(yyv23, false, d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv29 := &x.AuthToken
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv31 := &x.Forwarded
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*bool)(yyv31)) = r.DecodeBool()
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ApplyDeploymentPromoteRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.All))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("All"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.All))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Groups == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncSliceStringV(x.Groups, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Groups"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Groups == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncSliceStringV(x.Groups, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Eval"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ApplyDeploymentPromoteRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ApplyDeploymentPromoteRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv4 := &x.DeploymentID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "All":
			if r.TryDecodeAsNil() {
				x.All = false
			} else {
				yyv6 := &x.All
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Groups":
			if r.TryDecodeAsNil() {
				x.Groups = nil
			} else {
				yyv8 := &x.Groups
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv12 := &x.Namespace
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv14 := &x.AuthToken
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv16 := &x.Forwarded
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Eval":
			if r.TryDecodeAsNil() {
				if x.Eval != nil {
					x.Eval = nil
				}
			} else {
				if x.Eval == nil {
					x.Eval = new(Evaluation)
				}
				x.Eval.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ApplyDeploymentPromoteRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv20 := &x.DeploymentID
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			*((*string)(yyv20)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.All = false
	} else {
		yyv22 := &x.All
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else {
			*((*bool)(yyv22)) = r.DecodeBool()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Groups = nil
	} else {
		yyv24 := &x.Groups
		yym25 := z.DecBinary()
		_ = yym25
		if false {
		} else {
			z.F.DecSliceStringX(yyv24, false, d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv26 := &x.Region
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else {
			*((*string)(yyv26)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv28 := &x.Namespace
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			*((*string)(yyv28)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv30 := &x.AuthToken
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			*((*string)(yyv30)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv32 := &x.Forwarded
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			*((*bool)(yyv32)) = r.DecodeBool()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Eval != nil {
			x.Eval = nil
		}
	} else {
		if x.Eval == nil {
			x.Eval = new(Evaluation)
		}
		x.Eval.CodecDecodeSelf(d)
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentPauseRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Pause))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Pause"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Pause))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentPauseRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentPauseRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv4 := &x.DeploymentID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Pause":
			if r.TryDecodeAsNil() {
				x.Pause = false
			} else {
				yyv6 := &x.Pause
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv12 := &x.AuthToken
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv14 := &x.Forwarded
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentPauseRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv17 := &x.DeploymentID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Pause = false
	} else {
		yyv19 := &x.Pause
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv25 := &x.AuthToken
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv27 := &x.Forwarded
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv4 := &x.DeploymentID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv23 := &x.DeploymentID
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentFailRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentFailRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentFailRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv4 := &x.DeploymentID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentFailRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv15 := &x.DeploymentID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SingleDeploymentResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Deployment == nil {
					r.EncodeNil()
				} else {
					x.Deployment.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Deployment"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Deployment == nil {
					r.EncodeNil()
				} else {
					x.Deployment.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SingleDeploymentResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SingleDeploymentResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Deployment":
			if r.TryDecodeAsNil() {
				if x.Deployment != nil {
					x.Deployment = nil
				}
			} else {
				if x.Deployment == nil {
					x.Deployment = new(Deployment)
				}
				x.Deployment.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SingleDeploymentResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Deployment != nil {
			x.Deployment = nil
		}
	} else {
		if x.Deployment == nil {
			x.Deployment = new(Deployment)
		}
		x.Deployment.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *GenericResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *GenericResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *GenericResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv4 := &x.Index
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *GenericResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv7 := &x.Index
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *VersionResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Build))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Build"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Build))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Versions == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringIntV(x.Versions, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Versions"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Versions == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringIntV(x.Versions, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *VersionResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *VersionResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Build":
			if r.TryDecodeAsNil() {
				x.Build = ""
			} else {
				yyv4 := &x.Build
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv6 := &x.Versions
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringIntX(yyv6, false, d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv8 := &x.Index
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv10 := &x.LastContact
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv12 := &x.KnownLeader
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *VersionResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Build = ""
	} else {
		yyv15 := &x.Build
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv17 := &x.Versions
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecMapStringIntX(yyv17, false, d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv19 := &x.Index
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv21 := &x.LastContact
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv21) {
		} else {
			*((*int64)(yyv21)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv23 := &x.KnownLeader
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobRegisterResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Warnings))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Warnings"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Warnings))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobRegisterResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobRegisterResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv6 := &x.EvalCreateIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv8 := &x.JobModifyIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "Warnings":
			if r.TryDecodeAsNil() {
				x.Warnings = ""
			} else {
				yyv10 := &x.Warnings
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv12 := &x.Index
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv14 := &x.LastContact
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv16 := &x.KnownLeader
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobRegisterResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv19 := &x.EvalID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv21 := &x.EvalCreateIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv23 := &x.JobModifyIndex
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Warnings = ""
	} else {
		yyv25 := &x.Warnings
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv27 := &x.Index
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv29 := &x.LastContact
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv29) {
		} else {
			*((*int64)(yyv29)) = int64(r.DecodeInt(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv31 := &x.KnownLeader
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*bool)(yyv31)) = r.DecodeBool()
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobDeregisterResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobDeregisterResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobDeregisterResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv6 := &x.EvalCreateIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv8 := &x.JobModifyIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv10 := &x.Index
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv12 := &x.LastContact
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv14 := &x.KnownLeader
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobDeregisterResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv17 := &x.EvalID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv19 := &x.EvalCreateIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv21 := &x.JobModifyIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv23 := &x.Index
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv25 := &x.LastContact
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv25) {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv27 := &x.KnownLeader
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobBatchDeregisterResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.JobEvals == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapNamespacedIDstring((map[NamespacedID]string)(x.JobEvals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobEvals"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.JobEvals == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapNamespacedIDstring((map[NamespacedID]string)(x.JobEvals), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobBatchDeregisterResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobBatchDeregisterResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobEvals":
			if r.TryDecodeAsNil() {
				x.JobEvals = nil
			} else {
				yyv4 := &x.JobEvals
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapNamespacedIDstring((*map[NamespacedID]string)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobBatchDeregisterResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobEvals = nil
	} else {
		yyv13 := &x.JobEvals
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decMapNamespacedIDstring((*map[NamespacedID]string)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobValidateResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.DriverConfigValidated))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DriverConfigValidated"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.DriverConfigValidated))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ValidationErrors == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.ValidationErrors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ValidationErrors"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ValidationErrors == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.ValidationErrors, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Error))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Error"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Error))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Warnings))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Warnings"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Warnings))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobValidateResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobValidateResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DriverConfigValidated":
			if r.TryDecodeAsNil() {
				x.DriverConfigValidated = false
			} else {
				yyv4 := &x.DriverConfigValidated
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "ValidationErrors":
			if r.TryDecodeAsNil() {
				x.ValidationErrors = nil
			} else {
				yyv6 := &x.ValidationErrors
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "Error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				yyv8 := &x.Error
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Warnings":
			if r.TryDecodeAsNil() {
				x.Warnings = ""
			} else {
				yyv10 := &x.Warnings
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobValidateResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DriverConfigValidated = false
	} else {
		yyv13 := &x.DriverConfigValidated
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*bool)(yyv13)) = r.DecodeBool()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ValidationErrors = nil
	} else {
		yyv15 := &x.ValidationErrors
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		yyv17 := &x.Error
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Warnings = ""
	} else {
		yyv19 := &x.Warnings
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeUpdateResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.HeartbeatTTL) {
				} else {
					r.EncodeInt(int64(x.HeartbeatTTL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HeartbeatTTL"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.HeartbeatTTL) {
				} else {
					r.EncodeInt(int64(x.HeartbeatTTL))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.LeaderRPCAddr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LeaderRPCAddr"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.LeaderRPCAddr))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.NumNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NumNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.NumNodes))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Servers == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						h.encSlicePtrtoNodeServerInfo(([]*NodeServerInfo)(x.Servers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Servers"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Servers == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						h.encSlicePtrtoNodeServerInfo(([]*NodeServerInfo)(x.Servers), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeUpdateResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeUpdateResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "HeartbeatTTL":
			if r.TryDecodeAsNil() {
				x.HeartbeatTTL = 0
			} else {
				yyv4 := &x.HeartbeatTTL
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "EvalIDs":
			if r.TryDecodeAsNil() {
				x.EvalIDs = nil
			} else {
				yyv6 := &x.EvalIDs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv8 := &x.EvalCreateIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "NodeModifyIndex":
			if r.TryDecodeAsNil() {
				x.NodeModifyIndex = 0
			} else {
				yyv10 := &x.NodeModifyIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "LeaderRPCAddr":
			if r.TryDecodeAsNil() {
				x.LeaderRPCAddr = ""
			} else {
				yyv12 := &x.LeaderRPCAddr
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "NumNodes":
			if r.TryDecodeAsNil() {
				x.NumNodes = 0
			} else {
				yyv14 := &x.NumNodes
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int32)(yyv14)) = int32(r.DecodeInt(32))
				}
			}
		case "Servers":
			if r.TryDecodeAsNil() {
				x.Servers = nil
			} else {
				yyv16 := &x.Servers
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					h.decSlicePtrtoNodeServerInfo((*[]*NodeServerInfo)(yyv16), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv18 := &x.Index
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*uint64)(yyv18)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv20 := &x.LastContact
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv20) {
				} else {
					*((*int64)(yyv20)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv22 := &x.KnownLeader
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeUpdateResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HeartbeatTTL = 0
	} else {
		yyv25 := &x.HeartbeatTTL
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv25) {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalIDs = nil
	} else {
		yyv27 := &x.EvalIDs
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			z.F.DecSliceStringX(yyv27, false, d)
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv29 := &x.EvalCreateIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeModifyIndex = 0
	} else {
		yyv31 := &x.NodeModifyIndex
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*uint64)(yyv31)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LeaderRPCAddr = ""
	} else {
		yyv33 := &x.LeaderRPCAddr
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NumNodes = 0
	} else {
		yyv35 := &x.NumNodes
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*int32)(yyv35)) = int32(r.DecodeInt(32))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Servers = nil
	} else {
		yyv37 := &x.Servers
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			h.decSlicePtrtoNodeServerInfo((*[]*NodeServerInfo)(yyv37), d)
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv39 := &x.Index
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*uint64)(yyv39)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv41 := &x.LastContact
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv41) {
		} else {
			*((*int64)(yyv41)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv43 := &x.KnownLeader
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeDrainUpdateResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeDrainUpdateResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeDrainUpdateResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeModifyIndex":
			if r.TryDecodeAsNil() {
				x.NodeModifyIndex = 0
			} else {
				yyv4 := &x.NodeModifyIndex
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "EvalIDs":
			if r.TryDecodeAsNil() {
				x.EvalIDs = nil
			} else {
				yyv6 := &x.EvalIDs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv8 := &x.EvalCreateIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv10 := &x.Index
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeDrainUpdateResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeModifyIndex = 0
	} else {
		yyv13 := &x.NodeModifyIndex
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalIDs = nil
	} else {
		yyv15 := &x.EvalIDs
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv17 := &x.EvalCreateIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv19 := &x.Index
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeEligibilityUpdateResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeEligibilityUpdateResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeEligibilityUpdateResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeModifyIndex":
			if r.TryDecodeAsNil() {
				x.NodeModifyIndex = 0
			} else {
				yyv4 := &x.NodeModifyIndex
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "EvalIDs":
			if r.TryDecodeAsNil() {
				x.EvalIDs = nil
			} else {
				yyv6 := &x.EvalIDs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv8 := &x.EvalCreateIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv10 := &x.Index
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeEligibilityUpdateResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeModifyIndex = 0
	} else {
		yyv13 := &x.NodeModifyIndex
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalIDs = nil
	} else {
		yyv15 := &x.EvalIDs
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv17 := &x.EvalCreateIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv19 := &x.Index
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeAllocsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Allocs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Allocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Allocs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeAllocsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeAllocsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Allocs":
			if r.TryDecodeAsNil() {
				x.Allocs = nil
			} else {
				yyv4 := &x.Allocs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeAllocsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Allocs = nil
	} else {
		yyv13 := &x.Allocs
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeClientAllocsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncMapStringUint64V(x.Allocs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Allocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncMapStringUint64V(x.Allocs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.MigrateTokens == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringStringV(x.MigrateTokens, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MigrateTokens"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.MigrateTokens == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringStringV(x.MigrateTokens, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeClientAllocsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeClientAllocsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Allocs":
			if r.TryDecodeAsNil() {
				x.Allocs = nil
			} else {
				yyv4 := &x.Allocs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringUint64X(yyv4, false, d)
				}
			}
		case "MigrateTokens":
			if r.TryDecodeAsNil() {
				x.MigrateTokens = nil
			} else {
				yyv6 := &x.MigrateTokens
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringStringX(yyv6, false, d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv8 := &x.Index
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv10 := &x.LastContact
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv12 := &x.KnownLeader
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeClientAllocsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Allocs = nil
	} else {
		yyv15 := &x.Allocs
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecMapStringUint64X(yyv15, false, d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MigrateTokens = nil
	} else {
		yyv17 := &x.MigrateTokens
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecMapStringStringX(yyv17, false, d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv19 := &x.Index
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv21 := &x.LastContact
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv21) {
		} else {
			*((*int64)(yyv21)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv23 := &x.KnownLeader
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SingleNodeResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					x.Node.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Node"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					x.Node.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SingleNodeResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SingleNodeResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Node":
			if r.TryDecodeAsNil() {
				if x.Node != nil {
					x.Node = nil
				}
			} else {
				if x.Node == nil {
					x.Node = new(Node)
				}
				x.Node.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SingleNodeResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Node != nil {
			x.Node = nil
		}
	} else {
		if x.Node == nil {
			x.Node = new(Node)
		}
		x.Node.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoNodeListStub(([]*NodeListStub)(x.Nodes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Nodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoNodeListStub(([]*NodeListStub)(x.Nodes), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Nodes":
			if r.TryDecodeAsNil() {
				x.Nodes = nil
			} else {
				yyv4 := &x.Nodes
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoNodeListStub((*[]*NodeListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Nodes = nil
	} else {
		yyv13 := &x.Nodes
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoNodeListStub((*[]*NodeListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SingleJobResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SingleJobResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SingleJobResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SingleJobResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobSummaryResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.JobSummary == nil {
					r.EncodeNil()
				} else {
					x.JobSummary.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobSummary"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.JobSummary == nil {
					r.EncodeNil()
				} else {
					x.JobSummary.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobSummaryResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobSummaryResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobSummary":
			if r.TryDecodeAsNil() {
				if x.JobSummary != nil {
					x.JobSummary = nil
				}
			} else {
				if x.JobSummary == nil {
					x.JobSummary = new(JobSummary)
				}
				x.JobSummary.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobSummaryResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.JobSummary != nil {
			x.JobSummary = nil
		}
	} else {
		if x.JobSummary == nil {
			x.JobSummary = new(JobSummary)
		}
		x.JobSummary.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobDispatchResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DispatchedJobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DispatchedJobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DispatchedJobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.JobCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.JobCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobDispatchResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobDispatchResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DispatchedJobID":
			if r.TryDecodeAsNil() {
				x.DispatchedJobID = ""
			} else {
				yyv4 := &x.DispatchedJobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv6 := &x.EvalID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv8 := &x.EvalCreateIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobCreateIndex":
			if r.TryDecodeAsNil() {
				x.JobCreateIndex = 0
			} else {
				yyv10 := &x.JobCreateIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv12 := &x.Index
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobDispatchResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DispatchedJobID = ""
	} else {
		yyv15 := &x.DispatchedJobID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv17 := &x.EvalID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv19 := &x.EvalCreateIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobCreateIndex = 0
	} else {
		yyv21 := &x.JobCreateIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv23 := &x.Index
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Jobs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoJobListStub(([]*JobListStub)(x.Jobs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Jobs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Jobs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoJobListStub(([]*JobListStub)(x.Jobs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Jobs":
			if r.TryDecodeAsNil() {
				x.Jobs = nil
			} else {
				yyv4 := &x.Jobs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoJobListStub((*[]*JobListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Jobs = nil
	} else {
		yyv13 := &x.Jobs
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoJobListStub((*[]*JobListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobVersionsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Diffs))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Diffs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Diffs))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobVersionsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobVersionsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Diffs":
			if r.TryDecodeAsNil() {
				x.Diffs = false
			} else {
				yyv6 := &x.Diffs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv12 := &x.MinQueryIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv14 := &x.MaxQueryTime
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv16 := &x.AllowStale
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv18 := &x.Prefix
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv20 := &x.AuthToken
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv22 := &x.Forwarded
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobVersionsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv25 := &x.JobID
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Diffs = false
	} else {
		yyv27 := &x.Diffs
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv29 := &x.Region
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv31 := &x.Namespace
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv33 := &x.MinQueryIndex
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv35 := &x.MaxQueryTime
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv35) {
		} else {
			*((*int64)(yyv35)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv37 := &x.AllowStale
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv39 := &x.Prefix
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv41 := &x.AuthToken
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv43 := &x.Forwarded
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobVersionsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Versions == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoJob(([]*Job)(x.Versions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Versions"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Versions == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoJob(([]*Job)(x.Versions), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Diffs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSlicePtrtoJobDiff(([]*JobDiff)(x.Diffs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Diffs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Diffs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSlicePtrtoJobDiff(([]*JobDiff)(x.Diffs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobVersionsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobVersionsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv4 := &x.Versions
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoJob((*[]*Job)(yyv4), d)
				}
			}
		case "Diffs":
			if r.TryDecodeAsNil() {
				x.Diffs = nil
			} else {
				yyv6 := &x.Diffs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSlicePtrtoJobDiff((*[]*JobDiff)(yyv6), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv8 := &x.Index
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv10 := &x.LastContact
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv12 := &x.KnownLeader
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobVersionsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv15 := &x.Versions
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decSlicePtrtoJob((*[]*Job)(yyv15), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Diffs = nil
	} else {
		yyv17 := &x.Diffs
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			h.decSlicePtrtoJobDiff((*[]*JobDiff)(yyv17), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv19 := &x.Index
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv21 := &x.LastContact
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv21) {
		} else {
			*((*int64)(yyv21)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv23 := &x.KnownLeader
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobPlanResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					x.Annotations.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Annotations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					x.Annotations.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.FailedTGAllocs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encMapstringPtrtoAllocMetric((map[string]*AllocMetric)(x.FailedTGAllocs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("FailedTGAllocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.FailedTGAllocs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encMapstringPtrtoAllocMetric((map[string]*AllocMetric)(x.FailedTGAllocs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.CreatedEvals == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.CreatedEvals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreatedEvals"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.CreatedEvals == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.CreatedEvals), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Diff == nil {
					r.EncodeNil()
				} else {
					x.Diff.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Diff"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Diff == nil {
					r.EncodeNil()
				} else {
					x.Diff.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy19 := &x.NextPeriodicLaunch
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if yym21 := z.TimeRtidIfBinc(); yym21 != 0 {
					r.EncodeBuiltin(yym21, yy19)
				} else if z.HasExtensions() && z.EncExt(yy19) {
				} else if yym20 {
					z.EncBinaryMarshal(yy19)
				} else if !yym20 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy19)
				} else {
					z.EncFallback(yy19)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NextPeriodicLaunch"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy22 := &x.NextPeriodicLaunch
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else if yym24 := z.TimeRtidIfBinc(); yym24 != 0 {
					r.EncodeBuiltin(yym24, yy22)
				} else if z.HasExtensions() && z.EncExt(yy22) {
				} else if yym23 {
					z.EncBinaryMarshal(yy22)
				} else if !yym23 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy22)
				} else {
					z.EncFallback(yy22)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Warnings))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Warnings"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym27 := z.EncBinary()
				_ = yym27
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Warnings))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym30 := z.EncBinary()
				_ = yym30
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobPlanResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobPlanResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Annotations":
			if r.TryDecodeAsNil() {
				if x.Annotations != nil {
					x.Annotations = nil
				}
			} else {
				if x.Annotations == nil {
					x.Annotations = new(PlanAnnotations)
				}
				x.Annotations.CodecDecodeSelf(d)
			}
		case "FailedTGAllocs":
			if r.TryDecodeAsNil() {
				x.FailedTGAllocs = nil
			} else {
				yyv5 := &x.FailedTGAllocs
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					h.decMapstringPtrtoAllocMetric((*map[string]*AllocMetric)(yyv5), d)
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv7 := &x.JobModifyIndex
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
				}
			}
		case "CreatedEvals":
			if r.TryDecodeAsNil() {
				x.CreatedEvals = nil
			} else {
				yyv9 := &x.CreatedEvals
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv9), d)
				}
			}
		case "Diff":
			if r.TryDecodeAsNil() {
				if x.Diff != nil {
					x.Diff = nil
				}
			} else {
				if x.Diff == nil {
					x.Diff = new(JobDiff)
				}
				x.Diff.CodecDecodeSelf(d)
			}
		case "NextPeriodicLaunch":
			if r.TryDecodeAsNil() {
				x.NextPeriodicLaunch = time.Time{}
			} else {
				yyv12 := &x.NextPeriodicLaunch
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if yym14 := z.TimeRtidIfBinc(); yym14 != 0 {
					r.DecodeBuiltin(yym14, yyv12)
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else if yym13 {
					z.DecBinaryUnmarshal(yyv12)
				} else if !yym13 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv12)
				} else {
					z.DecFallback(yyv12, false)
				}
			}
		case "Warnings":
			if r.TryDecodeAsNil() {
				x.Warnings = ""
			} else {
				yyv15 := &x.Warnings
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*string)(yyv15)) = r.DecodeString()
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv17 := &x.Index
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobPlanResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj19 int
	var yyb19 bool
	var yyhl19 bool = l >= 0
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Annotations != nil {
			x.Annotations = nil
		}
	} else {
		if x.Annotations == nil {
			x.Annotations = new(PlanAnnotations)
		}
		x.Annotations.CodecDecodeSelf(d)
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.FailedTGAllocs = nil
	} else {
		yyv21 := &x.FailedTGAllocs
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			h.decMapstringPtrtoAllocMetric((*map[string]*AllocMetric)(yyv21), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv23 := &x.JobModifyIndex
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreatedEvals = nil
	} else {
		yyv25 := &x.CreatedEvals
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv25), d)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Diff != nil {
			x.Diff = nil
		}
	} else {
		if x.Diff == nil {
			x.Diff = new(JobDiff)
		}
		x.Diff.CodecDecodeSelf(d)
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NextPeriodicLaunch = time.Time{}
	} else {
		yyv28 := &x.NextPeriodicLaunch
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else if yym30 := z.TimeRtidIfBinc(); yym30 != 0 {
			r.DecodeBuiltin(yym30, yyv28)
		} else if z.HasExtensions() && z.DecExt(yyv28) {
		} else if yym29 {
			z.DecBinaryUnmarshal(yyv28)
		} else if !yym29 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv28)
		} else {
			z.DecFallback(yyv28, false)
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Warnings = ""
	} else {
		yyv31 := &x.Warnings
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj19++
	if yyhl19 {
		yyb19 = yyj19 > l
	} else {
		yyb19 = r.CheckBreak()
	}
	if yyb19 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv33 := &x.Index
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj19++
		if yyhl19 {
			yyb19 = yyj19 > l
		} else {
			yyb19 = r.CheckBreak()
		}
		if yyb19 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj19-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SingleAllocResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					x.Alloc.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Alloc"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					x.Alloc.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SingleAllocResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SingleAllocResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Alloc":
			if r.TryDecodeAsNil() {
				if x.Alloc != nil {
					x.Alloc = nil
				}
			} else {
				if x.Alloc == nil {
					x.Alloc = new(Allocation)
				}
				x.Alloc.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SingleAllocResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Alloc != nil {
			x.Alloc = nil
		}
	} else {
		if x.Alloc == nil {
			x.Alloc = new(Allocation)
		}
		x.Alloc.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocsGetResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Allocs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Allocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Allocs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocsGetResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocsGetResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Allocs":
			if r.TryDecodeAsNil() {
				x.Allocs = nil
			} else {
				yyv4 := &x.Allocs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocsGetResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Allocs = nil
	} else {
		yyv13 := &x.Allocs
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobAllocationsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Allocations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobAllocationsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobAllocationsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Allocations":
			if r.TryDecodeAsNil() {
				x.Allocations = nil
			} else {
				yyv4 := &x.Allocations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobAllocationsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Allocations = nil
	} else {
		yyv13 := &x.Allocations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobEvaluationsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Evaluations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evaluations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Evaluations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Evaluations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evaluations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobEvaluationsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobEvaluationsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Evaluations":
			if r.TryDecodeAsNil() {
				x.Evaluations = nil
			} else {
				yyv4 := &x.Evaluations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobEvaluationsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Evaluations = nil
	} else {
		yyv13 := &x.Evaluations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SingleEvalResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Eval"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SingleEvalResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SingleEvalResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Eval":
			if r.TryDecodeAsNil() {
				if x.Eval != nil {
					x.Eval = nil
				}
			} else {
				if x.Eval == nil {
					x.Eval = new(Evaluation)
				}
				x.Eval.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SingleEvalResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Eval != nil {
			x.Eval = nil
		}
	} else {
		if x.Eval == nil {
			x.Eval = new(Evaluation)
		}
		x.Eval.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalDequeueResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Eval"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Token))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Token"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Token))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.WaitIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("WaitIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.WaitIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalDequeueResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalDequeueResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Eval":
			if r.TryDecodeAsNil() {
				if x.Eval != nil {
					x.Eval = nil
				}
			} else {
				if x.Eval == nil {
					x.Eval = new(Evaluation)
				}
				x.Eval.CodecDecodeSelf(d)
			}
		case "Token":
			if r.TryDecodeAsNil() {
				x.Token = ""
			} else {
				yyv5 := &x.Token
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		case "WaitIndex":
			if r.TryDecodeAsNil() {
				x.WaitIndex = 0
			} else {
				yyv7 := &x.WaitIndex
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv9 := &x.Index
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv11 := &x.LastContact
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv11) {
				} else {
					*((*int64)(yyv11)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv13 := &x.KnownLeader
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*bool)(yyv13)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalDequeueResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Eval != nil {
			x.Eval = nil
		}
	} else {
		if x.Eval == nil {
			x.Eval = new(Evaluation)
		}
		x.Eval.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Token = ""
	} else {
		yyv17 := &x.Token
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.WaitIndex = 0
	} else {
		yyv19 := &x.WaitIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv21 := &x.Index
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv23 := &x.LastContact
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv23) {
		} else {
			*((*int64)(yyv23)) = int64(r.DecodeInt(64))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv25 := &x.KnownLeader
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *PlanResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Result == nil {
					r.EncodeNil()
				} else {
					x.Result.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Result"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Result == nil {
					r.EncodeNil()
				} else {
					x.Result.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *PlanResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *PlanResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Result":
			if r.TryDecodeAsNil() {
				if x.Result != nil {
					x.Result = nil
				}
			} else {
				if x.Result == nil {
					x.Result = new(PlanResult)
				}
				x.Result.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *PlanResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Result != nil {
			x.Result = nil
		}
	} else {
		if x.Result == nil {
			x.Result = new(PlanResult)
		}
		x.Result.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv9 := &x.Index
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Allocations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Allocations":
			if r.TryDecodeAsNil() {
				x.Allocations = nil
			} else {
				yyv4 := &x.Allocations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Allocations = nil
	} else {
		yyv13 := &x.Allocations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Deployments == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoDeployment(([]*Deployment)(x.Deployments), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Deployments"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Deployments == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoDeployment(([]*Deployment)(x.Deployments), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Deployments":
			if r.TryDecodeAsNil() {
				x.Deployments = nil
			} else {
				yyv4 := &x.Deployments
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoDeployment((*[]*Deployment)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Deployments = nil
	} else {
		yyv13 := &x.Deployments
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoDeployment((*[]*Deployment)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Evaluations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evaluations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Evaluations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Evaluations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evaluations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Evaluations":
			if r.TryDecodeAsNil() {
				x.Evaluations = nil
			} else {
				yyv4 := &x.Evaluations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Evaluations = nil
	} else {
		yyv13 := &x.Evaluations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EvalAllocationsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Allocations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EvalAllocationsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EvalAllocationsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Allocations":
			if r.TryDecodeAsNil() {
				x.Allocations = nil
			} else {
				yyv4 := &x.Allocations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EvalAllocationsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Allocations = nil
	} else {
		yyv13 := &x.Allocations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *PeriodicForceResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *PeriodicForceResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *PeriodicForceResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv6 := &x.EvalCreateIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv8 := &x.Index
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *PeriodicForceResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv11 := &x.EvalID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv13 := &x.EvalCreateIndex
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentUpdateResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.DeploymentModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.DeploymentModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.RevertedJobVersion == nil {
					r.EncodeNil()
				} else {
					yy13 := *x.RevertedJobVersion
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeUint(uint64(yy13))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RevertedJobVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.RevertedJobVersion == nil {
					r.EncodeNil()
				} else {
					yy15 := *x.RevertedJobVersion
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeUint(uint64(yy15))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym18 := z.EncBinary()
				_ = yym18
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentUpdateResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentUpdateResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv6 := &x.EvalCreateIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "DeploymentModifyIndex":
			if r.TryDecodeAsNil() {
				x.DeploymentModifyIndex = 0
			} else {
				yyv8 := &x.DeploymentModifyIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "RevertedJobVersion":
			if r.TryDecodeAsNil() {
				if x.RevertedJobVersion != nil {
					x.RevertedJobVersion = nil
				}
			} else {
				if x.RevertedJobVersion == nil {
					x.RevertedJobVersion = new(uint64)
				}
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(x.RevertedJobVersion)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv12 := &x.Index
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentUpdateResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv15 := &x.EvalID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv17 := &x.EvalCreateIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentModifyIndex = 0
	} else {
		yyv19 := &x.DeploymentModifyIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.RevertedJobVersion != nil {
			x.RevertedJobVersion = nil
		}
	} else {
		if x.RevertedJobVersion == nil {
			x.RevertedJobVersion = new(uint64)
		}
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(x.RevertedJobVersion)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv23 := &x.Index
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeConnQueryResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Connected))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Connected"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Connected))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy7 := &x.Established
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if yym9 := z.TimeRtidIfBinc(); yym9 != 0 {
					r.EncodeBuiltin(yym9, yy7)
				} else if z.HasExtensions() && z.EncExt(yy7) {
				} else if yym8 {
					z.EncBinaryMarshal(yy7)
				} else if !yym8 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy7)
				} else {
					z.EncFallback(yy7)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Established"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy10 := &x.Established
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
					r.EncodeBuiltin(yym12, yy10)
				} else if z.HasExtensions() && z.EncExt(yy10) {
				} else if yym11 {
					z.EncBinaryMarshal(yy10)
				} else if !yym11 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy10)
				} else {
					z.EncFallback(yy10)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym18 := z.EncBinary()
				_ = yym18
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym21 := z.EncBinary()
				_ = yym21
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeConnQueryResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeConnQueryResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Connected":
			if r.TryDecodeAsNil() {
				x.Connected = false
			} else {
				yyv4 := &x.Connected
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "Established":
			if r.TryDecodeAsNil() {
				x.Established = time.Time{}
			} else {
				yyv6 := &x.Established
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if yym8 := z.TimeRtidIfBinc(); yym8 != 0 {
					r.DecodeBuiltin(yym8, yyv6)
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else if yym7 {
					z.DecBinaryUnmarshal(yyv6)
				} else if !yym7 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv6)
				} else {
					z.DecFallback(yyv6, false)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv9 := &x.Index
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv11 := &x.LastContact
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv11) {
				} else {
					*((*int64)(yyv11)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv13 := &x.KnownLeader
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*bool)(yyv13)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeConnQueryResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Connected = false
	} else {
		yyv16 := &x.Connected
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			*((*bool)(yyv16)) = r.DecodeBool()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Established = time.Time{}
	} else {
		yyv18 := &x.Established
		yym19 := z.DecBinary()
		_ = yym19
		if false {
		} else if yym20 := z.TimeRtidIfBinc(); yym20 != 0 {
			r.DecodeBuiltin(yym20, yyv18)
		} else if z.HasExtensions() && z.DecExt(yyv18) {
		} else if yym19 {
			z.DecBinaryUnmarshal(yyv18)
		} else if !yym19 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv18)
		} else {
			z.DecFallback(yyv18, false)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv21 := &x.Index
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv23 := &x.LastContact
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv23) {
		} else {
			*((*int64)(yyv23)) = int64(r.DecodeInt(64))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv25 := &x.KnownLeader
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EmitNodeEventsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeEvents == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringSlicePtrtoNodeEvent((map[string][]*NodeEvent)(x.NodeEvents), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeEvents"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeEvents == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringSlicePtrtoNodeEvent((map[string][]*NodeEvent)(x.NodeEvents), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EmitNodeEventsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EmitNodeEventsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeEvents":
			if r.TryDecodeAsNil() {
				x.NodeEvents = nil
			} else {
				yyv4 := &x.NodeEvents
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringSlicePtrtoNodeEvent((*map[string][]*NodeEvent)(yyv4), d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EmitNodeEventsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeEvents = nil
	} else {
		yyv15 := &x.NodeEvents
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decMapstringSlicePtrtoNodeEvent((*map[string][]*NodeEvent)(yyv15), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EmitNodeEventsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EmitNodeEventsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EmitNodeEventsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv4 := &x.Index
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EmitNodeEventsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv7 := &x.Index
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeEvent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Message"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Message))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Subsystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Subsystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Subsystem))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Details == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncMapStringStringV(x.Details, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Details"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Details == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncMapStringStringV(x.Details, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy13 := &x.Timestamp
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if yym15 := z.TimeRtidIfBinc(); yym15 != 0 {
					r.EncodeBuiltin(yym15, yy13)
				} else if z.HasExtensions() && z.EncExt(yy13) {
				} else if yym14 {
					z.EncBinaryMarshal(yy13)
				} else if !yym14 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy13)
				} else {
					z.EncFallback(yy13)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Timestamp"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy16 := &x.Timestamp
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
					r.EncodeBuiltin(yym18, yy16)
				} else if z.HasExtensions() && z.EncExt(yy16) {
				} else if yym17 {
					z.EncBinaryMarshal(yy16)
				} else if !yym17 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy16)
				} else {
					z.EncFallback(yy16)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym21 := z.EncBinary()
				_ = yym21
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeEvent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeEvent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				yyv4 := &x.Message
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Subsystem":
			if r.TryDecodeAsNil() {
				x.Subsystem = ""
			} else {
				yyv6 := &x.Subsystem
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Details":
			if r.TryDecodeAsNil() {
				x.Details = nil
			} else {
				yyv8 := &x.Details
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecMapStringStringX(yyv8, false, d)
				}
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				yyv10 := &x.Timestamp
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
					r.DecodeBuiltin(yym12, yyv10)
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else if yym11 {
					z.DecBinaryUnmarshal(yyv10)
				} else if !yym11 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv10)
				} else {
					z.DecFallback(yyv10, false)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv13 := &x.CreateIndex
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeEvent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		yyv16 := &x.Message
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			*((*string)(yyv16)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Subsystem = ""
	} else {
		yyv18 := &x.Subsystem
		yym19 := z.DecBinary()
		_ = yym19
		if false {
		} else {
			*((*string)(yyv18)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Details = nil
	} else {
		yyv20 := &x.Details
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			z.F.DecMapStringStringX(yyv20, false, d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		yyv22 := &x.Timestamp
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else if yym24 := z.TimeRtidIfBinc(); yym24 != 0 {
			r.DecodeBuiltin(yym24, yyv22)
		} else if z.HasExtensions() && z.DecExt(yyv22) {
		} else if yym23 {
			z.DecBinaryUnmarshal(yyv22)
		} else if !yym23 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv22)
		} else {
			z.DecFallback(yyv22, false)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv25 := &x.CreateIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DrainSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Deadline) {
				} else {
					r.EncodeInt(int64(x.Deadline))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Deadline"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Deadline) {
				} else {
					r.EncodeInt(int64(x.Deadline))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.IgnoreSystemJobs))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("IgnoreSystemJobs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.IgnoreSystemJobs))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DrainSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DrainSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Deadline":
			if r.TryDecodeAsNil() {
				x.Deadline = 0
			} else {
				yyv4 := &x.Deadline
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "IgnoreSystemJobs":
			if r.TryDecodeAsNil() {
				x.IgnoreSystemJobs = false
			} else {
				yyv6 := &x.IgnoreSystemJobs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DrainSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Deadline = 0
	} else {
		yyv9 := &x.Deadline
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv9) {
		} else {
			*((*int64)(yyv9)) = int64(r.DecodeInt(64))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.IgnoreSystemJobs = false
	} else {
		yyv11 := &x.IgnoreSystemJobs
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*bool)(yyv11)) = r.DecodeBool()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DrainStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Deadline) {
				} else {
					r.EncodeInt(int64(x.Deadline))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Deadline"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Deadline) {
				} else {
					r.EncodeInt(int64(x.Deadline))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.IgnoreSystemJobs))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("IgnoreSystemJobs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.IgnoreSystemJobs))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy10 := &x.ForceDeadline
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
					r.EncodeBuiltin(yym12, yy10)
				} else if z.HasExtensions() && z.EncExt(yy10) {
				} else if yym11 {
					z.EncBinaryMarshal(yy10)
				} else if !yym11 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy10)
				} else {
					z.EncFallback(yy10)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ForceDeadline"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy13 := &x.ForceDeadline
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if yym15 := z.TimeRtidIfBinc(); yym15 != 0 {
					r.EncodeBuiltin(yym15, yy13)
				} else if z.HasExtensions() && z.EncExt(yy13) {
				} else if yym14 {
					z.EncBinaryMarshal(yy13)
				} else if !yym14 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy13)
				} else {
					z.EncFallback(yy13)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DrainStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DrainStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Deadline":
			if r.TryDecodeAsNil() {
				x.Deadline = 0
			} else {
				yyv4 := &x.Deadline
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "IgnoreSystemJobs":
			if r.TryDecodeAsNil() {
				x.IgnoreSystemJobs = false
			} else {
				yyv6 := &x.IgnoreSystemJobs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "ForceDeadline":
			if r.TryDecodeAsNil() {
				x.ForceDeadline = time.Time{}
			} else {
				yyv8 := &x.ForceDeadline
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if yym10 := z.TimeRtidIfBinc(); yym10 != 0 {
					r.DecodeBuiltin(yym10, yyv8)
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else if yym9 {
					z.DecBinaryUnmarshal(yyv8)
				} else if !yym9 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv8)
				} else {
					z.DecFallback(yyv8, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DrainStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Deadline = 0
	} else {
		yyv12 := &x.Deadline
		yym13 := z.DecBinary()
		_ = yym13
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv12) {
		} else {
			*((*int64)(yyv12)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.IgnoreSystemJobs = false
	} else {
		yyv14 := &x.IgnoreSystemJobs
		yym15 := z.DecBinary()
		_ = yym15
		if false {
		} else {
			*((*bool)(yyv14)) = r.DecodeBool()
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ForceDeadline = time.Time{}
	} else {
		yyv16 := &x.ForceDeadline
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
			r.DecodeBuiltin(yym18, yyv16)
		} else if z.HasExtensions() && z.DecExt(yyv16) {
		} else if yym17 {
			z.DecBinaryUnmarshal(yyv16)
		} else if !yym17 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv16)
		} else {
			z.DecFallback(yyv16, false)
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [25]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(25)
			} else {
				yynn2 = 25
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SecretID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Datacenter))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Datacenter"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Datacenter))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HTTPAddr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HTTPAddr"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HTTPAddr))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.TLSEnabled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TLSEnabled"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.TLSEnabled))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						z.F.EncMapStringStringV(x.Attributes, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Attributes"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						z.F.EncMapStringStringV(x.Attributes, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeResources == nil {
					r.EncodeNil()
				} else {
					x.NodeResources.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeResources"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeResources == nil {
					r.EncodeNil()
				} else {
					x.NodeResources.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ReservedResources == nil {
					r.EncodeNil()
				} else {
					x.ReservedResources.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ReservedResources"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ReservedResources == nil {
					r.EncodeNil()
				} else {
					x.ReservedResources.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Resources"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Reserved == nil {
					r.EncodeNil()
				} else {
					x.Reserved.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Reserved"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Reserved == nil {
					r.EncodeNil()
				} else {
					x.Reserved.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Links == nil {
					r.EncodeNil()
				} else {
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						z.F.EncMapStringStringV(x.Links, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Links"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Links == nil {
					r.EncodeNil()
				} else {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						z.F.EncMapStringStringV(x.Links, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeClass))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeClass"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeClass))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym46 := z.EncBinary()
				_ = yym46
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ComputedClass))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ComputedClass"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym47 := z.EncBinary()
				_ = yym47
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ComputedClass))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym49 := z.EncBinary()
				_ = yym49
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Drain"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym50 := z.EncBinary()
				_ = yym50
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DrainStrategy == nil {
					r.EncodeNil()
				} else {
					x.DrainStrategy.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DrainStrategy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DrainStrategy == nil {
					r.EncodeNil()
				} else {
					x.DrainStrategy.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym55 := z.EncBinary()
				_ = yym55
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SchedulingEligibility))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SchedulingEligibility"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym56 := z.EncBinary()
				_ = yym56
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SchedulingEligibility))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym59 := z.EncBinary()
				_ = yym59
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym61 := z.EncBinary()
				_ = yym61
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym62 := z.EncBinary()
				_ = yym62
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym64 := z.EncBinary()
				_ = yym64
				if false {
				} else {
					r.EncodeInt(int64(x.StatusUpdatedAt))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("StatusUpdatedAt"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym65 := z.EncBinary()
				_ = yym65
				if false {
				} else {
					r.EncodeInt(int64(x.StatusUpdatedAt))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Events == nil {
					r.EncodeNil()
				} else {
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						h.encSlicePtrtoNodeEvent(([]*NodeEvent)(x.Events), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Events"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Events == nil {
					r.EncodeNil()
				} else {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						h.encSlicePtrtoNodeEvent(([]*NodeEvent)(x.Events), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Drivers == nil {
					r.EncodeNil()
				} else {
					yym70 := z.EncBinary()
					_ = yym70
					if false {
					} else {
						h.encMapstringPtrtoDriverInfo((map[string]*DriverInfo)(x.Drivers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Drivers"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Drivers == nil {
					r.EncodeNil()
				} else {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						h.encMapstringPtrtoDriverInfo((map[string]*DriverInfo)(x.Drivers), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym73 := z.EncBinary()
				_ = yym73
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym74 := z.EncBinary()
				_ = yym74
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym76 := z.EncBinary()
				_ = yym76
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym77 := z.EncBinary()
				_ = yym77
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "SecretID":
			if r.TryDecodeAsNil() {
				x.SecretID = ""
			} else {
				yyv6 := &x.SecretID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Datacenter":
			if r.TryDecodeAsNil() {
				x.Datacenter = ""
			} else {
				yyv8 := &x.Datacenter
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv10 := &x.Name
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "HTTPAddr":
			if r.TryDecodeAsNil() {
				x.HTTPAddr = ""
			} else {
				yyv12 := &x.HTTPAddr
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "TLSEnabled":
			if r.TryDecodeAsNil() {
				x.TLSEnabled = false
			} else {
				yyv14 := &x.TLSEnabled
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Attributes":
			if r.TryDecodeAsNil() {
				x.Attributes = nil
			} else {
				yyv16 := &x.Attributes
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					z.F.DecMapStringStringX(yyv16, false, d)
				}
			}
		case "NodeResources":
			if r.TryDecodeAsNil() {
				if x.NodeResources != nil {
					x.NodeResources = nil
				}
			} else {
				if x.NodeResources == nil {
					x.NodeResources = new(NodeResources)
				}
				x.NodeResources.CodecDecodeSelf(d)
			}
		case "ReservedResources":
			if r.TryDecodeAsNil() {
				if x.ReservedResources != nil {
					x.ReservedResources = nil
				}
			} else {
				if x.ReservedResources == nil {
					x.ReservedResources = new(NodeReservedResources)
				}
				x.ReservedResources.CodecDecodeSelf(d)
			}
		case "Resources":
			if r.TryDecodeAsNil() {
				if x.Resources != nil {
					x.Resources = nil
				}
			} else {
				if x.Resources == nil {
					x.Resources = new(Resources)
				}
				x.Resources.CodecDecodeSelf(d)
			}
		case "Reserved":
			if r.TryDecodeAsNil() {
				if x.Reserved != nil {
					x.Reserved = nil
				}
			} else {
				if x.Reserved == nil {
					x.Reserved = new(Resources)
				}
				x.Reserved.CodecDecodeSelf(d)
			}
		case "Links":
			if r.TryDecodeAsNil() {
				x.Links = nil
			} else {
				yyv22 := &x.Links
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					z.F.DecMapStringStringX(yyv22, false, d)
				}
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv24 := &x.Meta
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		case "NodeClass":
			if r.TryDecodeAsNil() {
				x.NodeClass = ""
			} else {
				yyv26 := &x.NodeClass
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "ComputedClass":
			if r.TryDecodeAsNil() {
				x.ComputedClass = ""
			} else {
				yyv28 := &x.ComputedClass
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		case "Drain":
			if r.TryDecodeAsNil() {
				x.Drain = false
			} else {
				yyv30 := &x.Drain
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*bool)(yyv30)) = r.DecodeBool()
				}
			}
		case "DrainStrategy":
			if r.TryDecodeAsNil() {
				if x.DrainStrategy != nil {
					x.DrainStrategy = nil
				}
			} else {
				if x.DrainStrategy == nil {
					x.DrainStrategy = new(DrainStrategy)
				}
				x.DrainStrategy.CodecDecodeSelf(d)
			}
		case "SchedulingEligibility":
			if r.TryDecodeAsNil() {
				x.SchedulingEligibility = ""
			} else {
				yyv33 := &x.SchedulingEligibility
				yym34 := z.DecBinary()
				_ = yym34
				if false {
				} else {
					*((*string)(yyv33)) = r.DecodeString()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv35 := &x.Status
				yym36 := z.DecBinary()
				_ = yym36
				if false {
				} else {
					*((*string)(yyv35)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv37 := &x.StatusDescription
				yym38 := z.DecBinary()
				_ = yym38
				if false {
				} else {
					*((*string)(yyv37)) = r.DecodeString()
				}
			}
		case "StatusUpdatedAt":
			if r.TryDecodeAsNil() {
				x.StatusUpdatedAt = 0
			} else {
				yyv39 := &x.StatusUpdatedAt
				yym40 := z.DecBinary()
				_ = yym40
				if false {
				} else {
					*((*int64)(yyv39)) = int64(r.DecodeInt(64))
				}
			}
		case "Events":
			if r.TryDecodeAsNil() {
				x.Events = nil
			} else {
				yyv41 := &x.Events
				yym42 := z.DecBinary()
				_ = yym42
				if false {
				} else {
					h.decSlicePtrtoNodeEvent((*[]*NodeEvent)(yyv41), d)
				}
			}
		case "Drivers":
			if r.TryDecodeAsNil() {
				x.Drivers = nil
			} else {
				yyv43 := &x.Drivers
				yym44 := z.DecBinary()
				_ = yym44
				if false {
				} else {
					h.decMapstringPtrtoDriverInfo((*map[string]*DriverInfo)(yyv43), d)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv45 := &x.CreateIndex
				yym46 := z.DecBinary()
				_ = yym46
				if false {
				} else {
					*((*uint64)(yyv45)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv47 := &x.ModifyIndex
				yym48 := z.DecBinary()
				_ = yym48
				if false {
				} else {
					*((*uint64)(yyv47)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj49 int
	var yyb49 bool
	var yyhl49 bool = l >= 0
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv50 := &x.ID
		yym51 := z.DecBinary()
		_ = yym51
		if false {
		} else {
			*((*string)(yyv50)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SecretID = ""
	} else {
		yyv52 := &x.SecretID
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			*((*string)(yyv52)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Datacenter = ""
	} else {
		yyv54 := &x.Datacenter
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			*((*string)(yyv54)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv56 := &x.Name
		yym57 := z.DecBinary()
		_ = yym57
		if false {
		} else {
			*((*string)(yyv56)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HTTPAddr = ""
	} else {
		yyv58 := &x.HTTPAddr
		yym59 := z.DecBinary()
		_ = yym59
		if false {
		} else {
			*((*string)(yyv58)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TLSEnabled = false
	} else {
		yyv60 := &x.TLSEnabled
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else {
			*((*bool)(yyv60)) = r.DecodeBool()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Attributes = nil
	} else {
		yyv62 := &x.Attributes
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			z.F.DecMapStringStringX(yyv62, false, d)
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.NodeResources != nil {
			x.NodeResources = nil
		}
	} else {
		if x.NodeResources == nil {
			x.NodeResources = new(NodeResources)
		}
		x.NodeResources.CodecDecodeSelf(d)
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.ReservedResources != nil {
			x.ReservedResources = nil
		}
	} else {
		if x.ReservedResources == nil {
			x.ReservedResources = new(NodeReservedResources)
		}
		x.ReservedResources.CodecDecodeSelf(d)
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Resources != nil {
			x.Resources = nil
		}
	} else {
		if x.Resources == nil {
			x.Resources = new(Resources)
		}
		x.Resources.CodecDecodeSelf(d)
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Reserved != nil {
			x.Reserved = nil
		}
	} else {
		if x.Reserved == nil {
			x.Reserved = new(Resources)
		}
		x.Reserved.CodecDecodeSelf(d)
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Links = nil
	} else {
		yyv68 := &x.Links
		yym69 := z.DecBinary()
		_ = yym69
		if false {
		} else {
			z.F.DecMapStringStringX(yyv68, false, d)
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv70 := &x.Meta
		yym71 := z.DecBinary()
		_ = yym71
		if false {
		} else {
			z.F.DecMapStringStringX(yyv70, false, d)
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeClass = ""
	} else {
		yyv72 := &x.NodeClass
		yym73 := z.DecBinary()
		_ = yym73
		if false {
		} else {
			*((*string)(yyv72)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ComputedClass = ""
	} else {
		yyv74 := &x.ComputedClass
		yym75 := z.DecBinary()
		_ = yym75
		if false {
		} else {
			*((*string)(yyv74)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Drain = false
	} else {
		yyv76 := &x.Drain
		yym77 := z.DecBinary()
		_ = yym77
		if false {
		} else {
			*((*bool)(yyv76)) = r.DecodeBool()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.DrainStrategy != nil {
			x.DrainStrategy = nil
		}
	} else {
		if x.DrainStrategy == nil {
			x.DrainStrategy = new(DrainStrategy)
		}
		x.DrainStrategy.CodecDecodeSelf(d)
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SchedulingEligibility = ""
	} else {
		yyv79 := &x.SchedulingEligibility
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			*((*string)(yyv79)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv81 := &x.Status
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else {
			*((*string)(yyv81)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv83 := &x.StatusDescription
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else {
			*((*string)(yyv83)) = r.DecodeString()
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StatusUpdatedAt = 0
	} else {
		yyv85 := &x.StatusUpdatedAt
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(yyv85)) = int64(r.DecodeInt(64))
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Events = nil
	} else {
		yyv87 := &x.Events
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			h.decSlicePtrtoNodeEvent((*[]*NodeEvent)(yyv87), d)
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Drivers = nil
	} else {
		yyv89 := &x.Drivers
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			h.decMapstringPtrtoDriverInfo((*map[string]*DriverInfo)(yyv89), d)
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv91 := &x.CreateIndex
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			*((*uint64)(yyv91)) = uint64(r.DecodeUint(64))
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv93 := &x.ModifyIndex
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			*((*uint64)(yyv93)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj49++
		if yyhl49 {
			yyb49 = yyj49 > l
		} else {
			yyb49 = r.CheckBreak()
		}
		if yyb49 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj49-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeListStub) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [13]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(13)
			} else {
				yynn2 = 13
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Address"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Address))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Datacenter))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Datacenter"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Datacenter))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeClass))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeClass"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeClass))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Version))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Version"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Drain"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SchedulingEligibility))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SchedulingEligibility"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SchedulingEligibility))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Drivers == nil {
					r.EncodeNil()
				} else {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						h.encMapstringPtrtoDriverInfo((map[string]*DriverInfo)(x.Drivers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Drivers"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Drivers == nil {
					r.EncodeNil()
				} else {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						h.encMapstringPtrtoDriverInfo((map[string]*DriverInfo)(x.Drivers), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeListStub) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeListStub) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				yyv4 := &x.Address
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv6 := &x.ID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Datacenter":
			if r.TryDecodeAsNil() {
				x.Datacenter = ""
			} else {
				yyv8 := &x.Datacenter
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv10 := &x.Name
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "NodeClass":
			if r.TryDecodeAsNil() {
				x.NodeClass = ""
			} else {
				yyv12 := &x.NodeClass
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Version":
			if r.TryDecodeAsNil() {
				x.Version = ""
			} else {
				yyv14 := &x.Version
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Drain":
			if r.TryDecodeAsNil() {
				x.Drain = false
			} else {
				yyv16 := &x.Drain
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "SchedulingEligibility":
			if r.TryDecodeAsNil() {
				x.SchedulingEligibility = ""
			} else {
				yyv18 := &x.SchedulingEligibility
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv20 := &x.Status
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv22 := &x.StatusDescription
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "Drivers":
			if r.TryDecodeAsNil() {
				x.Drivers = nil
			} else {
				yyv24 := &x.Drivers
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decMapstringPtrtoDriverInfo((*map[string]*DriverInfo)(yyv24), d)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv26 := &x.CreateIndex
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*uint64)(yyv26)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv28 := &x.ModifyIndex
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*uint64)(yyv28)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeListStub) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		yyv31 := &x.Address
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv33 := &x.ID
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Datacenter = ""
	} else {
		yyv35 := &x.Datacenter
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv37 := &x.Name
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeClass = ""
	} else {
		yyv39 := &x.NodeClass
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Version = ""
	} else {
		yyv41 := &x.Version
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Drain = false
	} else {
		yyv43 := &x.Drain
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SchedulingEligibility = ""
	} else {
		yyv45 := &x.SchedulingEligibility
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*string)(yyv45)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv47 := &x.Status
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*string)(yyv47)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv49 := &x.StatusDescription
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*string)(yyv49)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Drivers = nil
	} else {
		yyv51 := &x.Drivers
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			h.decMapstringPtrtoDriverInfo((*map[string]*DriverInfo)(yyv51), d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv53 := &x.CreateIndex
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*uint64)(yyv53)) = uint64(r.DecodeUint(64))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv55 := &x.ModifyIndex
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*uint64)(yyv55)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Resources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.CPU))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CPU"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.CPU))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MemoryMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DiskMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.IOPS))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("IOPS"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.IOPS))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Networks == nil {
					r.EncodeNil()
				} else {
					x.Networks.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Networks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Networks == nil {
					r.EncodeNil()
				} else {
					x.Networks.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Devices == nil {
					r.EncodeNil()
				} else {
					x.Devices.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Devices"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Devices == nil {
					r.EncodeNil()
				} else {
					x.Devices.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Resources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Resources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "CPU":
			if r.TryDecodeAsNil() {
				x.CPU = 0
			} else {
				yyv4 := &x.CPU
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "MemoryMB":
			if r.TryDecodeAsNil() {
				x.MemoryMB = 0
			} else {
				yyv6 := &x.MemoryMB
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "DiskMB":
			if r.TryDecodeAsNil() {
				x.DiskMB = 0
			} else {
				yyv8 := &x.DiskMB
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "IOPS":
			if r.TryDecodeAsNil() {
				x.IOPS = 0
			} else {
				yyv10 := &x.IOPS
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Networks":
			if r.TryDecodeAsNil() {
				x.Networks = nil
			} else {
				yyv12 := &x.Networks
				yyv12.CodecDecodeSelf(d)
			}
		case "Devices":
			if r.TryDecodeAsNil() {
				x.Devices = nil
			} else {
				yyv13 := &x.Devices
				yyv13.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Resources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CPU = 0
	} else {
		yyv15 := &x.CPU
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*int)(yyv15)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MemoryMB = 0
	} else {
		yyv17 := &x.MemoryMB
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*int)(yyv17)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DiskMB = 0
	} else {
		yyv19 := &x.DiskMB
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*int)(yyv19)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.IOPS = 0
	} else {
		yyv21 := &x.IOPS
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*int)(yyv21)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Networks = nil
	} else {
		yyv23 := &x.Networks
		yyv23.CodecDecodeSelf(d)
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Devices = nil
	} else {
		yyv24 := &x.Devices
		yyv24.CodecDecodeSelf(d)
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x ResourceDevices) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceDevices((ResourceDevices)(x), e)
		}
	}
}

func (x *ResourceDevices) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceDevices((*ResourceDevices)(x), d)
	}
}

func (x *Port) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Label"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Value"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Value))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Port) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Port) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv4 := &x.Label
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				yyv6 := &x.Value
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Port) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv9 := &x.Label
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		yyv11 := &x.Value
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int)(yyv11)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NetworkResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Device))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Device"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Device))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.CIDR))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CIDR"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.CIDR))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.IP))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.MBits))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MBits"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.MBits))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ReservedPorts == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSlicePort(([]Port)(x.ReservedPorts), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ReservedPorts"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ReservedPorts == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSlicePort(([]Port)(x.ReservedPorts), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DynamicPorts == nil {
					r.EncodeNil()
				} else {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						h.encSlicePort(([]Port)(x.DynamicPorts), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DynamicPorts"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DynamicPorts == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						h.encSlicePort(([]Port)(x.DynamicPorts), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NetworkResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NetworkResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Device":
			if r.TryDecodeAsNil() {
				x.Device = ""
			} else {
				yyv4 := &x.Device
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "CIDR":
			if r.TryDecodeAsNil() {
				x.CIDR = ""
			} else {
				yyv6 := &x.CIDR
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				yyv8 := &x.IP
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MBits":
			if r.TryDecodeAsNil() {
				x.MBits = 0
			} else {
				yyv10 := &x.MBits
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "ReservedPorts":
			if r.TryDecodeAsNil() {
				x.ReservedPorts = nil
			} else {
				yyv12 := &x.ReservedPorts
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSlicePort((*[]Port)(yyv12), d)
				}
			}
		case "DynamicPorts":
			if r.TryDecodeAsNil() {
				x.DynamicPorts = nil
			} else {
				yyv14 := &x.DynamicPorts
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					h.decSlicePort((*[]Port)(yyv14), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NetworkResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Device = ""
	} else {
		yyv17 := &x.Device
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CIDR = ""
	} else {
		yyv19 := &x.CIDR
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		yyv21 := &x.IP
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MBits = 0
	} else {
		yyv23 := &x.MBits
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*int)(yyv23)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ReservedPorts = nil
	} else {
		yyv25 := &x.ReservedPorts
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			h.decSlicePort((*[]Port)(yyv25), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DynamicPorts = nil
	} else {
		yyv27 := &x.DynamicPorts
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			h.decSlicePort((*[]Port)(yyv27), d)
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x Networks) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encNetworks((Networks)(x), e)
		}
	}
}

func (x *Networks) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decNetworks((*Networks)(x), d)
	}
}

func (x *RequestedDevice) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Count))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Count"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Count))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					x.Constraints.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Constraints"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					x.Constraints.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Affinities == nil {
					r.EncodeNil()
				} else {
					x.Affinities.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Affinities"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Affinities == nil {
					r.EncodeNil()
				} else {
					x.Affinities.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *RequestedDevice) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *RequestedDevice) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				yyv6 := &x.Count
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "Constraints":
			if r.TryDecodeAsNil() {
				x.Constraints = nil
			} else {
				yyv8 := &x.Constraints
				yyv8.CodecDecodeSelf(d)
			}
		case "Affinities":
			if r.TryDecodeAsNil() {
				x.Affinities = nil
			} else {
				yyv9 := &x.Affinities
				yyv9.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *RequestedDevice) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv11 := &x.Name
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		yyv13 := &x.Count
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Constraints = nil
	} else {
		yyv15 := &x.Constraints
		yyv15.CodecDecodeSelf(d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Affinities = nil
	} else {
		yyv16 := &x.Affinities
		yyv16.CodecDecodeSelf(d)
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy4 := &x.Cpu
				yy4.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Cpu"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy6 := &x.Cpu
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy9 := &x.Memory
				yy9.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Memory"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy11 := &x.Memory
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy14 := &x.Disk
				yy14.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Disk"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy16 := &x.Disk
				yy16.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Networks == nil {
					r.EncodeNil()
				} else {
					x.Networks.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Networks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Networks == nil {
					r.EncodeNil()
				} else {
					x.Networks.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Devices == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						h.encSlicePtrtoNodeDeviceResource(([]*NodeDeviceResource)(x.Devices), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Devices"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Devices == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						h.encSlicePtrtoNodeDeviceResource(([]*NodeDeviceResource)(x.Devices), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Cpu":
			if r.TryDecodeAsNil() {
				x.Cpu = NodeCpuResources{}
			} else {
				yyv4 := &x.Cpu
				yyv4.CodecDecodeSelf(d)
			}
		case "Memory":
			if r.TryDecodeAsNil() {
				x.Memory = NodeMemoryResources{}
			} else {
				yyv5 := &x.Memory
				yyv5.CodecDecodeSelf(d)
			}
		case "Disk":
			if r.TryDecodeAsNil() {
				x.Disk = NodeDiskResources{}
			} else {
				yyv6 := &x.Disk
				yyv6.CodecDecodeSelf(d)
			}
		case "Networks":
			if r.TryDecodeAsNil() {
				x.Networks = nil
			} else {
				yyv7 := &x.Networks
				yyv7.CodecDecodeSelf(d)
			}
		case "Devices":
			if r.TryDecodeAsNil() {
				x.Devices = nil
			} else {
				yyv8 := &x.Devices
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSlicePtrtoNodeDeviceResource((*[]*NodeDeviceResource)(yyv8), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Cpu = NodeCpuResources{}
	} else {
		yyv11 := &x.Cpu
		yyv11.CodecDecodeSelf(d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Memory = NodeMemoryResources{}
	} else {
		yyv12 := &x.Memory
		yyv12.CodecDecodeSelf(d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Disk = NodeDiskResources{}
	} else {
		yyv13 := &x.Disk
		yyv13.CodecDecodeSelf(d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Networks = nil
	} else {
		yyv14 := &x.Networks
		yyv14.CodecDecodeSelf(d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Devices = nil
	} else {
		yyv15 := &x.Devices
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decSlicePtrtoNodeDeviceResource((*[]*NodeDeviceResource)(yyv15), d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeCpuResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.CpuShares))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CpuShares"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.CpuShares))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeCpuResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeCpuResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "CpuShares":
			if r.TryDecodeAsNil() {
				x.CpuShares = 0
			} else {
				yyv4 := &x.CpuShares
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeCpuResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CpuShares = 0
	} else {
		yyv7 := &x.CpuShares
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeMemoryResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MemoryMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeMemoryResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeMemoryResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "MemoryMB":
			if r.TryDecodeAsNil() {
				x.MemoryMB = 0
			} else {
				yyv4 := &x.MemoryMB
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeMemoryResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MemoryMB = 0
	} else {
		yyv7 := &x.MemoryMB
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeDiskResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DiskMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeDiskResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeDiskResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DiskMB":
			if r.TryDecodeAsNil() {
				x.DiskMB = 0
			} else {
				yyv4 := &x.DiskMB
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeDiskResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DiskMB = 0
	} else {
		yyv7 := &x.DiskMB
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeviceIdTuple) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Vendor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Vendor"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Vendor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeviceIdTuple) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeviceIdTuple) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Vendor":
			if r.TryDecodeAsNil() {
				x.Vendor = ""
			} else {
				yyv4 := &x.Vendor
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv6 := &x.Type
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeviceIdTuple) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Vendor = ""
	} else {
		yyv11 := &x.Vendor
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv13 := &x.Type
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv15 := &x.Name
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeDeviceResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Vendor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Vendor"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Vendor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Instances == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoNodeDevice(([]*NodeDevice)(x.Instances), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Instances"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Instances == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoNodeDevice(([]*NodeDevice)(x.Instances), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encMapstringPtrtostructs_Attribute((map[string]*pkg1_structs.Attribute)(x.Attributes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Attributes"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encMapstringPtrtostructs_Attribute((map[string]*pkg1_structs.Attribute)(x.Attributes), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeDeviceResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeDeviceResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Vendor":
			if r.TryDecodeAsNil() {
				x.Vendor = ""
			} else {
				yyv4 := &x.Vendor
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv6 := &x.Type
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Instances":
			if r.TryDecodeAsNil() {
				x.Instances = nil
			} else {
				yyv10 := &x.Instances
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSlicePtrtoNodeDevice((*[]*NodeDevice)(yyv10), d)
				}
			}
		case "Attributes":
			if r.TryDecodeAsNil() {
				x.Attributes = nil
			} else {
				yyv12 := &x.Attributes
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decMapstringPtrtostructs_Attribute((*map[string]*pkg1_structs.Attribute)(yyv12), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeDeviceResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Vendor = ""
	} else {
		yyv15 := &x.Vendor
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv17 := &x.Type
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv19 := &x.Name
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Instances = nil
	} else {
		yyv21 := &x.Instances
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			h.decSlicePtrtoNodeDevice((*[]*NodeDevice)(yyv21), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Attributes = nil
	} else {
		yyv23 := &x.Attributes
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decMapstringPtrtostructs_Attribute((*map[string]*pkg1_structs.Attribute)(yyv23), d)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeDevice) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Healthy))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Healthy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Healthy))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HealthDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HealthDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HealthDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Locality == nil {
					r.EncodeNil()
				} else {
					x.Locality.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Locality"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Locality == nil {
					r.EncodeNil()
				} else {
					x.Locality.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeDevice) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeDevice) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Healthy":
			if r.TryDecodeAsNil() {
				x.Healthy = false
			} else {
				yyv6 := &x.Healthy
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "HealthDescription":
			if r.TryDecodeAsNil() {
				x.HealthDescription = ""
			} else {
				yyv8 := &x.HealthDescription
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Locality":
			if r.TryDecodeAsNil() {
				if x.Locality != nil {
					x.Locality = nil
				}
			} else {
				if x.Locality == nil {
					x.Locality = new(NodeDeviceLocality)
				}
				x.Locality.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeDevice) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv12 := &x.ID
		yym13 := z.DecBinary()
		_ = yym13
		if false {
		} else {
			*((*string)(yyv12)) = r.DecodeString()
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Healthy = false
	} else {
		yyv14 := &x.Healthy
		yym15 := z.DecBinary()
		_ = yym15
		if false {
		} else {
			*((*bool)(yyv14)) = r.DecodeBool()
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HealthDescription = ""
	} else {
		yyv16 := &x.HealthDescription
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			*((*string)(yyv16)) = r.DecodeString()
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Locality != nil {
			x.Locality = nil
		}
	} else {
		if x.Locality == nil {
			x.Locality = new(NodeDeviceLocality)
		}
		x.Locality.CodecDecodeSelf(d)
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeDeviceLocality) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PciBusID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PciBusID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PciBusID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeDeviceLocality) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeDeviceLocality) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "PciBusID":
			if r.TryDecodeAsNil() {
				x.PciBusID = ""
			} else {
				yyv4 := &x.PciBusID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeDeviceLocality) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PciBusID = ""
	} else {
		yyv7 := &x.PciBusID
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*string)(yyv7)) = r.DecodeString()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeReservedResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy4 := &x.Cpu
				yy4.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Cpu"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy6 := &x.Cpu
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy9 := &x.Memory
				yy9.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Memory"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy11 := &x.Memory
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy14 := &x.Disk
				yy14.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Disk"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy16 := &x.Disk
				yy16.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy19 := &x.Networks
				yy19.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Networks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy21 := &x.Networks
				yy21.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeReservedResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeReservedResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Cpu":
			if r.TryDecodeAsNil() {
				x.Cpu = NodeReservedCpuResources{}
			} else {
				yyv4 := &x.Cpu
				yyv4.CodecDecodeSelf(d)
			}
		case "Memory":
			if r.TryDecodeAsNil() {
				x.Memory = NodeReservedMemoryResources{}
			} else {
				yyv5 := &x.Memory
				yyv5.CodecDecodeSelf(d)
			}
		case "Disk":
			if r.TryDecodeAsNil() {
				x.Disk = NodeReservedDiskResources{}
			} else {
				yyv6 := &x.Disk
				yyv6.CodecDecodeSelf(d)
			}
		case "Networks":
			if r.TryDecodeAsNil() {
				x.Networks = NodeReservedNetworkResources{}
			} else {
				yyv7 := &x.Networks
				yyv7.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeReservedResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Cpu = NodeReservedCpuResources{}
	} else {
		yyv9 := &x.Cpu
		yyv9.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Memory = NodeReservedMemoryResources{}
	} else {
		yyv10 := &x.Memory
		yyv10.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Disk = NodeReservedDiskResources{}
	} else {
		yyv11 := &x.Disk
		yyv11.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Networks = NodeReservedNetworkResources{}
	} else {
		yyv12 := &x.Networks
		yyv12.CodecDecodeSelf(d)
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeReservedCpuResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.CpuShares))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CpuShares"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.CpuShares))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeReservedCpuResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeReservedCpuResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "CpuShares":
			if r.TryDecodeAsNil() {
				x.CpuShares = 0
			} else {
				yyv4 := &x.CpuShares
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeReservedCpuResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CpuShares = 0
	} else {
		yyv7 := &x.CpuShares
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeReservedMemoryResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MemoryMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeReservedMemoryResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeReservedMemoryResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "MemoryMB":
			if r.TryDecodeAsNil() {
				x.MemoryMB = 0
			} else {
				yyv4 := &x.MemoryMB
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeReservedMemoryResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MemoryMB = 0
	} else {
		yyv7 := &x.MemoryMB
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeReservedDiskResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DiskMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeReservedDiskResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeReservedDiskResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DiskMB":
			if r.TryDecodeAsNil() {
				x.DiskMB = 0
			} else {
				yyv4 := &x.DiskMB
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeReservedDiskResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DiskMB = 0
	} else {
		yyv7 := &x.DiskMB
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeReservedNetworkResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ReservedHostPorts))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ReservedHostPorts"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ReservedHostPorts))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeReservedNetworkResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeReservedNetworkResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ReservedHostPorts":
			if r.TryDecodeAsNil() {
				x.ReservedHostPorts = ""
			} else {
				yyv4 := &x.ReservedHostPorts
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeReservedNetworkResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ReservedHostPorts = ""
	} else {
		yyv7 := &x.ReservedHostPorts
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*string)(yyv7)) = r.DecodeString()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocatedResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringPtrtoAllocatedTaskResources((map[string]*AllocatedTaskResources)(x.Tasks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tasks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringPtrtoAllocatedTaskResources((map[string]*AllocatedTaskResources)(x.Tasks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy7 := &x.Shared
				yy7.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Shared"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy9 := &x.Shared
				yy9.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocatedResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocatedResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Tasks":
			if r.TryDecodeAsNil() {
				x.Tasks = nil
			} else {
				yyv4 := &x.Tasks
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringPtrtoAllocatedTaskResources((*map[string]*AllocatedTaskResources)(yyv4), d)
				}
			}
		case "Shared":
			if r.TryDecodeAsNil() {
				x.Shared = AllocatedSharedResources{}
			} else {
				yyv6 := &x.Shared
				yyv6.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocatedResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tasks = nil
	} else {
		yyv8 := &x.Tasks
		yym9 := z.DecBinary()
		_ = yym9
		if false {
		} else {
			h.decMapstringPtrtoAllocatedTaskResources((*map[string]*AllocatedTaskResources)(yyv8), d)
		}
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Shared = AllocatedSharedResources{}
	} else {
		yyv10 := &x.Shared
		yyv10.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocatedTaskResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy4 := &x.Cpu
				yy4.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Cpu"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy6 := &x.Cpu
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy9 := &x.Memory
				yy9.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Memory"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy11 := &x.Memory
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Networks == nil {
					r.EncodeNil()
				} else {
					x.Networks.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Networks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Networks == nil {
					r.EncodeNil()
				} else {
					x.Networks.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Devices == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSlicePtrtoAllocatedDeviceResource(([]*AllocatedDeviceResource)(x.Devices), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Devices"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Devices == nil {
					r.EncodeNil()
				} else {
					yym18 := z.EncBinary()
					_ = yym18
					if false {
					} else {
						h.encSlicePtrtoAllocatedDeviceResource(([]*AllocatedDeviceResource)(x.Devices), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocatedTaskResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocatedTaskResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Cpu":
			if r.TryDecodeAsNil() {
				x.Cpu = AllocatedCpuResources{}
			} else {
				yyv4 := &x.Cpu
				yyv4.CodecDecodeSelf(d)
			}
		case "Memory":
			if r.TryDecodeAsNil() {
				x.Memory = AllocatedMemoryResources{}
			} else {
				yyv5 := &x.Memory
				yyv5.CodecDecodeSelf(d)
			}
		case "Networks":
			if r.TryDecodeAsNil() {
				x.Networks = nil
			} else {
				yyv6 := &x.Networks
				yyv6.CodecDecodeSelf(d)
			}
		case "Devices":
			if r.TryDecodeAsNil() {
				x.Devices = nil
			} else {
				yyv7 := &x.Devices
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					h.decSlicePtrtoAllocatedDeviceResource((*[]*AllocatedDeviceResource)(yyv7), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocatedTaskResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Cpu = AllocatedCpuResources{}
	} else {
		yyv10 := &x.Cpu
		yyv10.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Memory = AllocatedMemoryResources{}
	} else {
		yyv11 := &x.Memory
		yyv11.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Networks = nil
	} else {
		yyv12 := &x.Networks
		yyv12.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Devices = nil
	} else {
		yyv13 := &x.Devices
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocatedDeviceResource((*[]*AllocatedDeviceResource)(yyv13), d)
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocatedSharedResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DiskMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocatedSharedResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocatedSharedResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DiskMB":
			if r.TryDecodeAsNil() {
				x.DiskMB = 0
			} else {
				yyv4 := &x.DiskMB
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocatedSharedResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DiskMB = 0
	} else {
		yyv7 := &x.DiskMB
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocatedCpuResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.CpuShares))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CpuShares"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.CpuShares))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocatedCpuResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocatedCpuResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "CpuShares":
			if r.TryDecodeAsNil() {
				x.CpuShares = 0
			} else {
				yyv4 := &x.CpuShares
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocatedCpuResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CpuShares = 0
	} else {
		yyv7 := &x.CpuShares
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocatedMemoryResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MemoryMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocatedMemoryResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocatedMemoryResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "MemoryMB":
			if r.TryDecodeAsNil() {
				x.MemoryMB = 0
			} else {
				yyv4 := &x.MemoryMB
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocatedMemoryResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MemoryMB = 0
	} else {
		yyv7 := &x.MemoryMB
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x AllocatedDevices) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encAllocatedDevices((AllocatedDevices)(x), e)
		}
	}
}

func (x *AllocatedDevices) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decAllocatedDevices((*AllocatedDevices)(x), d)
	}
}

func (x *AllocatedDeviceResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Vendor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Vendor"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Vendor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DeviceIDs == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncSliceStringV(x.DeviceIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeviceIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DeviceIDs == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncSliceStringV(x.DeviceIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocatedDeviceResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocatedDeviceResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Vendor":
			if r.TryDecodeAsNil() {
				x.Vendor = ""
			} else {
				yyv4 := &x.Vendor
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv6 := &x.Type
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "DeviceIDs":
			if r.TryDecodeAsNil() {
				x.DeviceIDs = nil
			} else {
				yyv10 := &x.DeviceIDs
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecSliceStringX(yyv10, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocatedDeviceResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Vendor = ""
	} else {
		yyv13 := &x.Vendor
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv15 := &x.Type
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv17 := &x.Name
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeviceIDs = nil
	} else {
		yyv19 := &x.DeviceIDs
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			z.F.DecSliceStringX(yyv19, false, d)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ComparableResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy4 := &x.Flattened
				yy4.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Flattened"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy6 := &x.Flattened
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy9 := &x.Shared
				yy9.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Shared"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy11 := &x.Shared
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ComparableResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ComparableResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Flattened":
			if r.TryDecodeAsNil() {
				x.Flattened = AllocatedTaskResources{}
			} else {
				yyv4 := &x.Flattened
				yyv4.CodecDecodeSelf(d)
			}
		case "Shared":
			if r.TryDecodeAsNil() {
				x.Shared = AllocatedSharedResources{}
			} else {
				yyv5 := &x.Shared
				yyv5.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ComparableResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Flattened = AllocatedTaskResources{}
	} else {
		yyv7 := &x.Flattened
		yyv7.CodecDecodeSelf(d)
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Shared = AllocatedSharedResources{}
	} else {
		yyv8 := &x.Shared
		yyv8.CodecDecodeSelf(d)
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [29]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(29)
			} else {
				yynn2 = 29
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Stop))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Stop"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Stop))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ParentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ParentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ParentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Priority"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.AllAtOnce))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllAtOnce"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.AllAtOnce))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Datacenters == nil {
					r.EncodeNil()
				} else {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						z.F.EncSliceStringV(x.Datacenters, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Datacenters"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Datacenters == nil {
					r.EncodeNil()
				} else {
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						z.F.EncSliceStringV(x.Datacenters, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Constraints"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Affinities == nil {
					r.EncodeNil()
				} else {
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						h.encSlicePtrtoAffinity(([]*Affinity)(x.Affinities), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Affinities"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Affinities == nil {
					r.EncodeNil()
				} else {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						h.encSlicePtrtoAffinity(([]*Affinity)(x.Affinities), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Spreads == nil {
					r.EncodeNil()
				} else {
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						h.encSlicePtrtoSpread(([]*Spread)(x.Spreads), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Spreads"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Spreads == nil {
					r.EncodeNil()
				} else {
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else {
						h.encSlicePtrtoSpread(([]*Spread)(x.Spreads), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.TaskGroups == nil {
					r.EncodeNil()
				} else {
					yym43 := z.EncBinary()
					_ = yym43
					if false {
					} else {
						h.encSlicePtrtoTaskGroup(([]*TaskGroup)(x.TaskGroups), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TaskGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.TaskGroups == nil {
					r.EncodeNil()
				} else {
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else {
						h.encSlicePtrtoTaskGroup(([]*TaskGroup)(x.TaskGroups), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy46 := &x.Update
				yy46.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Update"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy48 := &x.Update
				yy48.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Periodic == nil {
					r.EncodeNil()
				} else {
					x.Periodic.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Periodic"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Periodic == nil {
					r.EncodeNil()
				} else {
					x.Periodic.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ParameterizedJob == nil {
					r.EncodeNil()
				} else {
					x.ParameterizedJob.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ParameterizedJob"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ParameterizedJob == nil {
					r.EncodeNil()
				} else {
					x.ParameterizedJob.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym57 := z.EncBinary()
				_ = yym57
				if false {
				} else {
					r.EncodeBool(bool(x.Dispatched))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Dispatched"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeBool(bool(x.Dispatched))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym60 := z.EncBinary()
					_ = yym60
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Payload))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Payload"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym61 := z.EncBinary()
					_ = yym61
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Payload))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym63 := z.EncBinary()
					_ = yym63
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym66 := z.EncBinary()
				_ = yym66
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.VaultToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("VaultToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.VaultToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym69 := z.EncBinary()
				_ = yym69
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym70 := z.EncBinary()
				_ = yym70
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym72 := z.EncBinary()
				_ = yym72
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym73 := z.EncBinary()
				_ = yym73
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym75 := z.EncBinary()
				_ = yym75
				if false {
				} else {
					r.EncodeBool(bool(x.Stable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Stable"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym76 := z.EncBinary()
				_ = yym76
				if false {
				} else {
					r.EncodeBool(bool(x.Stable))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym78 := z.EncBinary()
				_ = yym78
				if false {
				} else {
					r.EncodeUint(uint64(x.Version))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Version"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym79 := z.EncBinary()
				_ = yym79
				if false {
				} else {
					r.EncodeUint(uint64(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym81 := z.EncBinary()
				_ = yym81
				if false {
				} else {
					r.EncodeInt(int64(x.SubmitTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SubmitTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym82 := z.EncBinary()
				_ = yym82
				if false {
				} else {
					r.EncodeInt(int64(x.SubmitTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym87 := z.EncBinary()
				_ = yym87
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym88 := z.EncBinary()
				_ = yym88
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym90 := z.EncBinary()
				_ = yym90
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym91 := z.EncBinary()
				_ = yym91
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Stop":
			if r.TryDecodeAsNil() {
				x.Stop = false
			} else {
				yyv4 := &x.Stop
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv10 := &x.ID
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "ParentID":
			if r.TryDecodeAsNil() {
				x.ParentID = ""
			} else {
				yyv12 := &x.ParentID
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv14 := &x.Name
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv16 := &x.Type
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv18 := &x.Priority
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*int)(yyv18)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "AllAtOnce":
			if r.TryDecodeAsNil() {
				x.AllAtOnce = false
			} else {
				yyv20 := &x.AllAtOnce
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		case "Datacenters":
			if r.TryDecodeAsNil() {
				x.Datacenters = nil
			} else {
				yyv22 := &x.Datacenters
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					z.F.DecSliceStringX(yyv22, false, d)
				}
			}
		case "Constraints":
			if r.TryDecodeAsNil() {
				x.Constraints = nil
			} else {
				yyv24 := &x.Constraints
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decSlicePtrtoConstraint((*[]*Constraint)(yyv24), d)
				}
			}
		case "Affinities":
			if r.TryDecodeAsNil() {
				x.Affinities = nil
			} else {
				yyv26 := &x.Affinities
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					h.decSlicePtrtoAffinity((*[]*Affinity)(yyv26), d)
				}
			}
		case "Spreads":
			if r.TryDecodeAsNil() {
				x.Spreads = nil
			} else {
				yyv28 := &x.Spreads
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					h.decSlicePtrtoSpread((*[]*Spread)(yyv28), d)
				}
			}
		case "TaskGroups":
			if r.TryDecodeAsNil() {
				x.TaskGroups = nil
			} else {
				yyv30 := &x.TaskGroups
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					h.decSlicePtrtoTaskGroup((*[]*TaskGroup)(yyv30), d)
				}
			}
		case "Update":
			if r.TryDecodeAsNil() {
				x.Update = UpdateStrategy{}
			} else {
				yyv32 := &x.Update
				yyv32.CodecDecodeSelf(d)
			}
		case "Periodic":
			if r.TryDecodeAsNil() {
				if x.Periodic != nil {
					x.Periodic = nil
				}
			} else {
				if x.Periodic == nil {
					x.Periodic = new(PeriodicConfig)
				}
				x.Periodic.CodecDecodeSelf(d)
			}
		case "ParameterizedJob":
			if r.TryDecodeAsNil() {
				if x.ParameterizedJob != nil {
					x.ParameterizedJob = nil
				}
			} else {
				if x.ParameterizedJob == nil {
					x.ParameterizedJob = new(ParameterizedJobConfig)
				}
				x.ParameterizedJob.CodecDecodeSelf(d)
			}
		case "Dispatched":
			if r.TryDecodeAsNil() {
				x.Dispatched = false
			} else {
				yyv35 := &x.Dispatched
				yym36 := z.DecBinary()
				_ = yym36
				if false {
				} else {
					*((*bool)(yyv35)) = r.DecodeBool()
				}
			}
		case "Payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				yyv37 := &x.Payload
				yym38 := z.DecBinary()
				_ = yym38
				if false {
				} else {
					*yyv37 = r.DecodeBytes(*(*[]byte)(yyv37), false, false)
				}
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv39 := &x.Meta
				yym40 := z.DecBinary()
				_ = yym40
				if false {
				} else {
					z.F.DecMapStringStringX(yyv39, false, d)
				}
			}
		case "VaultToken":
			if r.TryDecodeAsNil() {
				x.VaultToken = ""
			} else {
				yyv41 := &x.VaultToken
				yym42 := z.DecBinary()
				_ = yym42
				if false {
				} else {
					*((*string)(yyv41)) = r.DecodeString()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv43 := &x.Status
				yym44 := z.DecBinary()
				_ = yym44
				if false {
				} else {
					*((*string)(yyv43)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv45 := &x.StatusDescription
				yym46 := z.DecBinary()
				_ = yym46
				if false {
				} else {
					*((*string)(yyv45)) = r.DecodeString()
				}
			}
		case "Stable":
			if r.TryDecodeAsNil() {
				x.Stable = false
			} else {
				yyv47 := &x.Stable
				yym48 := z.DecBinary()
				_ = yym48
				if false {
				} else {
					*((*bool)(yyv47)) = r.DecodeBool()
				}
			}
		case "Version":
			if r.TryDecodeAsNil() {
				x.Version = 0
			} else {
				yyv49 := &x.Version
				yym50 := z.DecBinary()
				_ = yym50
				if false {
				} else {
					*((*uint64)(yyv49)) = uint64(r.DecodeUint(64))
				}
			}
		case "SubmitTime":
			if r.TryDecodeAsNil() {
				x.SubmitTime = 0
			} else {
				yyv51 := &x.SubmitTime
				yym52 := z.DecBinary()
				_ = yym52
				if false {
				} else {
					*((*int64)(yyv51)) = int64(r.DecodeInt(64))
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv53 := &x.CreateIndex
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else {
					*((*uint64)(yyv53)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv55 := &x.ModifyIndex
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else {
					*((*uint64)(yyv55)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv57 := &x.JobModifyIndex
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*uint64)(yyv57)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj59 int
	var yyb59 bool
	var yyhl59 bool = l >= 0
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Stop = false
	} else {
		yyv60 := &x.Stop
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else {
			*((*bool)(yyv60)) = r.DecodeBool()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv62 := &x.Region
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			*((*string)(yyv62)) = r.DecodeString()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv64 := &x.Namespace
		yym65 := z.DecBinary()
		_ = yym65
		if false {
		} else {
			*((*string)(yyv64)) = r.DecodeString()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv66 := &x.ID
		yym67 := z.DecBinary()
		_ = yym67
		if false {
		} else {
			*((*string)(yyv66)) = r.DecodeString()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ParentID = ""
	} else {
		yyv68 := &x.ParentID
		yym69 := z.DecBinary()
		_ = yym69
		if false {
		} else {
			*((*string)(yyv68)) = r.DecodeString()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv70 := &x.Name
		yym71 := z.DecBinary()
		_ = yym71
		if false {
		} else {
			*((*string)(yyv70)) = r.DecodeString()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv72 := &x.Type
		yym73 := z.DecBinary()
		_ = yym73
		if false {
		} else {
			*((*string)(yyv72)) = r.DecodeString()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv74 := &x.Priority
		yym75 := z.DecBinary()
		_ = yym75
		if false {
		} else {
			*((*int)(yyv74)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllAtOnce = false
	} else {
		yyv76 := &x.AllAtOnce
		yym77 := z.DecBinary()
		_ = yym77
		if false {
		} else {
			*((*bool)(yyv76)) = r.DecodeBool()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Datacenters = nil
	} else {
		yyv78 := &x.Datacenters
		yym79 := z.DecBinary()
		_ = yym79
		if false {
		} else {
			z.F.DecSliceStringX(yyv78, false, d)
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Constraints = nil
	} else {
		yyv80 := &x.Constraints
		yym81 := z.DecBinary()
		_ = yym81
		if false {
		} else {
			h.decSlicePtrtoConstraint((*[]*Constraint)(yyv80), d)
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Affinities = nil
	} else {
		yyv82 := &x.Affinities
		yym83 := z.DecBinary()
		_ = yym83
		if false {
		} else {
			h.decSlicePtrtoAffinity((*[]*Affinity)(yyv82), d)
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Spreads = nil
	} else {
		yyv84 := &x.Spreads
		yym85 := z.DecBinary()
		_ = yym85
		if false {
		} else {
			h.decSlicePtrtoSpread((*[]*Spread)(yyv84), d)
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskGroups = nil
	} else {
		yyv86 := &x.TaskGroups
		yym87 := z.DecBinary()
		_ = yym87
		if false {
		} else {
			h.decSlicePtrtoTaskGroup((*[]*TaskGroup)(yyv86), d)
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Update = UpdateStrategy{}
	} else {
		yyv88 := &x.Update
		yyv88.CodecDecodeSelf(d)
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Periodic != nil {
			x.Periodic = nil
		}
	} else {
		if x.Periodic == nil {
			x.Periodic = new(PeriodicConfig)
		}
		x.Periodic.CodecDecodeSelf(d)
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.ParameterizedJob != nil {
			x.ParameterizedJob = nil
		}
	} else {
		if x.ParameterizedJob == nil {
			x.ParameterizedJob = new(ParameterizedJobConfig)
		}
		x.ParameterizedJob.CodecDecodeSelf(d)
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Dispatched = false
	} else {
		yyv91 := &x.Dispatched
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			*((*bool)(yyv91)) = r.DecodeBool()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		yyv93 := &x.Payload
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			*yyv93 = r.DecodeBytes(*(*[]byte)(yyv93), false, false)
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv95 := &x.Meta
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			z.F.DecMapStringStringX(yyv95, false, d)
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.VaultToken = ""
	} else {
		yyv97 := &x.VaultToken
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			*((*string)(yyv97)) = r.DecodeString()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv99 := &x.Status
		yym100 := z.DecBinary()
		_ = yym100
		if false {
		} else {
			*((*string)(yyv99)) = r.DecodeString()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv101 := &x.StatusDescription
		yym102 := z.DecBinary()
		_ = yym102
		if false {
		} else {
			*((*string)(yyv101)) = r.DecodeString()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Stable = false
	} else {
		yyv103 := &x.Stable
		yym104 := z.DecBinary()
		_ = yym104
		if false {
		} else {
			*((*bool)(yyv103)) = r.DecodeBool()
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Version = 0
	} else {
		yyv105 := &x.Version
		yym106 := z.DecBinary()
		_ = yym106
		if false {
		} else {
			*((*uint64)(yyv105)) = uint64(r.DecodeUint(64))
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SubmitTime = 0
	} else {
		yyv107 := &x.SubmitTime
		yym108 := z.DecBinary()
		_ = yym108
		if false {
		} else {
			*((*int64)(yyv107)) = int64(r.DecodeInt(64))
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv109 := &x.CreateIndex
		yym110 := z.DecBinary()
		_ = yym110
		if false {
		} else {
			*((*uint64)(yyv109)) = uint64(r.DecodeUint(64))
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv111 := &x.ModifyIndex
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			*((*uint64)(yyv111)) = uint64(r.DecodeUint(64))
		}
	}
	yyj59++
	if yyhl59 {
		yyb59 = yyj59 > l
	} else {
		yyb59 = r.CheckBreak()
	}
	if yyb59 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv113 := &x.JobModifyIndex
		yym114 := z.DecBinary()
		_ = yym114
		if false {
		} else {
			*((*uint64)(yyv113)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj59++
		if yyhl59 {
			yyb59 = yyj59 > l
		} else {
			yyb59 = r.CheckBreak()
		}
		if yyb59 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj59-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobListStub) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [16]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(16)
			} else {
				yynn2 = 16
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ParentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ParentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ParentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Datacenters == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncSliceStringV(x.Datacenters, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Datacenters"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Datacenters == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncSliceStringV(x.Datacenters, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Priority"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Periodic))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Periodic"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Periodic))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.ParameterizedJob))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ParameterizedJob"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.ParameterizedJob))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Stop))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Stop"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Stop))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.JobSummary == nil {
					r.EncodeNil()
				} else {
					x.JobSummary.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobSummary"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.JobSummary == nil {
					r.EncodeNil()
				} else {
					x.JobSummary.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym46 := z.EncBinary()
				_ = yym46
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym47 := z.EncBinary()
				_ = yym47
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym49 := z.EncBinary()
				_ = yym49
				if false {
				} else {
					r.EncodeInt(int64(x.SubmitTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SubmitTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym50 := z.EncBinary()
				_ = yym50
				if false {
				} else {
					r.EncodeInt(int64(x.SubmitTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobListStub) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobListStub) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "ParentID":
			if r.TryDecodeAsNil() {
				x.ParentID = ""
			} else {
				yyv6 := &x.ParentID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Datacenters":
			if r.TryDecodeAsNil() {
				x.Datacenters = nil
			} else {
				yyv10 := &x.Datacenters
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecSliceStringX(yyv10, false, d)
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv12 := &x.Type
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv14 := &x.Priority
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Periodic":
			if r.TryDecodeAsNil() {
				x.Periodic = false
			} else {
				yyv16 := &x.Periodic
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "ParameterizedJob":
			if r.TryDecodeAsNil() {
				x.ParameterizedJob = false
			} else {
				yyv18 := &x.ParameterizedJob
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		case "Stop":
			if r.TryDecodeAsNil() {
				x.Stop = false
			} else {
				yyv20 := &x.Stop
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv22 := &x.Status
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv24 := &x.StatusDescription
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "JobSummary":
			if r.TryDecodeAsNil() {
				if x.JobSummary != nil {
					x.JobSummary = nil
				}
			} else {
				if x.JobSummary == nil {
					x.JobSummary = new(JobSummary)
				}
				x.JobSummary.CodecDecodeSelf(d)
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv27 := &x.CreateIndex
				yym28 := z.DecBinary()
				_ = yym28
				if false {
				} else {
					*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv29 := &x.ModifyIndex
				yym30 := z.DecBinary()
				_ = yym30
				if false {
				} else {
					*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv31 := &x.JobModifyIndex
				yym32 := z.DecBinary()
				_ = yym32
				if false {
				} else {
					*((*uint64)(yyv31)) = uint64(r.DecodeUint(64))
				}
			}
		case "SubmitTime":
			if r.TryDecodeAsNil() {
				x.SubmitTime = 0
			} else {
				yyv33 := &x.SubmitTime
				yym34 := z.DecBinary()
				_ = yym34
				if false {
				} else {
					*((*int64)(yyv33)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobListStub) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj35 int
	var yyb35 bool
	var yyhl35 bool = l >= 0
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv36 := &x.ID
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else {
			*((*string)(yyv36)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ParentID = ""
	} else {
		yyv38 := &x.ParentID
		yym39 := z.DecBinary()
		_ = yym39
		if false {
		} else {
			*((*string)(yyv38)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv40 := &x.Name
		yym41 := z.DecBinary()
		_ = yym41
		if false {
		} else {
			*((*string)(yyv40)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Datacenters = nil
	} else {
		yyv42 := &x.Datacenters
		yym43 := z.DecBinary()
		_ = yym43
		if false {
		} else {
			z.F.DecSliceStringX(yyv42, false, d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv44 := &x.Type
		yym45 := z.DecBinary()
		_ = yym45
		if false {
		} else {
			*((*string)(yyv44)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv46 := &x.Priority
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else {
			*((*int)(yyv46)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Periodic = false
	} else {
		yyv48 := &x.Periodic
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			*((*bool)(yyv48)) = r.DecodeBool()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ParameterizedJob = false
	} else {
		yyv50 := &x.ParameterizedJob
		yym51 := z.DecBinary()
		_ = yym51
		if false {
		} else {
			*((*bool)(yyv50)) = r.DecodeBool()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Stop = false
	} else {
		yyv52 := &x.Stop
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			*((*bool)(yyv52)) = r.DecodeBool()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv54 := &x.Status
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			*((*string)(yyv54)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv56 := &x.StatusDescription
		yym57 := z.DecBinary()
		_ = yym57
		if false {
		} else {
			*((*string)(yyv56)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.JobSummary != nil {
			x.JobSummary = nil
		}
	} else {
		if x.JobSummary == nil {
			x.JobSummary = new(JobSummary)
		}
		x.JobSummary.CodecDecodeSelf(d)
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv59 := &x.CreateIndex
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			*((*uint64)(yyv59)) = uint64(r.DecodeUint(64))
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv61 := &x.ModifyIndex
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			*((*uint64)(yyv61)) = uint64(r.DecodeUint(64))
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv63 := &x.JobModifyIndex
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*uint64)(yyv63)) = uint64(r.DecodeUint(64))
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SubmitTime = 0
	} else {
		yyv65 := &x.SubmitTime
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			*((*int64)(yyv65)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj35++
		if yyhl35 {
			yyb35 = yyj35 > l
		} else {
			yyb35 = r.CheckBreak()
		}
		if yyb35 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj35-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Summary == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encMapstringTaskGroupSummary((map[string]TaskGroupSummary)(x.Summary), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Summary"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Summary == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encMapstringTaskGroupSummary((map[string]TaskGroupSummary)(x.Summary), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Children == nil {
					r.EncodeNil()
				} else {
					x.Children.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Children"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Children == nil {
					r.EncodeNil()
				} else {
					x.Children.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Summary":
			if r.TryDecodeAsNil() {
				x.Summary = nil
			} else {
				yyv8 := &x.Summary
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decMapstringTaskGroupSummary((*map[string]TaskGroupSummary)(yyv8), d)
				}
			}
		case "Children":
			if r.TryDecodeAsNil() {
				if x.Children != nil {
					x.Children = nil
				}
			} else {
				if x.Children == nil {
					x.Children = new(JobChildrenSummary)
				}
				x.Children.CodecDecodeSelf(d)
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv11 := &x.CreateIndex
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv13 := &x.ModifyIndex
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv16 := &x.JobID
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			*((*string)(yyv16)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv18 := &x.Namespace
		yym19 := z.DecBinary()
		_ = yym19
		if false {
		} else {
			*((*string)(yyv18)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Summary = nil
	} else {
		yyv20 := &x.Summary
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			h.decMapstringTaskGroupSummary((*map[string]TaskGroupSummary)(yyv20), d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Children != nil {
			x.Children = nil
		}
	} else {
		if x.Children == nil {
			x.Children = new(JobChildrenSummary)
		}
		x.Children.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv23 := &x.CreateIndex
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv25 := &x.ModifyIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *JobChildrenSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Pending))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Pending"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Pending))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Running))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Running"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Running))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.Dead))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Dead"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.Dead))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *JobChildrenSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *JobChildrenSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Pending":
			if r.TryDecodeAsNil() {
				x.Pending = 0
			} else {
				yyv4 := &x.Pending
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "Running":
			if r.TryDecodeAsNil() {
				x.Running = 0
			} else {
				yyv6 := &x.Running
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "Dead":
			if r.TryDecodeAsNil() {
				x.Dead = 0
			} else {
				yyv8 := &x.Dead
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *JobChildrenSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Pending = 0
	} else {
		yyv11 := &x.Pending
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int64)(yyv11)) = int64(r.DecodeInt(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Running = 0
	} else {
		yyv13 := &x.Running
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int64)(yyv13)) = int64(r.DecodeInt(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Dead = 0
	} else {
		yyv15 := &x.Dead
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *TaskGroupSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Queued))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Queued"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Queued))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Complete))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Complete"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Complete))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.Failed))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Failed"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.Failed))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.Running))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Running"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.Running))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Starting))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Starting"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeInt(int64(x.Starting))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Lost))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Lost"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Lost))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *TaskGroupSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *TaskGroupSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Queued":
			if r.TryDecodeAsNil() {
				x.Queued = 0
			} else {
				yyv4 := &x.Queued
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Complete":
			if r.TryDecodeAsNil() {
				x.Complete = 0
			} else {
				yyv6 := &x.Complete
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				yyv8 := &x.Failed
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Running":
			if r.TryDecodeAsNil() {
				x.Running = 0
			} else {
				yyv10 := &x.Running
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Starting":
			if r.TryDecodeAsNil() {
				x.Starting = 0
			} else {
				yyv12 := &x.Starting
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*int)(yyv12)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Lost":
			if r.TryDecodeAsNil() {
				x.Lost = 0
			} else {
				yyv14 := &x.Lost
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *TaskGroupSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Queued = 0
	} else {
		yyv17 := &x.Queued
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*int)(yyv17)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Complete = 0
	} else {
		yyv19 := &x.Complete
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*int)(yyv19)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		yyv21 := &x.Failed
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*int)(yyv21)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Running = 0
	} else {
		yyv23 := &x.Running
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*int)(yyv23)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Starting = 0
	} else {
		yyv25 := &x.Starting
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*int)(yyv25)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Lost = 0
	} else {
		yyv27 := &x.Lost
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int)(yyv27)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *UpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Stagger) {
				} else {
					r.EncodeInt(int64(x.Stagger))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Stagger"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Stagger) {
				} else {
					r.EncodeInt(int64(x.Stagger))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.MaxParallel))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxParallel"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.MaxParallel))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HealthCheck))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HealthCheck"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HealthCheck))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MinHealthyTime) {
				} else {
					r.EncodeInt(int64(x.MinHealthyTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinHealthyTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MinHealthyTime) {
				} else {
					r.EncodeInt(int64(x.MinHealthyTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.HealthyDeadline) {
				} else {
					r.EncodeInt(int64(x.HealthyDeadline))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HealthyDeadline"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.HealthyDeadline) {
				} else {
					r.EncodeInt(int64(x.HealthyDeadline))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ProgressDeadline) {
				} else {
					r.EncodeInt(int64(x.ProgressDeadline))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ProgressDeadline"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ProgressDeadline) {
				} else {
					r.EncodeInt(int64(x.ProgressDeadline))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AutoRevert))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AutoRevert"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AutoRevert))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.AutoPromote))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AutoPromote"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.AutoPromote))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeInt(int64(x.Canary))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Canary"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeInt(int64(x.Canary))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *UpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *UpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Stagger":
			if r.TryDecodeAsNil() {
				x.Stagger = 0
			} else {
				yyv4 := &x.Stagger
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "MaxParallel":
			if r.TryDecodeAsNil() {
				x.MaxParallel = 0
			} else {
				yyv6 := &x.MaxParallel
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "HealthCheck":
			if r.TryDecodeAsNil() {
				x.HealthCheck = ""
			} else {
				yyv8 := &x.HealthCheck
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinHealthyTime":
			if r.TryDecodeAsNil() {
				x.MinHealthyTime = 0
			} else {
				yyv10 := &x.MinHealthyTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "HealthyDeadline":
			if r.TryDecodeAsNil() {
				x.HealthyDeadline = 0
			} else {
				yyv12 := &x.HealthyDeadline
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "ProgressDeadline":
			if r.TryDecodeAsNil() {
				x.ProgressDeadline = 0
			} else {
				yyv14 := &x.ProgressDeadline
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "AutoRevert":
			if r.TryDecodeAsNil() {
				x.AutoRevert = false
			} else {
				yyv16 := &x.AutoRevert
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "AutoPromote":
			if r.TryDecodeAsNil() {
				x.AutoPromote = false
			} else {
				yyv18 := &x.AutoPromote
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		case "Canary":
			if r.TryDecodeAsNil() {
				x.Canary = 0
			} else {
				yyv20 := &x.Canary
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*int)(yyv20)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *UpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Stagger = 0
	} else {
		yyv23 := &x.Stagger
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv23) {
		} else {
			*((*int64)(yyv23)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxParallel = 0
	} else {
		yyv25 := &x.MaxParallel
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*int)(yyv25)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HealthCheck = ""
	} else {
		yyv27 := &x.HealthCheck
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinHealthyTime = 0
	} else {
		yyv29 := &x.MinHealthyTime
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv29) {
		} else {
			*((*int64)(yyv29)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HealthyDeadline = 0
	} else {
		yyv31 := &x.HealthyDeadline
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ProgressDeadline = 0
	} else {
		yyv33 := &x.ProgressDeadline
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv33) {
		} else {
			*((*int64)(yyv33)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AutoRevert = false
	} else {
		yyv35 := &x.AutoRevert
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AutoPromote = false
	} else {
		yyv37 := &x.AutoPromote
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Canary = 0
	} else {
		yyv39 := &x.Canary
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*int)(yyv39)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *PeriodicConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Enabled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Enabled"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Enabled))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Spec))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Spec))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SpecType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SpecType"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SpecType))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.ProhibitOverlap))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ProhibitOverlap"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.ProhibitOverlap))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TimeZone))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TimeZone"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TimeZone))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *PeriodicConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *PeriodicConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Enabled":
			if r.TryDecodeAsNil() {
				x.Enabled = false
			} else {
				yyv4 := &x.Enabled
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "Spec":
			if r.TryDecodeAsNil() {
				x.Spec = ""
			} else {
				yyv6 := &x.Spec
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "SpecType":
			if r.TryDecodeAsNil() {
				x.SpecType = ""
			} else {
				yyv8 := &x.SpecType
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "ProhibitOverlap":
			if r.TryDecodeAsNil() {
				x.ProhibitOverlap = false
			} else {
				yyv10 := &x.ProhibitOverlap
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "TimeZone":
			if r.TryDecodeAsNil() {
				x.TimeZone = ""
			} else {
				yyv12 := &x.TimeZone
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *PeriodicConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Enabled = false
	} else {
		yyv15 := &x.Enabled
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Spec = ""
	} else {
		yyv17 := &x.Spec
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SpecType = ""
	} else {
		yyv19 := &x.SpecType
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ProhibitOverlap = false
	} else {
		yyv21 := &x.ProhibitOverlap
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TimeZone = ""
	} else {
		yyv23 := &x.TimeZone
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *PeriodicLaunch) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy10 := &x.Launch
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
					r.EncodeBuiltin(yym12, yy10)
				} else if z.HasExtensions() && z.EncExt(yy10) {
				} else if yym11 {
					z.EncBinaryMarshal(yy10)
				} else if !yym11 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy10)
				} else {
					z.EncFallback(yy10)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Launch"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy13 := &x.Launch
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if yym15 := z.TimeRtidIfBinc(); yym15 != 0 {
					r.EncodeBuiltin(yym15, yy13)
				} else if z.HasExtensions() && z.EncExt(yy13) {
				} else if yym14 {
					z.EncBinaryMarshal(yy13)
				} else if !yym14 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy13)
				} else {
					z.EncFallback(yy13)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym18 := z.EncBinary()
				_ = yym18
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym21 := z.EncBinary()
				_ = yym21
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *PeriodicLaunch) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *PeriodicLaunch) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Launch":
			if r.TryDecodeAsNil() {
				x.Launch = time.Time{}
			} else {
				yyv8 := &x.Launch
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if yym10 := z.TimeRtidIfBinc(); yym10 != 0 {
					r.DecodeBuiltin(yym10, yyv8)
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else if yym9 {
					z.DecBinaryUnmarshal(yyv8)
				} else if !yym9 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv8)
				} else {
					z.DecFallback(yyv8, false)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv11 := &x.CreateIndex
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv13 := &x.ModifyIndex
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *PeriodicLaunch) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv16 := &x.ID
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			*((*string)(yyv16)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv18 := &x.Namespace
		yym19 := z.DecBinary()
		_ = yym19
		if false {
		} else {
			*((*string)(yyv18)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Launch = time.Time{}
	} else {
		yyv20 := &x.Launch
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else if yym22 := z.TimeRtidIfBinc(); yym22 != 0 {
			r.DecodeBuiltin(yym22, yyv20)
		} else if z.HasExtensions() && z.DecExt(yyv20) {
		} else if yym21 {
			z.DecBinaryUnmarshal(yyv20)
		} else if !yym21 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv20)
		} else {
			z.DecFallback(yyv20, false)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv23 := &x.CreateIndex
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv25 := &x.ModifyIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ParameterizedJobConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Payload))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Payload"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Payload))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.MetaRequired == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.MetaRequired, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MetaRequired"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.MetaRequired == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.MetaRequired, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.MetaOptional == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncSliceStringV(x.MetaOptional, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MetaOptional"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.MetaOptional == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncSliceStringV(x.MetaOptional, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ParameterizedJobConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ParameterizedJobConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Payload":
			if r.TryDecodeAsNil() {
				x.Payload = ""
			} else {
				yyv4 := &x.Payload
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "MetaRequired":
			if r.TryDecodeAsNil() {
				x.MetaRequired = nil
			} else {
				yyv6 := &x.MetaRequired
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "MetaOptional":
			if r.TryDecodeAsNil() {
				x.MetaOptional = nil
			} else {
				yyv8 := &x.MetaOptional
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ParameterizedJobConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Payload = ""
	} else {
		yyv11 := &x.Payload
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MetaRequired = nil
	} else {
		yyv13 := &x.MetaRequired
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecSliceStringX(yyv13, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MetaOptional = nil
	} else {
		yyv15 := &x.MetaOptional
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DispatchPayloadConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.File))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("File"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.File))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DispatchPayloadConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DispatchPayloadConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "File":
			if r.TryDecodeAsNil() {
				x.File = ""
			} else {
				yyv4 := &x.File
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DispatchPayloadConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.File = ""
	} else {
		yyv7 := &x.File
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*string)(yyv7)) = r.DecodeString()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Attempts))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Attempts"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Attempts))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Interval"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Delay) {
				} else {
					r.EncodeInt(int64(x.Delay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Delay"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Delay) {
				} else {
					r.EncodeInt(int64(x.Delay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Mode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Mode"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Mode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *RestartPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Attempts":
			if r.TryDecodeAsNil() {
				x.Attempts = 0
			} else {
				yyv4 := &x.Attempts
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Interval":
			if r.TryDecodeAsNil() {
				x.Interval = 0
			} else {
				yyv6 := &x.Interval
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "Delay":
			if r.TryDecodeAsNil() {
				x.Delay = 0
			} else {
				yyv8 := &x.Delay
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "Mode":
			if r.TryDecodeAsNil() {
				x.Mode = ""
			} else {
				yyv10 := &x.Mode
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *RestartPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Attempts = 0
	} else {
		yyv13 := &x.Attempts
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int)(yyv13)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Interval = 0
	} else {
		yyv15 := &x.Interval
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Delay = 0
	} else {
		yyv17 := &x.Delay
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Mode = ""
	} else {
		yyv19 := &x.Mode
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ReschedulePolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Attempts))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Attempts"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Attempts))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Interval"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Delay) {
				} else {
					r.EncodeInt(int64(x.Delay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Delay"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Delay) {
				} else {
					r.EncodeInt(int64(x.Delay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DelayFunction))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DelayFunction"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DelayFunction))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxDelay) {
				} else {
					r.EncodeInt(int64(x.MaxDelay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxDelay"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxDelay) {
				} else {
					r.EncodeInt(int64(x.MaxDelay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Unlimited))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Unlimited"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Unlimited))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ReschedulePolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ReschedulePolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Attempts":
			if r.TryDecodeAsNil() {
				x.Attempts = 0
			} else {
				yyv4 := &x.Attempts
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Interval":
			if r.TryDecodeAsNil() {
				x.Interval = 0
			} else {
				yyv6 := &x.Interval
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "Delay":
			if r.TryDecodeAsNil() {
				x.Delay = 0
			} else {
				yyv8 := &x.Delay
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "DelayFunction":
			if r.TryDecodeAsNil() {
				x.DelayFunction = ""
			} else {
				yyv10 := &x.DelayFunction
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "MaxDelay":
			if r.TryDecodeAsNil() {
				x.MaxDelay = 0
			} else {
				yyv12 := &x.MaxDelay
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "Unlimited":
			if r.TryDecodeAsNil() {
				x.Unlimited = false
			} else {
				yyv14 := &x.Unlimited
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ReschedulePolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Attempts = 0
	} else {
		yyv17 := &x.Attempts
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*int)(yyv17)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Interval = 0
	} else {
		yyv19 := &x.Interval
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Delay = 0
	} else {
		yyv21 := &x.Delay
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv21) {
		} else {
			*((*int64)(yyv21)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DelayFunction = ""
	} else {
		yyv23 := &x.DelayFunction
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxDelay = 0
	} else {
		yyv25 := &x.MaxDelay
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv25) {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Unlimited = false
	} else {
		yyv27 := &x.Unlimited
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *MigrateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.MaxParallel))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxParallel"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.MaxParallel))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HealthCheck))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HealthCheck"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.HealthCheck))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MinHealthyTime) {
				} else {
					r.EncodeInt(int64(x.MinHealthyTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinHealthyTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MinHealthyTime) {
				} else {
					r.EncodeInt(int64(x.MinHealthyTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.HealthyDeadline) {
				} else {
					r.EncodeInt(int64(x.HealthyDeadline))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HealthyDeadline"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.HealthyDeadline) {
				} else {
					r.EncodeInt(int64(x.HealthyDeadline))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *MigrateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *MigrateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "MaxParallel":
			if r.TryDecodeAsNil() {
				x.MaxParallel = 0
			} else {
				yyv4 := &x.MaxParallel
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "HealthCheck":
			if r.TryDecodeAsNil() {
				x.HealthCheck = ""
			} else {
				yyv6 := &x.HealthCheck
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinHealthyTime":
			if r.TryDecodeAsNil() {
				x.MinHealthyTime = 0
			} else {
				yyv8 := &x.MinHealthyTime
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "HealthyDeadline":
			if r.TryDecodeAsNil() {
				x.HealthyDeadline = 0
			} else {
				yyv10 := &x.HealthyDeadline
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *MigrateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxParallel = 0
	} else {
		yyv13 := &x.MaxParallel
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int)(yyv13)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HealthCheck = ""
	} else {
		yyv15 := &x.HealthCheck
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinHealthyTime = 0
	} else {
		yyv17 := &x.MinHealthyTime
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HealthyDeadline = 0
	} else {
		yyv19 := &x.HealthyDeadline
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *TaskGroup) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 12
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Count"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Update == nil {
					r.EncodeNil()
				} else {
					x.Update.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Update"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Update == nil {
					r.EncodeNil()
				} else {
					x.Update.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Migrate == nil {
					r.EncodeNil()
				} else {
					x.Migrate.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Migrate"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Migrate == nil {
					r.EncodeNil()
				} else {
					x.Migrate.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Constraints"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.RestartPolicy == nil {
					r.EncodeNil()
				} else {
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RestartPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.RestartPolicy == nil {
					r.EncodeNil()
				} else {
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						h.encSlicePtrtoTask(([]*Task)(x.Tasks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tasks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						h.encSlicePtrtoTask(([]*Task)(x.Tasks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.EphemeralDisk == nil {
					r.EncodeNil()
				} else {
					x.EphemeralDisk.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EphemeralDisk"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.EphemeralDisk == nil {
					r.EncodeNil()
				} else {
					x.EphemeralDisk.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ReschedulePolicy == nil {
					r.EncodeNil()
				} else {
					x.ReschedulePolicy.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ReschedulePolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ReschedulePolicy == nil {
					r.EncodeNil()
				} else {
					x.ReschedulePolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Affinities == nil {
					r.EncodeNil()
				} else {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						h.encSlicePtrtoAffinity(([]*Affinity)(x.Affinities), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Affinities"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Affinities == nil {
					r.EncodeNil()
				} else {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						h.encSlicePtrtoAffinity(([]*Affinity)(x.Affinities), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Spreads == nil {
					r.EncodeNil()
				} else {
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						h.encSlicePtrtoSpread(([]*Spread)(x.Spreads), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Spreads"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Spreads == nil {
					r.EncodeNil()
				} else {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						h.encSlicePtrtoSpread(([]*Spread)(x.Spreads), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *TaskGroup) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *TaskGroup) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				yyv6 := &x.Count
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Update":
			if r.TryDecodeAsNil() {
				if x.Update != nil {
					x.Update = nil
				}
			} else {
				if x.Update == nil {
					x.Update = new(UpdateStrategy)
				}
				x.Update.CodecDecodeSelf(d)
			}
		case "Migrate":
			if r.TryDecodeAsNil() {
				if x.Migrate != nil {
					x.Migrate = nil
				}
			} else {
				if x.Migrate == nil {
					x.Migrate = new(MigrateStrategy)
				}
				x.Migrate.CodecDecodeSelf(d)
			}
		case "Constraints":
			if r.TryDecodeAsNil() {
				x.Constraints = nil
			} else {
				yyv10 := &x.Constraints
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSlicePtrtoConstraint((*[]*Constraint)(yyv10), d)
				}
			}
		case "RestartPolicy":
			if r.TryDecodeAsNil() {
				if x.RestartPolicy != nil {
					x.RestartPolicy = nil
				}
			} else {
				if x.RestartPolicy == nil {
					x.RestartPolicy = new(RestartPolicy)
				}
				x.RestartPolicy.CodecDecodeSelf(d)
			}
		case "Tasks":
			if r.TryDecodeAsNil() {
				x.Tasks = nil
			} else {
				yyv13 := &x.Tasks
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					h.decSlicePtrtoTask((*[]*Task)(yyv13), d)
				}
			}
		case "EphemeralDisk":
			if r.TryDecodeAsNil() {
				if x.EphemeralDisk != nil {
					x.EphemeralDisk = nil
				}
			} else {
				if x.EphemeralDisk == nil {
					x.EphemeralDisk = new(EphemeralDisk)
				}
				x.EphemeralDisk.CodecDecodeSelf(d)
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv16 := &x.Meta
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					z.F.DecMapStringStringX(yyv16, false, d)
				}
			}
		case "ReschedulePolicy":
			if r.TryDecodeAsNil() {
				if x.ReschedulePolicy != nil {
					x.ReschedulePolicy = nil
				}
			} else {
				if x.ReschedulePolicy == nil {
					x.ReschedulePolicy = new(ReschedulePolicy)
				}
				x.ReschedulePolicy.CodecDecodeSelf(d)
			}
		case "Affinities":
			if r.TryDecodeAsNil() {
				x.Affinities = nil
			} else {
				yyv19 := &x.Affinities
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					h.decSlicePtrtoAffinity((*[]*Affinity)(yyv19), d)
				}
			}
		case "Spreads":
			if r.TryDecodeAsNil() {
				x.Spreads = nil
			} else {
				yyv21 := &x.Spreads
				yym22 := z.DecBinary()
				_ = yym22
				if false {
				} else {
					h.decSlicePtrtoSpread((*[]*Spread)(yyv21), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *TaskGroup) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj23 int
	var yyb23 bool
	var yyhl23 bool = l >= 0
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv24 := &x.Name
		yym25 := z.DecBinary()
		_ = yym25
		if false {
		} else {
			*((*string)(yyv24)) = r.DecodeString()
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		yyv26 := &x.Count
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else {
			*((*int)(yyv26)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Update != nil {
			x.Update = nil
		}
	} else {
		if x.Update == nil {
			x.Update = new(UpdateStrategy)
		}
		x.Update.CodecDecodeSelf(d)
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Migrate != nil {
			x.Migrate = nil
		}
	} else {
		if x.Migrate == nil {
			x.Migrate = new(MigrateStrategy)
		}
		x.Migrate.CodecDecodeSelf(d)
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Constraints = nil
	} else {
		yyv30 := &x.Constraints
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			h.decSlicePtrtoConstraint((*[]*Constraint)(yyv30), d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.RestartPolicy != nil {
			x.RestartPolicy = nil
		}
	} else {
		if x.RestartPolicy == nil {
			x.RestartPolicy = new(RestartPolicy)
		}
		x.RestartPolicy.CodecDecodeSelf(d)
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tasks = nil
	} else {
		yyv33 := &x.Tasks
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			h.decSlicePtrtoTask((*[]*Task)(yyv33), d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.EphemeralDisk != nil {
			x.EphemeralDisk = nil
		}
	} else {
		if x.EphemeralDisk == nil {
			x.EphemeralDisk = new(EphemeralDisk)
		}
		x.EphemeralDisk.CodecDecodeSelf(d)
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv36 := &x.Meta
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else {
			z.F.DecMapStringStringX(yyv36, false, d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.ReschedulePolicy != nil {
			x.ReschedulePolicy = nil
		}
	} else {
		if x.ReschedulePolicy == nil {
			x.ReschedulePolicy = new(ReschedulePolicy)
		}
		x.ReschedulePolicy.CodecDecodeSelf(d)
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Affinities = nil
	} else {
		yyv39 := &x.Affinities
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			h.decSlicePtrtoAffinity((*[]*Affinity)(yyv39), d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Spreads = nil
	} else {
		yyv41 := &x.Spreads
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			h.decSlicePtrtoSpread((*[]*Spread)(yyv41), d)
		}
	}
	for {
		yyj23++
		if yyhl23 {
			yyb23 = yyj23 > l
		} else {
			yyb23 = r.CheckBreak()
		}
		if yyb23 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj23-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *CheckRestart) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Limit))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Limit"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Limit))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Grace) {
				} else {
					r.EncodeInt(int64(x.Grace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Grace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Grace) {
				} else {
					r.EncodeInt(int64(x.Grace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.IgnoreWarnings))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("IgnoreWarnings"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.IgnoreWarnings))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *CheckRestart) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *CheckRestart) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Limit":
			if r.TryDecodeAsNil() {
				x.Limit = 0
			} else {
				yyv4 := &x.Limit
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Grace":
			if r.TryDecodeAsNil() {
				x.Grace = 0
			} else {
				yyv6 := &x.Grace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "IgnoreWarnings":
			if r.TryDecodeAsNil() {
				x.IgnoreWarnings = false
			} else {
				yyv8 := &x.IgnoreWarnings
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *CheckRestart) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Limit = 0
	} else {
		yyv11 := &x.Limit
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int)(yyv11)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Grace = 0
	} else {
		yyv13 := &x.Grace
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv13) {
		} else {
			*((*int64)(yyv13)) = int64(r.DecodeInt(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.IgnoreWarnings = false
	} else {
		yyv15 := &x.IgnoreWarnings
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ServiceCheck) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [17]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(17)
			} else {
				yynn2 = 17
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Command))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Command))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Args == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncSliceStringV(x.Args, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Args"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Args == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncSliceStringV(x.Args, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Path))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Protocol))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Protocol))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PortLabel))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PortLabel"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PortLabel))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AddressMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AddressMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AddressMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Interval"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Timeout) {
				} else {
					r.EncodeInt(int64(x.Timeout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Timeout"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Timeout) {
				} else {
					r.EncodeInt(int64(x.Timeout))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.InitialStatus))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("InitialStatus"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.InitialStatus))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeBool(bool(x.TLSSkipVerify))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TLSSkipVerify"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeBool(bool(x.TLSSkipVerify))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Method))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Method"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Method))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Header == nil {
					r.EncodeNil()
				} else {
					yym43 := z.EncBinary()
					_ = yym43
					if false {
					} else {
						h.encMapstringSlicestring((map[string][]string)(x.Header), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Header"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Header == nil {
					r.EncodeNil()
				} else {
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else {
						h.encMapstringSlicestring((map[string][]string)(x.Header), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.CheckRestart == nil {
					r.EncodeNil()
				} else {
					x.CheckRestart.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CheckRestart"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.CheckRestart == nil {
					r.EncodeNil()
				} else {
					x.CheckRestart.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym49 := z.EncBinary()
				_ = yym49
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.GRPCService))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("GRPCService"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym50 := z.EncBinary()
				_ = yym50
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.GRPCService))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym52 := z.EncBinary()
				_ = yym52
				if false {
				} else {
					r.EncodeBool(bool(x.GRPCUseTLS))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("GRPCUseTLS"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym53 := z.EncBinary()
				_ = yym53
				if false {
				} else {
					r.EncodeBool(bool(x.GRPCUseTLS))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ServiceCheck) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ServiceCheck) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv6 := &x.Type
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = ""
			} else {
				yyv8 := &x.Command
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv10 := &x.Args
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecSliceStringX(yyv10, false, d)
				}
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				yyv12 := &x.Path
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				yyv14 := &x.Protocol
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "PortLabel":
			if r.TryDecodeAsNil() {
				x.PortLabel = ""
			} else {
				yyv16 := &x.PortLabel
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AddressMode":
			if r.TryDecodeAsNil() {
				x.AddressMode = ""
			} else {
				yyv18 := &x.AddressMode
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Interval":
			if r.TryDecodeAsNil() {
				x.Interval = 0
			} else {
				yyv20 := &x.Interval
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv20) {
				} else {
					*((*int64)(yyv20)) = int64(r.DecodeInt(64))
				}
			}
		case "Timeout":
			if r.TryDecodeAsNil() {
				x.Timeout = 0
			} else {
				yyv22 := &x.Timeout
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv22) {
				} else {
					*((*int64)(yyv22)) = int64(r.DecodeInt(64))
				}
			}
		case "InitialStatus":
			if r.TryDecodeAsNil() {
				x.InitialStatus = ""
			} else {
				yyv24 := &x.InitialStatus
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "TLSSkipVerify":
			if r.TryDecodeAsNil() {
				x.TLSSkipVerify = false
			} else {
				yyv26 := &x.TLSSkipVerify
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*bool)(yyv26)) = r.DecodeBool()
				}
			}
		case "Method":
			if r.TryDecodeAsNil() {
				x.Method = ""
			} else {
				yyv28 := &x.Method
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		case "Header":
			if r.TryDecodeAsNil() {
				x.Header = nil
			} else {
				yyv30 := &x.Header
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					h.decMapstringSlicestring((*map[string][]string)(yyv30), d)
				}
			}
		case "CheckRestart":
			if r.TryDecodeAsNil() {
				if x.CheckRestart != nil {
					x.CheckRestart = nil
				}
			} else {
				if x.CheckRestart == nil {
					x.CheckRestart = new(CheckRestart)
				}
				x.CheckRestart.CodecDecodeSelf(d)
			}
		case "GRPCService":
			if r.TryDecodeAsNil() {
				x.GRPCService = ""
			} else {
				yyv33 := &x.GRPCService
				yym34 := z.DecBinary()
				_ = yym34
				if false {
				} else {
					*((*string)(yyv33)) = r.DecodeString()
				}
			}
		case "GRPCUseTLS":
			if r.TryDecodeAsNil() {
				x.GRPCUseTLS = false
			} else {
				yyv35 := &x.GRPCUseTLS
				yym36 := z.DecBinary()
				_ = yym36
				if false {
				} else {
					*((*bool)(yyv35)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ServiceCheck) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj37 int
	var yyb37 bool
	var yyhl37 bool = l >= 0
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv38 := &x.Name
		yym39 := z.DecBinary()
		_ = yym39
		if false {
		} else {
			*((*string)(yyv38)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv40 := &x.Type
		yym41 := z.DecBinary()
		_ = yym41
		if false {
		} else {
			*((*string)(yyv40)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Command = ""
	} else {
		yyv42 := &x.Command
		yym43 := z.DecBinary()
		_ = yym43
		if false {
		} else {
			*((*string)(yyv42)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv44 := &x.Args
		yym45 := z.DecBinary()
		_ = yym45
		if false {
		} else {
			z.F.DecSliceStringX(yyv44, false, d)
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		yyv46 := &x.Path
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else {
			*((*string)(yyv46)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		yyv48 := &x.Protocol
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			*((*string)(yyv48)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PortLabel = ""
	} else {
		yyv50 := &x.PortLabel
		yym51 := z.DecBinary()
		_ = yym51
		if false {
		} else {
			*((*string)(yyv50)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AddressMode = ""
	} else {
		yyv52 := &x.AddressMode
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			*((*string)(yyv52)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Interval = 0
	} else {
		yyv54 := &x.Interval
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv54) {
		} else {
			*((*int64)(yyv54)) = int64(r.DecodeInt(64))
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Timeout = 0
	} else {
		yyv56 := &x.Timeout
		yym57 := z.DecBinary()
		_ = yym57
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv56) {
		} else {
			*((*int64)(yyv56)) = int64(r.DecodeInt(64))
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.InitialStatus = ""
	} else {
		yyv58 := &x.InitialStatus
		yym59 := z.DecBinary()
		_ = yym59
		if false {
		} else {
			*((*string)(yyv58)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TLSSkipVerify = false
	} else {
		yyv60 := &x.TLSSkipVerify
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else {
			*((*bool)(yyv60)) = r.DecodeBool()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Method = ""
	} else {
		yyv62 := &x.Method
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			*((*string)(yyv62)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Header = nil
	} else {
		yyv64 := &x.Header
		yym65 := z.DecBinary()
		_ = yym65
		if false {
		} else {
			h.decMapstringSlicestring((*map[string][]string)(yyv64), d)
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.CheckRestart != nil {
			x.CheckRestart = nil
		}
	} else {
		if x.CheckRestart == nil {
			x.CheckRestart = new(CheckRestart)
		}
		x.CheckRestart.CodecDecodeSelf(d)
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.GRPCService = ""
	} else {
		yyv67 := &x.GRPCService
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.GRPCUseTLS = false
	} else {
		yyv69 := &x.GRPCUseTLS
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			*((*bool)(yyv69)) = r.DecodeBool()
		}
	}
	for {
		yyj37++
		if yyhl37 {
			yyb37 = yyj37 > l
		} else {
			yyb37 = r.CheckBreak()
		}
		if yyb37 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj37-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PortLabel))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PortLabel"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PortLabel))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AddressMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AddressMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AddressMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tags == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncSliceStringV(x.Tags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tags"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tags == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncSliceStringV(x.Tags, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.CanaryTags == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						z.F.EncSliceStringV(x.CanaryTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CanaryTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.CanaryTags == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						z.F.EncSliceStringV(x.CanaryTags, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Checks == nil {
					r.EncodeNil()
				} else {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						h.encSlicePtrtoServiceCheck(([]*ServiceCheck)(x.Checks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Checks"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Checks == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						h.encSlicePtrtoServiceCheck(([]*ServiceCheck)(x.Checks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "PortLabel":
			if r.TryDecodeAsNil() {
				x.PortLabel = ""
			} else {
				yyv6 := &x.PortLabel
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "AddressMode":
			if r.TryDecodeAsNil() {
				x.AddressMode = ""
			} else {
				yyv8 := &x.AddressMode
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Tags":
			if r.TryDecodeAsNil() {
				x.Tags = nil
			} else {
				yyv10 := &x.Tags
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecSliceStringX(yyv10, false, d)
				}
			}
		case "CanaryTags":
			if r.TryDecodeAsNil() {
				x.CanaryTags = nil
			} else {
				yyv12 := &x.CanaryTags
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					z.F.DecSliceStringX(yyv12, false, d)
				}
			}
		case "Checks":
			if r.TryDecodeAsNil() {
				x.Checks = nil
			} else {
				yyv14 := &x.Checks
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					h.decSlicePtrtoServiceCheck((*[]*ServiceCheck)(yyv14), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv17 := &x.Name
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PortLabel = ""
	} else {
		yyv19 := &x.PortLabel
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AddressMode = ""
	} else {
		yyv21 := &x.AddressMode
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tags = nil
	} else {
		yyv23 := &x.Tags
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			z.F.DecSliceStringX(yyv23, false, d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CanaryTags = nil
	} else {
		yyv25 := &x.CanaryTags
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			z.F.DecSliceStringX(yyv25, false, d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Checks = nil
	} else {
		yyv27 := &x.Checks
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			h.decSlicePtrtoServiceCheck((*[]*ServiceCheck)(yyv27), d)
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *LogConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.MaxFiles))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxFiles"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.MaxFiles))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.MaxFileSizeMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxFileSizeMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.MaxFileSizeMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *LogConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *LogConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "MaxFiles":
			if r.TryDecodeAsNil() {
				x.MaxFiles = 0
			} else {
				yyv4 := &x.MaxFiles
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "MaxFileSizeMB":
			if r.TryDecodeAsNil() {
				x.MaxFileSizeMB = 0
			} else {
				yyv6 := &x.MaxFileSizeMB
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *LogConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxFiles = 0
	} else {
		yyv9 := &x.MaxFiles
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*int)(yyv9)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxFileSizeMB = 0
	} else {
		yyv11 := &x.MaxFileSizeMB
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int)(yyv11)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Task) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [19]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(19)
			} else {
				yynn2 = 19
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Driver))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.User))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("User"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.User))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Config == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncMapStringIntfV(x.Config, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Config"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Config == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncMapStringIntfV(x.Config, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Env == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						z.F.EncMapStringStringV(x.Env, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Env"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Env == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						z.F.EncMapStringStringV(x.Env, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Services == nil {
					r.EncodeNil()
				} else {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						h.encSlicePtrtoService(([]*Service)(x.Services), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Services"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Services == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						h.encSlicePtrtoService(([]*Service)(x.Services), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Vault == nil {
					r.EncodeNil()
				} else {
					x.Vault.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Vault"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Vault == nil {
					r.EncodeNil()
				} else {
					x.Vault.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Templates == nil {
					r.EncodeNil()
				} else {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						h.encSlicePtrtoTemplate(([]*Template)(x.Templates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Templates"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Templates == nil {
					r.EncodeNil()
				} else {
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						h.encSlicePtrtoTemplate(([]*Template)(x.Templates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Constraints"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Affinities == nil {
					r.EncodeNil()
				} else {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						h.encSlicePtrtoAffinity(([]*Affinity)(x.Affinities), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Affinities"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Affinities == nil {
					r.EncodeNil()
				} else {
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						h.encSlicePtrtoAffinity(([]*Affinity)(x.Affinities), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Resources"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DispatchPayload == nil {
					r.EncodeNil()
				} else {
					x.DispatchPayload.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DispatchPayload"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DispatchPayload == nil {
					r.EncodeNil()
				} else {
					x.DispatchPayload.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else if z.HasExtensions() && z.EncExt(x.KillTimeout) {
				} else {
					r.EncodeInt(int64(x.KillTimeout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KillTimeout"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else if z.HasExtensions() && z.EncExt(x.KillTimeout) {
				} else {
					r.EncodeInt(int64(x.KillTimeout))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.LogConfig == nil {
					r.EncodeNil()
				} else {
					x.LogConfig.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LogConfig"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.LogConfig == nil {
					r.EncodeNil()
				} else {
					x.LogConfig.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Artifacts == nil {
					r.EncodeNil()
				} else {
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else {
						h.encSlicePtrtoTaskArtifact(([]*TaskArtifact)(x.Artifacts), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Artifacts"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Artifacts == nil {
					r.EncodeNil()
				} else {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						h.encSlicePtrtoTaskArtifact(([]*TaskArtifact)(x.Artifacts), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym52 := z.EncBinary()
				_ = yym52
				if false {
				} else {
					r.EncodeBool(bool(x.Leader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Leader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym53 := z.EncBinary()
				_ = yym53
				if false {
				} else {
					r.EncodeBool(bool(x.Leader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym55 := z.EncBinary()
				_ = yym55
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ShutdownDelay) {
				} else {
					r.EncodeInt(int64(x.ShutdownDelay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ShutdownDelay"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym56 := z.EncBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ShutdownDelay) {
				} else {
					r.EncodeInt(int64(x.ShutdownDelay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.KillSignal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KillSignal"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym59 := z.EncBinary()
				_ = yym59
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.KillSignal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Task) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Task) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				yyv6 := &x.Driver
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "User":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				yyv8 := &x.User
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Config":
			if r.TryDecodeAsNil() {
				x.Config = nil
			} else {
				yyv10 := &x.Config
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecMapStringIntfX(yyv10, false, d)
				}
			}
		case "Env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv12 := &x.Env
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					z.F.DecMapStringStringX(yyv12, false, d)
				}
			}
		case "Services":
			if r.TryDecodeAsNil() {
				x.Services = nil
			} else {
				yyv14 := &x.Services
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					h.decSlicePtrtoService((*[]*Service)(yyv14), d)
				}
			}
		case "Vault":
			if r.TryDecodeAsNil() {
				if x.Vault != nil {
					x.Vault = nil
				}
			} else {
				if x.Vault == nil {
					x.Vault = new(Vault)
				}
				x.Vault.CodecDecodeSelf(d)
			}
		case "Templates":
			if r.TryDecodeAsNil() {
				x.Templates = nil
			} else {
				yyv17 := &x.Templates
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					h.decSlicePtrtoTemplate((*[]*Template)(yyv17), d)
				}
			}
		case "Constraints":
			if r.TryDecodeAsNil() {
				x.Constraints = nil
			} else {
				yyv19 := &x.Constraints
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					h.decSlicePtrtoConstraint((*[]*Constraint)(yyv19), d)
				}
			}
		case "Affinities":
			if r.TryDecodeAsNil() {
				x.Affinities = nil
			} else {
				yyv21 := &x.Affinities
				yym22 := z.DecBinary()
				_ = yym22
				if false {
				} else {
					h.decSlicePtrtoAffinity((*[]*Affinity)(yyv21), d)
				}
			}
		case "Resources":
			if r.TryDecodeAsNil() {
				if x.Resources != nil {
					x.Resources = nil
				}
			} else {
				if x.Resources == nil {
					x.Resources = new(Resources)
				}
				x.Resources.CodecDecodeSelf(d)
			}
		case "DispatchPayload":
			if r.TryDecodeAsNil() {
				if x.DispatchPayload != nil {
					x.DispatchPayload = nil
				}
			} else {
				if x.DispatchPayload == nil {
					x.DispatchPayload = new(DispatchPayloadConfig)
				}
				x.DispatchPayload.CodecDecodeSelf(d)
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv25 := &x.Meta
				yym26 := z.DecBinary()
				_ = yym26
				if false {
				} else {
					z.F.DecMapStringStringX(yyv25, false, d)
				}
			}
		case "KillTimeout":
			if r.TryDecodeAsNil() {
				x.KillTimeout = 0
			} else {
				yyv27 := &x.KillTimeout
				yym28 := z.DecBinary()
				_ = yym28
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv27) {
				} else {
					*((*int64)(yyv27)) = int64(r.DecodeInt(64))
				}
			}
		case "LogConfig":
			if r.TryDecodeAsNil() {
				if x.LogConfig != nil {
					x.LogConfig = nil
				}
			} else {
				if x.LogConfig == nil {
					x.LogConfig = new(LogConfig)
				}
				x.LogConfig.CodecDecodeSelf(d)
			}
		case "Artifacts":
			if r.TryDecodeAsNil() {
				x.Artifacts = nil
			} else {
				yyv30 := &x.Artifacts
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					h.decSlicePtrtoTaskArtifact((*[]*TaskArtifact)(yyv30), d)
				}
			}
		case "Leader":
			if r.TryDecodeAsNil() {
				x.Leader = false
			} else {
				yyv32 := &x.Leader
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*bool)(yyv32)) = r.DecodeBool()
				}
			}
		case "ShutdownDelay":
			if r.TryDecodeAsNil() {
				x.ShutdownDelay = 0
			} else {
				yyv34 := &x.ShutdownDelay
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv34) {
				} else {
					*((*int64)(yyv34)) = int64(r.DecodeInt(64))
				}
			}
		case "KillSignal":
			if r.TryDecodeAsNil() {
				x.KillSignal = ""
			} else {
				yyv36 := &x.KillSignal
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					*((*string)(yyv36)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Task) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj38 int
	var yyb38 bool
	var yyhl38 bool = l >= 0
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv39 := &x.Name
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		yyv41 := &x.Driver
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		yyv43 := &x.User
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Config = nil
	} else {
		yyv45 := &x.Config
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			z.F.DecMapStringIntfX(yyv45, false, d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv47 := &x.Env
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			z.F.DecMapStringStringX(yyv47, false, d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Services = nil
	} else {
		yyv49 := &x.Services
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			h.decSlicePtrtoService((*[]*Service)(yyv49), d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Vault != nil {
			x.Vault = nil
		}
	} else {
		if x.Vault == nil {
			x.Vault = new(Vault)
		}
		x.Vault.CodecDecodeSelf(d)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Templates = nil
	} else {
		yyv52 := &x.Templates
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			h.decSlicePtrtoTemplate((*[]*Template)(yyv52), d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Constraints = nil
	} else {
		yyv54 := &x.Constraints
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			h.decSlicePtrtoConstraint((*[]*Constraint)(yyv54), d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Affinities = nil
	} else {
		yyv56 := &x.Affinities
		yym57 := z.DecBinary()
		_ = yym57
		if false {
		} else {
			h.decSlicePtrtoAffinity((*[]*Affinity)(yyv56), d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Resources != nil {
			x.Resources = nil
		}
	} else {
		if x.Resources == nil {
			x.Resources = new(Resources)
		}
		x.Resources.CodecDecodeSelf(d)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.DispatchPayload != nil {
			x.DispatchPayload = nil
		}
	} else {
		if x.DispatchPayload == nil {
			x.DispatchPayload = new(DispatchPayloadConfig)
		}
		x.DispatchPayload.CodecDecodeSelf(d)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv60 := &x.Meta
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else {
			z.F.DecMapStringStringX(yyv60, false, d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KillTimeout = 0
	} else {
		yyv62 := &x.KillTimeout
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv62) {
		} else {
			*((*int64)(yyv62)) = int64(r.DecodeInt(64))
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.LogConfig != nil {
			x.LogConfig = nil
		}
	} else {
		if x.LogConfig == nil {
			x.LogConfig = new(LogConfig)
		}
		x.LogConfig.CodecDecodeSelf(d)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Artifacts = nil
	} else {
		yyv65 := &x.Artifacts
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			h.decSlicePtrtoTaskArtifact((*[]*TaskArtifact)(yyv65), d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Leader = false
	} else {
		yyv67 := &x.Leader
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*bool)(yyv67)) = r.DecodeBool()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ShutdownDelay = 0
	} else {
		yyv69 := &x.ShutdownDelay
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv69) {
		} else {
			*((*int64)(yyv69)) = int64(r.DecodeInt(64))
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KillSignal = ""
	} else {
		yyv71 := &x.KillSignal
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			*((*string)(yyv71)) = r.DecodeString()
		}
	}
	for {
		yyj38++
		if yyhl38 {
			yyb38 = yyj38 > l
		} else {
			yyb38 = r.CheckBreak()
		}
		if yyb38 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj38-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Template) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [11]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(11)
			} else {
				yynn2 = 11
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SourcePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SourcePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SourcePath))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DestPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DestPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DestPath))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EmbeddedTmpl))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EmbeddedTmpl"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EmbeddedTmpl))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ChangeMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ChangeMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ChangeMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ChangeSignal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ChangeSignal"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ChangeSignal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Splay) {
				} else {
					r.EncodeInt(int64(x.Splay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Splay"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Splay) {
				} else {
					r.EncodeInt(int64(x.Splay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Perms))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Perms"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Perms))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.LeftDelim))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LeftDelim"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.LeftDelim))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RightDelim))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RightDelim"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RightDelim))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.Envvars))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Envvars"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.Envvars))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else if z.HasExtensions() && z.EncExt(x.VaultGrace) {
				} else {
					r.EncodeInt(int64(x.VaultGrace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("VaultGrace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else if z.HasExtensions() && z.EncExt(x.VaultGrace) {
				} else {
					r.EncodeInt(int64(x.VaultGrace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Template) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Template) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "SourcePath":
			if r.TryDecodeAsNil() {
				x.SourcePath = ""
			} else {
				yyv4 := &x.SourcePath
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "DestPath":
			if r.TryDecodeAsNil() {
				x.DestPath = ""
			} else {
				yyv6 := &x.DestPath
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "EmbeddedTmpl":
			if r.TryDecodeAsNil() {
				x.EmbeddedTmpl = ""
			} else {
				yyv8 := &x.EmbeddedTmpl
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "ChangeMode":
			if r.TryDecodeAsNil() {
				x.ChangeMode = ""
			} else {
				yyv10 := &x.ChangeMode
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "ChangeSignal":
			if r.TryDecodeAsNil() {
				x.ChangeSignal = ""
			} else {
				yyv12 := &x.ChangeSignal
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Splay":
			if r.TryDecodeAsNil() {
				x.Splay = 0
			} else {
				yyv14 := &x.Splay
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "Perms":
			if r.TryDecodeAsNil() {
				x.Perms = ""
			} else {
				yyv16 := &x.Perms
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "LeftDelim":
			if r.TryDecodeAsNil() {
				x.LeftDelim = ""
			} else {
				yyv18 := &x.LeftDelim
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "RightDelim":
			if r.TryDecodeAsNil() {
				x.RightDelim = ""
			} else {
				yyv20 := &x.RightDelim
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "Envvars":
			if r.TryDecodeAsNil() {
				x.Envvars = false
			} else {
				yyv22 := &x.Envvars
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		case "VaultGrace":
			if r.TryDecodeAsNil() {
				x.VaultGrace = 0
			} else {
				yyv24 := &x.VaultGrace
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv24) {
				} else {
					*((*int64)(yyv24)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Template) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SourcePath = ""
	} else {
		yyv27 := &x.SourcePath
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DestPath = ""
	} else {
		yyv29 := &x.DestPath
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EmbeddedTmpl = ""
	} else {
		yyv31 := &x.EmbeddedTmpl
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ChangeMode = ""
	} else {
		yyv33 := &x.ChangeMode
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ChangeSignal = ""
	} else {
		yyv35 := &x.ChangeSignal
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Splay = 0
	} else {
		yyv37 := &x.Splay
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv37) {
		} else {
			*((*int64)(yyv37)) = int64(r.DecodeInt(64))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Perms = ""
	} else {
		yyv39 := &x.Perms
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LeftDelim = ""
	} else {
		yyv41 := &x.LeftDelim
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RightDelim = ""
	} else {
		yyv43 := &x.RightDelim
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Envvars = false
	} else {
		yyv45 := &x.Envvars
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*bool)(yyv45)) = r.DecodeBool()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.VaultGrace = 0
	} else {
		yyv47 := &x.VaultGrace
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv47) {
		} else {
			*((*int64)(yyv47)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *TaskState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.State))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("State"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.State))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Failed))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Failed"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Failed))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Restarts))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Restarts"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Restarts))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy13 := &x.LastRestart
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if yym15 := z.TimeRtidIfBinc(); yym15 != 0 {
					r.EncodeBuiltin(yym15, yy13)
				} else if z.HasExtensions() && z.EncExt(yy13) {
				} else if yym14 {
					z.EncBinaryMarshal(yy13)
				} else if !yym14 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy13)
				} else {
					z.EncFallback(yy13)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastRestart"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy16 := &x.LastRestart
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
					r.EncodeBuiltin(yym18, yy16)
				} else if z.HasExtensions() && z.EncExt(yy16) {
				} else if yym17 {
					z.EncBinaryMarshal(yy16)
				} else if !yym17 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy16)
				} else {
					z.EncFallback(yy16)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy20 := &x.StartedAt
				yym21 := z.EncBinary()
				_ = yym21
				if false {
				} else if yym22 := z.TimeRtidIfBinc(); yym22 != 0 {
					r.EncodeBuiltin(yym22, yy20)
				} else if z.HasExtensions() && z.EncExt(yy20) {
				} else if yym21 {
					z.EncBinaryMarshal(yy20)
				} else if !yym21 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy20)
				} else {
					z.EncFallback(yy20)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("StartedAt"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy23 := &x.StartedAt
				yym24 := z.EncBinary()
				_ = yym24
				if false {
				} else if yym25 := z.TimeRtidIfBinc(); yym25 != 0 {
					r.EncodeBuiltin(yym25, yy23)
				} else if z.HasExtensions() && z.EncExt(yy23) {
				} else if yym24 {
					z.EncBinaryMarshal(yy23)
				} else if !yym24 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy23)
				} else {
					z.EncFallback(yy23)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy27 := &x.FinishedAt
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else if yym29 := z.TimeRtidIfBinc(); yym29 != 0 {
					r.EncodeBuiltin(yym29, yy27)
				} else if z.HasExtensions() && z.EncExt(yy27) {
				} else if yym28 {
					z.EncBinaryMarshal(yy27)
				} else if !yym28 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy27)
				} else {
					z.EncFallback(yy27)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("FinishedAt"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy30 := &x.FinishedAt
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else if yym32 := z.TimeRtidIfBinc(); yym32 != 0 {
					r.EncodeBuiltin(yym32, yy30)
				} else if z.HasExtensions() && z.EncExt(yy30) {
				} else if yym31 {
					z.EncBinaryMarshal(yy30)
				} else if !yym31 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy30)
				} else {
					z.EncFallback(yy30)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Events == nil {
					r.EncodeNil()
				} else {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						h.encSlicePtrtoTaskEvent(([]*TaskEvent)(x.Events), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Events"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Events == nil {
					r.EncodeNil()
				} else {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						h.encSlicePtrtoTaskEvent(([]*TaskEvent)(x.Events), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *TaskState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *TaskState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "State":
			if r.TryDecodeAsNil() {
				x.State = ""
			} else {
				yyv4 := &x.State
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Failed":
			if r.TryDecodeAsNil() {
				x.Failed = false
			} else {
				yyv6 := &x.Failed
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Restarts":
			if r.TryDecodeAsNil() {
				x.Restarts = 0
			} else {
				yyv8 := &x.Restarts
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastRestart":
			if r.TryDecodeAsNil() {
				x.LastRestart = time.Time{}
			} else {
				yyv10 := &x.LastRestart
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
					r.DecodeBuiltin(yym12, yyv10)
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else if yym11 {
					z.DecBinaryUnmarshal(yyv10)
				} else if !yym11 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv10)
				} else {
					z.DecFallback(yyv10, false)
				}
			}
		case "StartedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = time.Time{}
			} else {
				yyv13 := &x.StartedAt
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else if yym15 := z.TimeRtidIfBinc(); yym15 != 0 {
					r.DecodeBuiltin(yym15, yyv13)
				} else if z.HasExtensions() && z.DecExt(yyv13) {
				} else if yym14 {
					z.DecBinaryUnmarshal(yyv13)
				} else if !yym14 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv13)
				} else {
					z.DecFallback(yyv13, false)
				}
			}
		case "FinishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = time.Time{}
			} else {
				yyv16 := &x.FinishedAt
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
					r.DecodeBuiltin(yym18, yyv16)
				} else if z.HasExtensions() && z.DecExt(yyv16) {
				} else if yym17 {
					z.DecBinaryUnmarshal(yyv16)
				} else if !yym17 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv16)
				} else {
					z.DecFallback(yyv16, false)
				}
			}
		case "Events":
			if r.TryDecodeAsNil() {
				x.Events = nil
			} else {
				yyv19 := &x.Events
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					h.decSlicePtrtoTaskEvent((*[]*TaskEvent)(yyv19), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *TaskState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj21 int
	var yyb21 bool
	var yyhl21 bool = l >= 0
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.State = ""
	} else {
		yyv22 := &x.State
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else {
			*((*string)(yyv22)) = r.DecodeString()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Failed = false
	} else {
		yyv24 := &x.Failed
		yym25 := z.DecBinary()
		_ = yym25
		if false {
		} else {
			*((*bool)(yyv24)) = r.DecodeBool()
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Restarts = 0
	} else {
		yyv26 := &x.Restarts
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else {
			*((*uint64)(yyv26)) = uint64(r.DecodeUint(64))
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastRestart = time.Time{}
	} else {
		yyv28 := &x.LastRestart
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else if yym30 := z.TimeRtidIfBinc(); yym30 != 0 {
			r.DecodeBuiltin(yym30, yyv28)
		} else if z.HasExtensions() && z.DecExt(yyv28) {
		} else if yym29 {
			z.DecBinaryUnmarshal(yyv28)
		} else if !yym29 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv28)
		} else {
			z.DecFallback(yyv28, false)
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StartedAt = time.Time{}
	} else {
		yyv31 := &x.StartedAt
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if yym33 := z.TimeRtidIfBinc(); yym33 != 0 {
			r.DecodeBuiltin(yym33, yyv31)
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else if yym32 {
			z.DecBinaryUnmarshal(yyv31)
		} else if !yym32 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv31)
		} else {
			z.DecFallback(yyv31, false)
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.FinishedAt = time.Time{}
	} else {
		yyv34 := &x.FinishedAt
		yym35 := z.DecBinary()
		_ = yym35
		if false {
		} else if yym36 := z.TimeRtidIfBinc(); yym36 != 0 {
			r.DecodeBuiltin(yym36, yyv34)
		} else if z.HasExtensions() && z.DecExt(yyv34) {
		} else if yym35 {
			z.DecBinaryUnmarshal(yyv34)
		} else if !yym35 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv34)
		} else {
			z.DecFallback(yyv34, false)
		}
	}
	yyj21++
	if yyhl21 {
		yyb21 = yyj21 > l
	} else {
		yyb21 = r.CheckBreak()
	}
	if yyb21 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Events = nil
	} else {
		yyv37 := &x.Events
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			h.decSlicePtrtoTaskEvent((*[]*TaskEvent)(yyv37), d)
		}
	}
	for {
		yyj21++
		if yyhl21 {
			yyb21 = yyj21 > l
		} else {
			yyb21 = r.CheckBreak()
		}
		if yyb21 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj21-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *TaskEvent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [24]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(24)
			} else {
				yynn2 = 24
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Time"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Message"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Message))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DisplayMessage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DisplayMessage"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DisplayMessage))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Details == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						z.F.EncMapStringStringV(x.Details, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Details"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Details == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						z.F.EncMapStringStringV(x.Details, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.FailsTask))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("FailsTask"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.FailsTask))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RestartReason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RestartReason"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RestartReason))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SetupError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SetupError"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SetupError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DriverError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DriverError"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DriverError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ExitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeInt(int64(x.Signal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Signal"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeInt(int64(x.Signal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else if z.HasExtensions() && z.EncExt(x.KillTimeout) {
				} else {
					r.EncodeInt(int64(x.KillTimeout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KillTimeout"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else if z.HasExtensions() && z.EncExt(x.KillTimeout) {
				} else {
					r.EncodeInt(int64(x.KillTimeout))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.KillError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KillError"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.KillError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.KillReason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KillReason"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.KillReason))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym46 := z.EncBinary()
				_ = yym46
				if false {
				} else {
					r.EncodeInt(int64(x.StartDelay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("StartDelay"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym47 := z.EncBinary()
				_ = yym47
				if false {
				} else {
					r.EncodeInt(int64(x.StartDelay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym49 := z.EncBinary()
				_ = yym49
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DownloadError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DownloadError"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym50 := z.EncBinary()
				_ = yym50
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DownloadError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym52 := z.EncBinary()
				_ = yym52
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ValidationError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ValidationError"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym53 := z.EncBinary()
				_ = yym53
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ValidationError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym55 := z.EncBinary()
				_ = yym55
				if false {
				} else {
					r.EncodeInt(int64(x.DiskLimit))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DiskLimit"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym56 := z.EncBinary()
				_ = yym56
				if false {
				} else {
					r.EncodeInt(int64(x.DiskLimit))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.FailedSibling))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("FailedSibling"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym59 := z.EncBinary()
				_ = yym59
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.FailedSibling))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym61 := z.EncBinary()
				_ = yym61
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.VaultError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("VaultError"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym62 := z.EncBinary()
				_ = yym62
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.VaultError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym64 := z.EncBinary()
				_ = yym64
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TaskSignalReason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TaskSignalReason"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym65 := z.EncBinary()
				_ = yym65
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TaskSignalReason))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TaskSignal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TaskSignal"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym68 := z.EncBinary()
				_ = yym68
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TaskSignal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym70 := z.EncBinary()
				_ = yym70
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DriverMessage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DriverMessage"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym71 := z.EncBinary()
				_ = yym71
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DriverMessage))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym73 := z.EncBinary()
				_ = yym73
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.GenericSource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("GenericSource"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym74 := z.EncBinary()
				_ = yym74
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.GenericSource))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *TaskEvent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *TaskEvent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv4 := &x.Type
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Time":
			if r.TryDecodeAsNil() {
				x.Time = 0
			} else {
				yyv6 := &x.Time
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "Message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				yyv8 := &x.Message
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "DisplayMessage":
			if r.TryDecodeAsNil() {
				x.DisplayMessage = ""
			} else {
				yyv10 := &x.DisplayMessage
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Details":
			if r.TryDecodeAsNil() {
				x.Details = nil
			} else {
				yyv12 := &x.Details
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					z.F.DecMapStringStringX(yyv12, false, d)
				}
			}
		case "FailsTask":
			if r.TryDecodeAsNil() {
				x.FailsTask = false
			} else {
				yyv14 := &x.FailsTask
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "RestartReason":
			if r.TryDecodeAsNil() {
				x.RestartReason = ""
			} else {
				yyv16 := &x.RestartReason
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "SetupError":
			if r.TryDecodeAsNil() {
				x.SetupError = ""
			} else {
				yyv18 := &x.SetupError
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "DriverError":
			if r.TryDecodeAsNil() {
				x.DriverError = ""
			} else {
				yyv20 := &x.DriverError
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "ExitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				yyv22 := &x.ExitCode
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*int)(yyv22)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				yyv24 := &x.Signal
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*int)(yyv24)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "KillTimeout":
			if r.TryDecodeAsNil() {
				x.KillTimeout = 0
			} else {
				yyv26 := &x.KillTimeout
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv26) {
				} else {
					*((*int64)(yyv26)) = int64(r.DecodeInt(64))
				}
			}
		case "KillError":
			if r.TryDecodeAsNil() {
				x.KillError = ""
			} else {
				yyv28 := &x.KillError
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		case "KillReason":
			if r.TryDecodeAsNil() {
				x.KillReason = ""
			} else {
				yyv30 := &x.KillReason
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*string)(yyv30)) = r.DecodeString()
				}
			}
		case "StartDelay":
			if r.TryDecodeAsNil() {
				x.StartDelay = 0
			} else {
				yyv32 := &x.StartDelay
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*int64)(yyv32)) = int64(r.DecodeInt(64))
				}
			}
		case "DownloadError":
			if r.TryDecodeAsNil() {
				x.DownloadError = ""
			} else {
				yyv34 := &x.DownloadError
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else {
					*((*string)(yyv34)) = r.DecodeString()
				}
			}
		case "ValidationError":
			if r.TryDecodeAsNil() {
				x.ValidationError = ""
			} else {
				yyv36 := &x.ValidationError
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					*((*string)(yyv36)) = r.DecodeString()
				}
			}
		case "DiskLimit":
			if r.TryDecodeAsNil() {
				x.DiskLimit = 0
			} else {
				yyv38 := &x.DiskLimit
				yym39 := z.DecBinary()
				_ = yym39
				if false {
				} else {
					*((*int64)(yyv38)) = int64(r.DecodeInt(64))
				}
			}
		case "FailedSibling":
			if r.TryDecodeAsNil() {
				x.FailedSibling = ""
			} else {
				yyv40 := &x.FailedSibling
				yym41 := z.DecBinary()
				_ = yym41
				if false {
				} else {
					*((*string)(yyv40)) = r.DecodeString()
				}
			}
		case "VaultError":
			if r.TryDecodeAsNil() {
				x.VaultError = ""
			} else {
				yyv42 := &x.VaultError
				yym43 := z.DecBinary()
				_ = yym43
				if false {
				} else {
					*((*string)(yyv42)) = r.DecodeString()
				}
			}
		case "TaskSignalReason":
			if r.TryDecodeAsNil() {
				x.TaskSignalReason = ""
			} else {
				yyv44 := &x.TaskSignalReason
				yym45 := z.DecBinary()
				_ = yym45
				if false {
				} else {
					*((*string)(yyv44)) = r.DecodeString()
				}
			}
		case "TaskSignal":
			if r.TryDecodeAsNil() {
				x.TaskSignal = ""
			} else {
				yyv46 := &x.TaskSignal
				yym47 := z.DecBinary()
				_ = yym47
				if false {
				} else {
					*((*string)(yyv46)) = r.DecodeString()
				}
			}
		case "DriverMessage":
			if r.TryDecodeAsNil() {
				x.DriverMessage = ""
			} else {
				yyv48 := &x.DriverMessage
				yym49 := z.DecBinary()
				_ = yym49
				if false {
				} else {
					*((*string)(yyv48)) = r.DecodeString()
				}
			}
		case "GenericSource":
			if r.TryDecodeAsNil() {
				x.GenericSource = ""
			} else {
				yyv50 := &x.GenericSource
				yym51 := z.DecBinary()
				_ = yym51
				if false {
				} else {
					*((*string)(yyv50)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *TaskEvent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj52 int
	var yyb52 bool
	var yyhl52 bool = l >= 0
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv53 := &x.Type
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*string)(yyv53)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Time = 0
	} else {
		yyv55 := &x.Time
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*int64)(yyv55)) = int64(r.DecodeInt(64))
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		yyv57 := &x.Message
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			*((*string)(yyv57)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DisplayMessage = ""
	} else {
		yyv59 := &x.DisplayMessage
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			*((*string)(yyv59)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Details = nil
	} else {
		yyv61 := &x.Details
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			z.F.DecMapStringStringX(yyv61, false, d)
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.FailsTask = false
	} else {
		yyv63 := &x.FailsTask
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*bool)(yyv63)) = r.DecodeBool()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RestartReason = ""
	} else {
		yyv65 := &x.RestartReason
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			*((*string)(yyv65)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SetupError = ""
	} else {
		yyv67 := &x.SetupError
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DriverError = ""
	} else {
		yyv69 := &x.DriverError
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			*((*string)(yyv69)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		yyv71 := &x.ExitCode
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			*((*int)(yyv71)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		yyv73 := &x.Signal
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else {
			*((*int)(yyv73)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KillTimeout = 0
	} else {
		yyv75 := &x.KillTimeout
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv75) {
		} else {
			*((*int64)(yyv75)) = int64(r.DecodeInt(64))
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KillError = ""
	} else {
		yyv77 := &x.KillError
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			*((*string)(yyv77)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KillReason = ""
	} else {
		yyv79 := &x.KillReason
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			*((*string)(yyv79)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StartDelay = 0
	} else {
		yyv81 := &x.StartDelay
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else {
			*((*int64)(yyv81)) = int64(r.DecodeInt(64))
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DownloadError = ""
	} else {
		yyv83 := &x.DownloadError
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else {
			*((*string)(yyv83)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ValidationError = ""
	} else {
		yyv85 := &x.ValidationError
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*string)(yyv85)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DiskLimit = 0
	} else {
		yyv87 := &x.DiskLimit
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			*((*int64)(yyv87)) = int64(r.DecodeInt(64))
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.FailedSibling = ""
	} else {
		yyv89 := &x.FailedSibling
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*string)(yyv89)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.VaultError = ""
	} else {
		yyv91 := &x.VaultError
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			*((*string)(yyv91)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskSignalReason = ""
	} else {
		yyv93 := &x.TaskSignalReason
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			*((*string)(yyv93)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskSignal = ""
	} else {
		yyv95 := &x.TaskSignal
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			*((*string)(yyv95)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DriverMessage = ""
	} else {
		yyv97 := &x.DriverMessage
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			*((*string)(yyv97)) = r.DecodeString()
		}
	}
	yyj52++
	if yyhl52 {
		yyb52 = yyj52 > l
	} else {
		yyb52 = r.CheckBreak()
	}
	if yyb52 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.GenericSource = ""
	} else {
		yyv99 := &x.GenericSource
		yym100 := z.DecBinary()
		_ = yym100
		if false {
		} else {
			*((*string)(yyv99)) = r.DecodeString()
		}
	}
	for {
		yyj52++
		if yyhl52 {
			yyb52 = yyj52 > l
		} else {
			yyb52 = r.CheckBreak()
		}
		if yyb52 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj52-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *TaskArtifact) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.GetterSource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("GetterSource"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.GetterSource))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.GetterOptions == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringStringV(x.GetterOptions, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("GetterOptions"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.GetterOptions == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringStringV(x.GetterOptions, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.GetterMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("GetterMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.GetterMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RelativeDest))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RelativeDest"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RelativeDest))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *TaskArtifact) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *TaskArtifact) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "GetterSource":
			if r.TryDecodeAsNil() {
				x.GetterSource = ""
			} else {
				yyv4 := &x.GetterSource
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "GetterOptions":
			if r.TryDecodeAsNil() {
				x.GetterOptions = nil
			} else {
				yyv6 := &x.GetterOptions
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringStringX(yyv6, false, d)
				}
			}
		case "GetterMode":
			if r.TryDecodeAsNil() {
				x.GetterMode = ""
			} else {
				yyv8 := &x.GetterMode
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "RelativeDest":
			if r.TryDecodeAsNil() {
				x.RelativeDest = ""
			} else {
				yyv10 := &x.RelativeDest
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *TaskArtifact) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.GetterSource = ""
	} else {
		yyv13 := &x.GetterSource
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.GetterOptions = nil
	} else {
		yyv15 := &x.GetterOptions
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecMapStringStringX(yyv15, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.GetterMode = ""
	} else {
		yyv17 := &x.GetterMode
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RelativeDest = ""
	} else {
		yyv19 := &x.RelativeDest
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Constraint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.LTarget))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LTarget"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.LTarget))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RTarget))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RTarget"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RTarget))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Operand))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Operand"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Operand))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Constraint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Constraint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "LTarget":
			if r.TryDecodeAsNil() {
				x.LTarget = ""
			} else {
				yyv4 := &x.LTarget
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "RTarget":
			if r.TryDecodeAsNil() {
				x.RTarget = ""
			} else {
				yyv6 := &x.RTarget
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Operand":
			if r.TryDecodeAsNil() {
				x.Operand = ""
			} else {
				yyv8 := &x.Operand
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Constraint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LTarget = ""
	} else {
		yyv11 := &x.LTarget
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RTarget = ""
	} else {
		yyv13 := &x.RTarget
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Operand = ""
	} else {
		yyv15 := &x.Operand
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x Constraints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encConstraints((Constraints)(x), e)
		}
	}
}

func (x *Constraints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decConstraints((*Constraints)(x), d)
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.LTarget))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LTarget"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.LTarget))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RTarget))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RTarget"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.RTarget))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Operand))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Operand"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Operand))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "LTarget":
			if r.TryDecodeAsNil() {
				x.LTarget = ""
			} else {
				yyv4 := &x.LTarget
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "RTarget":
			if r.TryDecodeAsNil() {
				x.RTarget = ""
			} else {
				yyv6 := &x.RTarget
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Operand":
			if r.TryDecodeAsNil() {
				x.Operand = ""
			} else {
				yyv8 := &x.Operand
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				yyv10 := &x.Weight
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int8)(yyv10)) = int8(r.DecodeInt(8))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LTarget = ""
	} else {
		yyv13 := &x.LTarget
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RTarget = ""
	} else {
		yyv15 := &x.RTarget
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Operand = ""
	} else {
		yyv17 := &x.Operand
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		yyv19 := &x.Weight
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*int8)(yyv19)) = int8(r.DecodeInt(8))
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Spread) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Attribute))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Attribute"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Attribute))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.SpreadTarget == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePtrtoSpreadTarget(([]*SpreadTarget)(x.SpreadTarget), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SpreadTarget"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.SpreadTarget == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePtrtoSpreadTarget(([]*SpreadTarget)(x.SpreadTarget), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Spread) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Spread) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Attribute":
			if r.TryDecodeAsNil() {
				x.Attribute = ""
			} else {
				yyv4 := &x.Attribute
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				yyv6 := &x.Weight
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int8)(yyv6)) = int8(r.DecodeInt(8))
				}
			}
		case "SpreadTarget":
			if r.TryDecodeAsNil() {
				x.SpreadTarget = nil
			} else {
				yyv8 := &x.SpreadTarget
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSlicePtrtoSpreadTarget((*[]*SpreadTarget)(yyv8), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Spread) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Attribute = ""
	} else {
		yyv11 := &x.Attribute
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		yyv13 := &x.Weight
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int8)(yyv13)) = int8(r.DecodeInt(8))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SpreadTarget = nil
	} else {
		yyv15 := &x.SpreadTarget
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decSlicePtrtoSpreadTarget((*[]*SpreadTarget)(yyv15), d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x Affinities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encAffinities((Affinities)(x), e)
		}
	}
}

func (x *Affinities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decAffinities((*Affinities)(x), d)
	}
}

func (x *SpreadTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Value"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Value))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Percent))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Percent"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Percent))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SpreadTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SpreadTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				yyv4 := &x.Value
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Percent":
			if r.TryDecodeAsNil() {
				x.Percent = 0
			} else {
				yyv6 := &x.Percent
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint8)(yyv6)) = uint8(r.DecodeUint(8))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SpreadTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		yyv9 := &x.Value
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Percent = 0
	} else {
		yyv11 := &x.Percent
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint8)(yyv11)) = uint8(r.DecodeUint(8))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *EphemeralDisk) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Sticky))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Sticky"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Sticky))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.SizeMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SizeMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.SizeMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.Migrate))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Migrate"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.Migrate))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *EphemeralDisk) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *EphemeralDisk) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Sticky":
			if r.TryDecodeAsNil() {
				x.Sticky = false
			} else {
				yyv4 := &x.Sticky
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "SizeMB":
			if r.TryDecodeAsNil() {
				x.SizeMB = 0
			} else {
				yyv6 := &x.SizeMB
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Migrate":
			if r.TryDecodeAsNil() {
				x.Migrate = false
			} else {
				yyv8 := &x.Migrate
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *EphemeralDisk) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Sticky = false
	} else {
		yyv11 := &x.Sticky
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*bool)(yyv11)) = r.DecodeBool()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SizeMB = 0
	} else {
		yyv13 := &x.SizeMB
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int)(yyv13)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Migrate = false
	} else {
		yyv15 := &x.Migrate
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Vault) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Policies, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Policies"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Policies, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Env))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Env"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Env))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ChangeMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ChangeMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ChangeMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ChangeSignal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ChangeSignal"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ChangeSignal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Vault) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Vault) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Policies":
			if r.TryDecodeAsNil() {
				x.Policies = nil
			} else {
				yyv4 := &x.Policies
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Env":
			if r.TryDecodeAsNil() {
				x.Env = false
			} else {
				yyv6 := &x.Env
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "ChangeMode":
			if r.TryDecodeAsNil() {
				x.ChangeMode = ""
			} else {
				yyv8 := &x.ChangeMode
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "ChangeSignal":
			if r.TryDecodeAsNil() {
				x.ChangeSignal = ""
			} else {
				yyv10 := &x.ChangeSignal
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Vault) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Policies = nil
	} else {
		yyv13 := &x.Policies
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecSliceStringX(yyv13, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Env = false
	} else {
		yyv15 := &x.Env
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ChangeMode = ""
	} else {
		yyv17 := &x.ChangeMode
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ChangeSignal = ""
	} else {
		yyv19 := &x.ChangeSignal
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 12
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.JobVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.JobVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.JobSpecModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobSpecModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.JobSpecModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeUint(uint64(x.JobCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeUint(uint64(x.JobCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.TaskGroups == nil {
					r.EncodeNil()
				} else {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						h.encMapstringPtrtoDeploymentState((map[string]*DeploymentState)(x.TaskGroups), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TaskGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.TaskGroups == nil {
					r.EncodeNil()
				} else {
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						h.encMapstringPtrtoDeploymentState((map[string]*DeploymentState)(x.TaskGroups), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv8 := &x.JobID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "JobVersion":
			if r.TryDecodeAsNil() {
				x.JobVersion = 0
			} else {
				yyv10 := &x.JobVersion
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv12 := &x.JobModifyIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobSpecModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobSpecModifyIndex = 0
			} else {
				yyv14 := &x.JobSpecModifyIndex
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobCreateIndex":
			if r.TryDecodeAsNil() {
				x.JobCreateIndex = 0
			} else {
				yyv16 := &x.JobCreateIndex
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*uint64)(yyv16)) = uint64(r.DecodeUint(64))
				}
			}
		case "TaskGroups":
			if r.TryDecodeAsNil() {
				x.TaskGroups = nil
			} else {
				yyv18 := &x.TaskGroups
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					h.decMapstringPtrtoDeploymentState((*map[string]*DeploymentState)(yyv18), d)
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv20 := &x.Status
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv22 := &x.StatusDescription
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv24 := &x.CreateIndex
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*uint64)(yyv24)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv26 := &x.ModifyIndex
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*uint64)(yyv26)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj28 int
	var yyb28 bool
	var yyhl28 bool = l >= 0
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv29 := &x.ID
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv31 := &x.Namespace
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv33 := &x.JobID
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobVersion = 0
	} else {
		yyv35 := &x.JobVersion
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*uint64)(yyv35)) = uint64(r.DecodeUint(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv37 := &x.JobModifyIndex
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*uint64)(yyv37)) = uint64(r.DecodeUint(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobSpecModifyIndex = 0
	} else {
		yyv39 := &x.JobSpecModifyIndex
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*uint64)(yyv39)) = uint64(r.DecodeUint(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobCreateIndex = 0
	} else {
		yyv41 := &x.JobCreateIndex
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*uint64)(yyv41)) = uint64(r.DecodeUint(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskGroups = nil
	} else {
		yyv43 := &x.TaskGroups
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			h.decMapstringPtrtoDeploymentState((*map[string]*DeploymentState)(yyv43), d)
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv45 := &x.Status
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*string)(yyv45)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv47 := &x.StatusDescription
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*string)(yyv47)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv49 := &x.CreateIndex
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*uint64)(yyv49)) = uint64(r.DecodeUint(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv51 := &x.ModifyIndex
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*uint64)(yyv51)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj28++
		if yyhl28 {
			yyb28 = yyj28 > l
		} else {
			yyb28 = r.CheckBreak()
		}
		if yyb28 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj28-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [11]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(11)
			} else {
				yynn2 = 11
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.AutoRevert))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AutoRevert"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.AutoRevert))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.AutoPromote))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AutoPromote"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.AutoPromote))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ProgressDeadline) {
				} else {
					r.EncodeInt(int64(x.ProgressDeadline))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ProgressDeadline"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.ProgressDeadline) {
				} else {
					r.EncodeInt(int64(x.ProgressDeadline))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy13 := &x.RequireProgressBy
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if yym15 := z.TimeRtidIfBinc(); yym15 != 0 {
					r.EncodeBuiltin(yym15, yy13)
				} else if z.HasExtensions() && z.EncExt(yy13) {
				} else if yym14 {
					z.EncBinaryMarshal(yy13)
				} else if !yym14 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy13)
				} else {
					z.EncFallback(yy13)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RequireProgressBy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy16 := &x.RequireProgressBy
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
					r.EncodeBuiltin(yym18, yy16)
				} else if z.HasExtensions() && z.EncExt(yy16) {
				} else if yym17 {
					z.EncBinaryMarshal(yy16)
				} else if !yym17 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy16)
				} else {
					z.EncFallback(yy16)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Promoted))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Promoted"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym21 := z.EncBinary()
				_ = yym21
				if false {
				} else {
					r.EncodeBool(bool(x.Promoted))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.PlacedCanaries == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						z.F.EncSliceStringV(x.PlacedCanaries, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PlacedCanaries"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.PlacedCanaries == nil {
					r.EncodeNil()
				} else {
					yym24 := z.EncBinary()
					_ = yym24
					if false {
					} else {
						z.F.EncSliceStringV(x.PlacedCanaries, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredCanaries))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DesiredCanaries"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym27 := z.EncBinary()
				_ = yym27
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredCanaries))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredTotal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DesiredTotal"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym30 := z.EncBinary()
				_ = yym30
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredTotal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeInt(int64(x.PlacedAllocs))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PlacedAllocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym33 := z.EncBinary()
				_ = yym33
				if false {
				} else {
					r.EncodeInt(int64(x.PlacedAllocs))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeInt(int64(x.HealthyAllocs))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("HealthyAllocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym36 := z.EncBinary()
				_ = yym36
				if false {
				} else {
					r.EncodeInt(int64(x.HealthyAllocs))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeInt(int64(x.UnhealthyAllocs))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("UnhealthyAllocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym39 := z.EncBinary()
				_ = yym39
				if false {
				} else {
					r.EncodeInt(int64(x.UnhealthyAllocs))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AutoRevert":
			if r.TryDecodeAsNil() {
				x.AutoRevert = false
			} else {
				yyv4 := &x.AutoRevert
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "AutoPromote":
			if r.TryDecodeAsNil() {
				x.AutoPromote = false
			} else {
				yyv6 := &x.AutoPromote
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "ProgressDeadline":
			if r.TryDecodeAsNil() {
				x.ProgressDeadline = 0
			} else {
				yyv8 := &x.ProgressDeadline
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "RequireProgressBy":
			if r.TryDecodeAsNil() {
				x.RequireProgressBy = time.Time{}
			} else {
				yyv10 := &x.RequireProgressBy
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
					r.DecodeBuiltin(yym12, yyv10)
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else if yym11 {
					z.DecBinaryUnmarshal(yyv10)
				} else if !yym11 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv10)
				} else {
					z.DecFallback(yyv10, false)
				}
			}
		case "Promoted":
			if r.TryDecodeAsNil() {
				x.Promoted = false
			} else {
				yyv13 := &x.Promoted
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*bool)(yyv13)) = r.DecodeBool()
				}
			}
		case "PlacedCanaries":
			if r.TryDecodeAsNil() {
				x.PlacedCanaries = nil
			} else {
				yyv15 := &x.PlacedCanaries
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					z.F.DecSliceStringX(yyv15, false, d)
				}
			}
		case "DesiredCanaries":
			if r.TryDecodeAsNil() {
				x.DesiredCanaries = 0
			} else {
				yyv17 := &x.DesiredCanaries
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					*((*int)(yyv17)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "DesiredTotal":
			if r.TryDecodeAsNil() {
				x.DesiredTotal = 0
			} else {
				yyv19 := &x.DesiredTotal
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					*((*int)(yyv19)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "PlacedAllocs":
			if r.TryDecodeAsNil() {
				x.PlacedAllocs = 0
			} else {
				yyv21 := &x.PlacedAllocs
				yym22 := z.DecBinary()
				_ = yym22
				if false {
				} else {
					*((*int)(yyv21)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "HealthyAllocs":
			if r.TryDecodeAsNil() {
				x.HealthyAllocs = 0
			} else {
				yyv23 := &x.HealthyAllocs
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else {
					*((*int)(yyv23)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "UnhealthyAllocs":
			if r.TryDecodeAsNil() {
				x.UnhealthyAllocs = 0
			} else {
				yyv25 := &x.UnhealthyAllocs
				yym26 := z.DecBinary()
				_ = yym26
				if false {
				} else {
					*((*int)(yyv25)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj27 int
	var yyb27 bool
	var yyhl27 bool = l >= 0
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AutoRevert = false
	} else {
		yyv28 := &x.AutoRevert
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			*((*bool)(yyv28)) = r.DecodeBool()
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AutoPromote = false
	} else {
		yyv30 := &x.AutoPromote
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			*((*bool)(yyv30)) = r.DecodeBool()
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ProgressDeadline = 0
	} else {
		yyv32 := &x.ProgressDeadline
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv32) {
		} else {
			*((*int64)(yyv32)) = int64(r.DecodeInt(64))
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RequireProgressBy = time.Time{}
	} else {
		yyv34 := &x.RequireProgressBy
		yym35 := z.DecBinary()
		_ = yym35
		if false {
		} else if yym36 := z.TimeRtidIfBinc(); yym36 != 0 {
			r.DecodeBuiltin(yym36, yyv34)
		} else if z.HasExtensions() && z.DecExt(yyv34) {
		} else if yym35 {
			z.DecBinaryUnmarshal(yyv34)
		} else if !yym35 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv34)
		} else {
			z.DecFallback(yyv34, false)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Promoted = false
	} else {
		yyv37 := &x.Promoted
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PlacedCanaries = nil
	} else {
		yyv39 := &x.PlacedCanaries
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			z.F.DecSliceStringX(yyv39, false, d)
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredCanaries = 0
	} else {
		yyv41 := &x.DesiredCanaries
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*int)(yyv41)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredTotal = 0
	} else {
		yyv43 := &x.DesiredTotal
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*int)(yyv43)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PlacedAllocs = 0
	} else {
		yyv45 := &x.PlacedAllocs
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*int)(yyv45)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.HealthyAllocs = 0
	} else {
		yyv47 := &x.HealthyAllocs
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*int)(yyv47)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj27++
	if yyhl27 {
		yyb27 = yyj27 > l
	} else {
		yyb27 = r.CheckBreak()
	}
	if yyb27 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.UnhealthyAllocs = 0
	} else {
		yyv49 := &x.UnhealthyAllocs
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*int)(yyv49)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	for {
		yyj27++
		if yyhl27 {
			yyb27 = yyj27 > l
		} else {
			yyb27 = r.CheckBreak()
		}
		if yyb27 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj27-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DeploymentStatusUpdate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DeploymentStatusUpdate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DeploymentStatusUpdate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv4 := &x.DeploymentID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv6 := &x.Status
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv8 := &x.StatusDescription
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DeploymentStatusUpdate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv11 := &x.DeploymentID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv13 := &x.Status
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv15 := &x.StatusDescription
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *RescheduleTracker) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Events == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoRescheduleEvent(([]*RescheduleEvent)(x.Events), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Events"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Events == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoRescheduleEvent(([]*RescheduleEvent)(x.Events), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *RescheduleTracker) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *RescheduleTracker) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Events":
			if r.TryDecodeAsNil() {
				x.Events = nil
			} else {
				yyv4 := &x.Events
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoRescheduleEvent((*[]*RescheduleEvent)(yyv4), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *RescheduleTracker) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Events = nil
	} else {
		yyv7 := &x.Events
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			h.decSlicePtrtoRescheduleEvent((*[]*RescheduleEvent)(yyv7), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *RescheduleEvent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.RescheduleTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RescheduleTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.RescheduleTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PrevAllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PrevAllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PrevAllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PrevNodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PrevNodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PrevNodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Delay) {
				} else {
					r.EncodeInt(int64(x.Delay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Delay"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Delay) {
				} else {
					r.EncodeInt(int64(x.Delay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *RescheduleEvent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *RescheduleEvent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "RescheduleTime":
			if r.TryDecodeAsNil() {
				x.RescheduleTime = 0
			} else {
				yyv4 := &x.RescheduleTime
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "PrevAllocID":
			if r.TryDecodeAsNil() {
				x.PrevAllocID = ""
			} else {
				yyv6 := &x.PrevAllocID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "PrevNodeID":
			if r.TryDecodeAsNil() {
				x.PrevNodeID = ""
			} else {
				yyv8 := &x.PrevNodeID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Delay":
			if r.TryDecodeAsNil() {
				x.Delay = 0
			} else {
				yyv10 := &x.Delay
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *RescheduleEvent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RescheduleTime = 0
	} else {
		yyv13 := &x.RescheduleTime
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int64)(yyv13)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PrevAllocID = ""
	} else {
		yyv15 := &x.PrevAllocID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PrevNodeID = ""
	} else {
		yyv17 := &x.PrevNodeID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Delay = 0
	} else {
		yyv19 := &x.Delay
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DesiredTransition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Migrate == nil {
					r.EncodeNil()
				} else {
					yy4 := *x.Migrate
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeBool(bool(yy4))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Migrate"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Migrate == nil {
					r.EncodeNil()
				} else {
					yy6 := *x.Migrate
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeBool(bool(yy6))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Reschedule == nil {
					r.EncodeNil()
				} else {
					yy9 := *x.Reschedule
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeBool(bool(yy9))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Reschedule"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Reschedule == nil {
					r.EncodeNil()
				} else {
					yy11 := *x.Reschedule
					yym12 := z.EncBinary()
					_ = yym12
					if false {
					} else {
						r.EncodeBool(bool(yy11))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ForceReschedule == nil {
					r.EncodeNil()
				} else {
					yy14 := *x.ForceReschedule
					yym15 := z.EncBinary()
					_ = yym15
					if false {
					} else {
						r.EncodeBool(bool(yy14))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ForceReschedule"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ForceReschedule == nil {
					r.EncodeNil()
				} else {
					yy16 := *x.ForceReschedule
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeBool(bool(yy16))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DesiredTransition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DesiredTransition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Migrate":
			if r.TryDecodeAsNil() {
				if x.Migrate != nil {
					x.Migrate = nil
				}
			} else {
				if x.Migrate == nil {
					x.Migrate = new(bool)
				}
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(x.Migrate)) = r.DecodeBool()
				}
			}
		case "Reschedule":
			if r.TryDecodeAsNil() {
				if x.Reschedule != nil {
					x.Reschedule = nil
				}
			} else {
				if x.Reschedule == nil {
					x.Reschedule = new(bool)
				}
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(x.Reschedule)) = r.DecodeBool()
				}
			}
		case "ForceReschedule":
			if r.TryDecodeAsNil() {
				if x.ForceReschedule != nil {
					x.ForceReschedule = nil
				}
			} else {
				if x.ForceReschedule == nil {
					x.ForceReschedule = new(bool)
				}
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(x.ForceReschedule)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DesiredTransition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Migrate != nil {
			x.Migrate = nil
		}
	} else {
		if x.Migrate == nil {
			x.Migrate = new(bool)
		}
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*bool)(x.Migrate)) = r.DecodeBool()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Reschedule != nil {
			x.Reschedule = nil
		}
	} else {
		if x.Reschedule == nil {
			x.Reschedule = new(bool)
		}
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*bool)(x.Reschedule)) = r.DecodeBool()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.ForceReschedule != nil {
			x.ForceReschedule = nil
		}
	} else {
		if x.ForceReschedule == nil {
			x.ForceReschedule = new(bool)
		}
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(x.ForceReschedule)) = r.DecodeBool()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Allocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [33]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.ID != ""
			yyq2[1] = x.Namespace != ""
			yyq2[2] = x.EvalID != ""
			yyq2[3] = x.Name != ""
			yyq2[4] = x.NodeID != ""
			yyq2[5] = x.NodeName != ""
			yyq2[6] = x.JobID != ""
			yyq2[7] = x.Job != nil
			yyq2[8] = x.TaskGroup != ""
			yyq2[9] = x.Resources != nil
			yyq2[10] = x.SharedResources != nil
			yyq2[11] = len(x.TaskResources) != 0
			yyq2[12] = x.AllocatedResources != nil
			yyq2[13] = x.Metrics != nil
			yyq2[14] = x.DesiredStatus != ""
			yyq2[15] = x.DesiredDescription != ""
			yyq2[16] = true
			yyq2[17] = x.ClientStatus != ""
			yyq2[18] = x.ClientDescription != ""
			yyq2[19] = len(x.TaskStates) != 0
			yyq2[20] = x.PreviousAllocation != ""
			yyq2[21] = x.NextAllocation != ""
			yyq2[22] = x.DeploymentID != ""
			yyq2[23] = x.DeploymentStatus != nil
			yyq2[24] = x.RescheduleTracker != nil
			yyq2[25] = x.FollowupEvalID != ""
			yyq2[26] = len(x.PreemptedAllocations) != 0
			yyq2[27] = x.PreemptedByAllocation != ""
			yyq2[28] = x.CreateIndex != 0
			yyq2[29] = x.ModifyIndex != 0
			yyq2[30] = x.AllocModifyIndex != 0
			yyq2[31] = x.CreateTime != 0
			yyq2[32] = x.ModifyTime != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(33)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Name"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("JobID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[7] {
					if x.Job == nil {
						r.EncodeNil()
					} else {
						x.Job.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Job"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.Job == nil {
						r.EncodeNil()
					} else {
						x.Job.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[8] {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.TaskGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("TaskGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.TaskGroup))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[9] {
					if x.Resources == nil {
						r.EncodeNil()
					} else {
						x.Resources.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.Resources == nil {
						r.EncodeNil()
					} else {
						x.Resources.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[10] {
					if x.SharedResources == nil {
						r.EncodeNil()
					} else {
						x.SharedResources.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("SharedResources"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.SharedResources == nil {
						r.EncodeNil()
					} else {
						x.SharedResources.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[11] {
					if x.TaskResources == nil {
						r.EncodeNil()
					} else {
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							h.encMapstringPtrtoResources((map[string]*Resources)(x.TaskResources), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("TaskResources"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.TaskResources == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							h.encMapstringPtrtoResources((map[string]*Resources)(x.TaskResources), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[12] {
					if x.AllocatedResources == nil {
						r.EncodeNil()
					} else {
						x.AllocatedResources.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("AllocatedResources"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.AllocatedResources == nil {
						r.EncodeNil()
					} else {
						x.AllocatedResources.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[13] {
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						x.Metrics.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Metrics"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						x.Metrics.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[14] {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DesiredStatus))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DesiredStatus"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DesiredStatus))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[15] {
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DesiredDescription))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DesiredDescription"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DesiredDescription))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[16] {
					yy52 := &x.DesiredTransition
					yy52.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DesiredTransition"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yy54 := &x.DesiredTransition
					yy54.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[17] {
					yym57 := z.EncBinary()
					_ = yym57
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ClientStatus))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ClientStatus"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym58 := z.EncBinary()
					_ = yym58
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ClientStatus))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[18] {
					yym60 := z.EncBinary()
					_ = yym60
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ClientDescription))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ClientDescription"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym61 := z.EncBinary()
					_ = yym61
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ClientDescription))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[19] {
					if x.TaskStates == nil {
						r.EncodeNil()
					} else {
						yym63 := z.EncBinary()
						_ = yym63
						if false {
						} else {
							h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("TaskStates"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.TaskStates == nil {
						r.EncodeNil()
					} else {
						yym64 := z.EncBinary()
						_ = yym64
						if false {
						} else {
							h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[20] {
					yym66 := z.EncBinary()
					_ = yym66
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreviousAllocation))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("PreviousAllocation"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreviousAllocation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[21] {
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NextAllocation))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NextAllocation"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym70 := z.EncBinary()
					_ = yym70
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NextAllocation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[22] {
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym73 := z.EncBinary()
					_ = yym73
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[23] {
					if x.DeploymentStatus == nil {
						r.EncodeNil()
					} else {
						x.DeploymentStatus.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DeploymentStatus"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.DeploymentStatus == nil {
						r.EncodeNil()
					} else {
						x.DeploymentStatus.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[24] {
					if x.RescheduleTracker == nil {
						r.EncodeNil()
					} else {
						x.RescheduleTracker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("RescheduleTracker"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.RescheduleTracker == nil {
						r.EncodeNil()
					} else {
						x.RescheduleTracker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[25] {
					yym81 := z.EncBinary()
					_ = yym81
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.FollowupEvalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[25] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("FollowupEvalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym82 := z.EncBinary()
					_ = yym82
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.FollowupEvalID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[26] {
					if x.PreemptedAllocations == nil {
						r.EncodeNil()
					} else {
						yym84 := z.EncBinary()
						_ = yym84
						if false {
						} else {
							z.F.EncSliceStringV(x.PreemptedAllocations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[26] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("PreemptedAllocations"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.PreemptedAllocations == nil {
						r.EncodeNil()
					} else {
						yym85 := z.EncBinary()
						_ = yym85
						if false {
						} else {
							z.F.EncSliceStringV(x.PreemptedAllocations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[27] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreemptedByAllocation))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[27] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("PreemptedByAllocation"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreemptedByAllocation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[28] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeUint(uint64(x.CreateIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[28] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeUint(uint64(x.CreateIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[29] {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeUint(uint64(x.ModifyIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[29] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeUint(uint64(x.ModifyIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[30] {
					yym96 := z.EncBinary()
					_ = yym96
					if false {
					} else {
						r.EncodeUint(uint64(x.AllocModifyIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[30] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("AllocModifyIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym97 := z.EncBinary()
					_ = yym97
					if false {
					} else {
						r.EncodeUint(uint64(x.AllocModifyIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[31] {
					yym99 := z.EncBinary()
					_ = yym99
					if false {
					} else {
						r.EncodeInt(int64(x.CreateTime))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[31] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("CreateTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym100 := z.EncBinary()
					_ = yym100
					if false {
					} else {
						r.EncodeInt(int64(x.CreateTime))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[32] {
					yym102 := z.EncBinary()
					_ = yym102
					if false {
					} else {
						r.EncodeInt(int64(x.ModifyTime))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[32] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ModifyTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym103 := z.EncBinary()
					_ = yym103
					if false {
					} else {
						r.EncodeInt(int64(x.ModifyTime))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Allocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Allocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv8 := &x.EvalID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv10 := &x.Name
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv12 := &x.NodeID
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "NodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				yyv14 := &x.NodeName
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv16 := &x.JobID
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "TaskGroup":
			if r.TryDecodeAsNil() {
				x.TaskGroup = ""
			} else {
				yyv19 := &x.TaskGroup
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					*((*string)(yyv19)) = r.DecodeString()
				}
			}
		case "Resources":
			if r.TryDecodeAsNil() {
				if x.Resources != nil {
					x.Resources = nil
				}
			} else {
				if x.Resources == nil {
					x.Resources = new(Resources)
				}
				x.Resources.CodecDecodeSelf(d)
			}
		case "SharedResources":
			if r.TryDecodeAsNil() {
				if x.SharedResources != nil {
					x.SharedResources = nil
				}
			} else {
				if x.SharedResources == nil {
					x.SharedResources = new(Resources)
				}
				x.SharedResources.CodecDecodeSelf(d)
			}
		case "TaskResources":
			if r.TryDecodeAsNil() {
				x.TaskResources = nil
			} else {
				yyv23 := &x.TaskResources
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else {
					h.decMapstringPtrtoResources((*map[string]*Resources)(yyv23), d)
				}
			}
		case "AllocatedResources":
			if r.TryDecodeAsNil() {
				if x.AllocatedResources != nil {
					x.AllocatedResources = nil
				}
			} else {
				if x.AllocatedResources == nil {
					x.AllocatedResources = new(AllocatedResources)
				}
				x.AllocatedResources.CodecDecodeSelf(d)
			}
		case "Metrics":
			if r.TryDecodeAsNil() {
				if x.Metrics != nil {
					x.Metrics = nil
				}
			} else {
				if x.Metrics == nil {
					x.Metrics = new(AllocMetric)
				}
				x.Metrics.CodecDecodeSelf(d)
			}
		case "DesiredStatus":
			if r.TryDecodeAsNil() {
				x.DesiredStatus = ""
			} else {
				yyv27 := &x.DesiredStatus
				yym28 := z.DecBinary()
				_ = yym28
				if false {
				} else {
					*((*string)(yyv27)) = r.DecodeString()
				}
			}
		case "DesiredDescription":
			if r.TryDecodeAsNil() {
				x.DesiredDescription = ""
			} else {
				yyv29 := &x.DesiredDescription
				yym30 := z.DecBinary()
				_ = yym30
				if false {
				} else {
					*((*string)(yyv29)) = r.DecodeString()
				}
			}
		case "DesiredTransition":
			if r.TryDecodeAsNil() {
				x.DesiredTransition = DesiredTransition{}
			} else {
				yyv31 := &x.DesiredTransition
				yyv31.CodecDecodeSelf(d)
			}
		case "ClientStatus":
			if r.TryDecodeAsNil() {
				x.ClientStatus = ""
			} else {
				yyv32 := &x.ClientStatus
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*string)(yyv32)) = r.DecodeString()
				}
			}
		case "ClientDescription":
			if r.TryDecodeAsNil() {
				x.ClientDescription = ""
			} else {
				yyv34 := &x.ClientDescription
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else {
					*((*string)(yyv34)) = r.DecodeString()
				}
			}
		case "TaskStates":
			if r.TryDecodeAsNil() {
				x.TaskStates = nil
			} else {
				yyv36 := &x.TaskStates
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv36), d)
				}
			}
		case "PreviousAllocation":
			if r.TryDecodeAsNil() {
				x.PreviousAllocation = ""
			} else {
				yyv38 := &x.PreviousAllocation
				yym39 := z.DecBinary()
				_ = yym39
				if false {
				} else {
					*((*string)(yyv38)) = r.DecodeString()
				}
			}
		case "NextAllocation":
			if r.TryDecodeAsNil() {
				x.NextAllocation = ""
			} else {
				yyv40 := &x.NextAllocation
				yym41 := z.DecBinary()
				_ = yym41
				if false {
				} else {
					*((*string)(yyv40)) = r.DecodeString()
				}
			}
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv42 := &x.DeploymentID
				yym43 := z.DecBinary()
				_ = yym43
				if false {
				} else {
					*((*string)(yyv42)) = r.DecodeString()
				}
			}
		case "DeploymentStatus":
			if r.TryDecodeAsNil() {
				if x.DeploymentStatus != nil {
					x.DeploymentStatus = nil
				}
			} else {
				if x.DeploymentStatus == nil {
					x.DeploymentStatus = new(AllocDeploymentStatus)
				}
				x.DeploymentStatus.CodecDecodeSelf(d)
			}
		case "RescheduleTracker":
			if r.TryDecodeAsNil() {
				if x.RescheduleTracker != nil {
					x.RescheduleTracker = nil
				}
			} else {
				if x.RescheduleTracker == nil {
					x.RescheduleTracker = new(RescheduleTracker)
				}
				x.RescheduleTracker.CodecDecodeSelf(d)
			}
		case "FollowupEvalID":
			if r.TryDecodeAsNil() {
				x.FollowupEvalID = ""
			} else {
				yyv46 := &x.FollowupEvalID
				yym47 := z.DecBinary()
				_ = yym47
				if false {
				} else {
					*((*string)(yyv46)) = r.DecodeString()
				}
			}
		case "PreemptedAllocations":
			if r.TryDecodeAsNil() {
				x.PreemptedAllocations = nil
			} else {
				yyv48 := &x.PreemptedAllocations
				yym49 := z.DecBinary()
				_ = yym49
				if false {
				} else {
					z.F.DecSliceStringX(yyv48, false, d)
				}
			}
		case "PreemptedByAllocation":
			if r.TryDecodeAsNil() {
				x.PreemptedByAllocation = ""
			} else {
				yyv50 := &x.PreemptedByAllocation
				yym51 := z.DecBinary()
				_ = yym51
				if false {
				} else {
					*((*string)(yyv50)) = r.DecodeString()
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv52 := &x.CreateIndex
				yym53 := z.DecBinary()
				_ = yym53
				if false {
				} else {
					*((*uint64)(yyv52)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv54 := &x.ModifyIndex
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else {
					*((*uint64)(yyv54)) = uint64(r.DecodeUint(64))
				}
			}
		case "AllocModifyIndex":
			if r.TryDecodeAsNil() {
				x.AllocModifyIndex = 0
			} else {
				yyv56 := &x.AllocModifyIndex
				yym57 := z.DecBinary()
				_ = yym57
				if false {
				} else {
					*((*uint64)(yyv56)) = uint64(r.DecodeUint(64))
				}
			}
		case "CreateTime":
			if r.TryDecodeAsNil() {
				x.CreateTime = 0
			} else {
				yyv58 := &x.CreateTime
				yym59 := z.DecBinary()
				_ = yym59
				if false {
				} else {
					*((*int64)(yyv58)) = int64(r.DecodeInt(64))
				}
			}
		case "ModifyTime":
			if r.TryDecodeAsNil() {
				x.ModifyTime = 0
			} else {
				yyv60 := &x.ModifyTime
				yym61 := z.DecBinary()
				_ = yym61
				if false {
				} else {
					*((*int64)(yyv60)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Allocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj62 int
	var yyb62 bool
	var yyhl62 bool = l >= 0
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv63 := &x.ID
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*string)(yyv63)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv65 := &x.Namespace
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			*((*string)(yyv65)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv67 := &x.EvalID
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv69 := &x.Name
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			*((*string)(yyv69)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv71 := &x.NodeID
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			*((*string)(yyv71)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		yyv73 := &x.NodeName
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else {
			*((*string)(yyv73)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv75 := &x.JobID
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*string)(yyv75)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskGroup = ""
	} else {
		yyv78 := &x.TaskGroup
		yym79 := z.DecBinary()
		_ = yym79
		if false {
		} else {
			*((*string)(yyv78)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Resources != nil {
			x.Resources = nil
		}
	} else {
		if x.Resources == nil {
			x.Resources = new(Resources)
		}
		x.Resources.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.SharedResources != nil {
			x.SharedResources = nil
		}
	} else {
		if x.SharedResources == nil {
			x.SharedResources = new(Resources)
		}
		x.SharedResources.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskResources = nil
	} else {
		yyv82 := &x.TaskResources
		yym83 := z.DecBinary()
		_ = yym83
		if false {
		} else {
			h.decMapstringPtrtoResources((*map[string]*Resources)(yyv82), d)
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.AllocatedResources != nil {
			x.AllocatedResources = nil
		}
	} else {
		if x.AllocatedResources == nil {
			x.AllocatedResources = new(AllocatedResources)
		}
		x.AllocatedResources.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Metrics != nil {
			x.Metrics = nil
		}
	} else {
		if x.Metrics == nil {
			x.Metrics = new(AllocMetric)
		}
		x.Metrics.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredStatus = ""
	} else {
		yyv86 := &x.DesiredStatus
		yym87 := z.DecBinary()
		_ = yym87
		if false {
		} else {
			*((*string)(yyv86)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredDescription = ""
	} else {
		yyv88 := &x.DesiredDescription
		yym89 := z.DecBinary()
		_ = yym89
		if false {
		} else {
			*((*string)(yyv88)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredTransition = DesiredTransition{}
	} else {
		yyv90 := &x.DesiredTransition
		yyv90.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ClientStatus = ""
	} else {
		yyv91 := &x.ClientStatus
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			*((*string)(yyv91)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ClientDescription = ""
	} else {
		yyv93 := &x.ClientDescription
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			*((*string)(yyv93)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskStates = nil
	} else {
		yyv95 := &x.TaskStates
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv95), d)
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreviousAllocation = ""
	} else {
		yyv97 := &x.PreviousAllocation
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			*((*string)(yyv97)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NextAllocation = ""
	} else {
		yyv99 := &x.NextAllocation
		yym100 := z.DecBinary()
		_ = yym100
		if false {
		} else {
			*((*string)(yyv99)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv101 := &x.DeploymentID
		yym102 := z.DecBinary()
		_ = yym102
		if false {
		} else {
			*((*string)(yyv101)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.DeploymentStatus != nil {
			x.DeploymentStatus = nil
		}
	} else {
		if x.DeploymentStatus == nil {
			x.DeploymentStatus = new(AllocDeploymentStatus)
		}
		x.DeploymentStatus.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.RescheduleTracker != nil {
			x.RescheduleTracker = nil
		}
	} else {
		if x.RescheduleTracker == nil {
			x.RescheduleTracker = new(RescheduleTracker)
		}
		x.RescheduleTracker.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.FollowupEvalID = ""
	} else {
		yyv105 := &x.FollowupEvalID
		yym106 := z.DecBinary()
		_ = yym106
		if false {
		} else {
			*((*string)(yyv105)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreemptedAllocations = nil
	} else {
		yyv107 := &x.PreemptedAllocations
		yym108 := z.DecBinary()
		_ = yym108
		if false {
		} else {
			z.F.DecSliceStringX(yyv107, false, d)
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreemptedByAllocation = ""
	} else {
		yyv109 := &x.PreemptedByAllocation
		yym110 := z.DecBinary()
		_ = yym110
		if false {
		} else {
			*((*string)(yyv109)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv111 := &x.CreateIndex
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			*((*uint64)(yyv111)) = uint64(r.DecodeUint(64))
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv113 := &x.ModifyIndex
		yym114 := z.DecBinary()
		_ = yym114
		if false {
		} else {
			*((*uint64)(yyv113)) = uint64(r.DecodeUint(64))
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocModifyIndex = 0
	} else {
		yyv115 := &x.AllocModifyIndex
		yym116 := z.DecBinary()
		_ = yym116
		if false {
		} else {
			*((*uint64)(yyv115)) = uint64(r.DecodeUint(64))
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateTime = 0
	} else {
		yyv117 := &x.CreateTime
		yym118 := z.DecBinary()
		_ = yym118
		if false {
		} else {
			*((*int64)(yyv117)) = int64(r.DecodeInt(64))
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyTime = 0
	} else {
		yyv119 := &x.ModifyTime
		yym120 := z.DecBinary()
		_ = yym120
		if false {
		} else {
			*((*int64)(yyv119)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj62++
		if yyhl62 {
			yyb62 = yyj62 > l
		} else {
			yyb62 = r.CheckBreak()
		}
		if yyb62 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj62-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocationDiff) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [33]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.ID != ""
			yyq2[1] = x.Namespace != ""
			yyq2[2] = x.EvalID != ""
			yyq2[3] = x.Name != ""
			yyq2[4] = x.NodeID != ""
			yyq2[5] = x.NodeName != ""
			yyq2[6] = x.JobID != ""
			yyq2[7] = x.Job != nil
			yyq2[8] = x.TaskGroup != ""
			yyq2[9] = x.Resources != nil
			yyq2[10] = x.SharedResources != nil
			yyq2[11] = len(x.TaskResources) != 0
			yyq2[12] = x.AllocatedResources != nil
			yyq2[13] = x.Metrics != nil
			yyq2[14] = x.DesiredStatus != ""
			yyq2[15] = x.DesiredDescription != ""
			yyq2[16] = true
			yyq2[17] = x.ClientStatus != ""
			yyq2[18] = x.ClientDescription != ""
			yyq2[19] = len(x.TaskStates) != 0
			yyq2[20] = x.PreviousAllocation != ""
			yyq2[21] = x.NextAllocation != ""
			yyq2[22] = x.DeploymentID != ""
			yyq2[23] = x.DeploymentStatus != nil
			yyq2[24] = x.RescheduleTracker != nil
			yyq2[25] = x.FollowupEvalID != ""
			yyq2[26] = len(x.PreemptedAllocations) != 0
			yyq2[27] = x.PreemptedByAllocation != ""
			yyq2[28] = x.CreateIndex != 0
			yyq2[29] = x.ModifyIndex != 0
			yyq2[30] = x.AllocModifyIndex != 0
			yyq2[31] = x.CreateTime != 0
			yyq2[32] = x.ModifyTime != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(33)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Name"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("JobID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[7] {
					if x.Job == nil {
						r.EncodeNil()
					} else {
						x.Job.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Job"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.Job == nil {
						r.EncodeNil()
					} else {
						x.Job.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[8] {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.TaskGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("TaskGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.TaskGroup))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[9] {
					if x.Resources == nil {
						r.EncodeNil()
					} else {
						x.Resources.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.Resources == nil {
						r.EncodeNil()
					} else {
						x.Resources.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[10] {
					if x.SharedResources == nil {
						r.EncodeNil()
					} else {
						x.SharedResources.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("SharedResources"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.SharedResources == nil {
						r.EncodeNil()
					} else {
						x.SharedResources.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[11] {
					if x.TaskResources == nil {
						r.EncodeNil()
					} else {
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							h.encMapstringPtrtoResources((map[string]*Resources)(x.TaskResources), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("TaskResources"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.TaskResources == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							h.encMapstringPtrtoResources((map[string]*Resources)(x.TaskResources), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[12] {
					if x.AllocatedResources == nil {
						r.EncodeNil()
					} else {
						x.AllocatedResources.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("AllocatedResources"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.AllocatedResources == nil {
						r.EncodeNil()
					} else {
						x.AllocatedResources.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[13] {
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						x.Metrics.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Metrics"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						x.Metrics.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[14] {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DesiredStatus))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DesiredStatus"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DesiredStatus))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[15] {
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DesiredDescription))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DesiredDescription"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DesiredDescription))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[16] {
					yy52 := &x.DesiredTransition
					yy52.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DesiredTransition"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yy54 := &x.DesiredTransition
					yy54.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[17] {
					yym57 := z.EncBinary()
					_ = yym57
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ClientStatus))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ClientStatus"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym58 := z.EncBinary()
					_ = yym58
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ClientStatus))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[18] {
					yym60 := z.EncBinary()
					_ = yym60
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ClientDescription))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ClientDescription"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym61 := z.EncBinary()
					_ = yym61
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ClientDescription))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[19] {
					if x.TaskStates == nil {
						r.EncodeNil()
					} else {
						yym63 := z.EncBinary()
						_ = yym63
						if false {
						} else {
							h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("TaskStates"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.TaskStates == nil {
						r.EncodeNil()
					} else {
						yym64 := z.EncBinary()
						_ = yym64
						if false {
						} else {
							h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[20] {
					yym66 := z.EncBinary()
					_ = yym66
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreviousAllocation))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("PreviousAllocation"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreviousAllocation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[21] {
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NextAllocation))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NextAllocation"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym70 := z.EncBinary()
					_ = yym70
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NextAllocation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[22] {
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym73 := z.EncBinary()
					_ = yym73
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[23] {
					if x.DeploymentStatus == nil {
						r.EncodeNil()
					} else {
						x.DeploymentStatus.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DeploymentStatus"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.DeploymentStatus == nil {
						r.EncodeNil()
					} else {
						x.DeploymentStatus.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[24] {
					if x.RescheduleTracker == nil {
						r.EncodeNil()
					} else {
						x.RescheduleTracker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("RescheduleTracker"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.RescheduleTracker == nil {
						r.EncodeNil()
					} else {
						x.RescheduleTracker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[25] {
					yym81 := z.EncBinary()
					_ = yym81
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.FollowupEvalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[25] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("FollowupEvalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym82 := z.EncBinary()
					_ = yym82
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.FollowupEvalID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[26] {
					if x.PreemptedAllocations == nil {
						r.EncodeNil()
					} else {
						yym84 := z.EncBinary()
						_ = yym84
						if false {
						} else {
							z.F.EncSliceStringV(x.PreemptedAllocations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[26] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("PreemptedAllocations"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.PreemptedAllocations == nil {
						r.EncodeNil()
					} else {
						yym85 := z.EncBinary()
						_ = yym85
						if false {
						} else {
							z.F.EncSliceStringV(x.PreemptedAllocations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[27] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreemptedByAllocation))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[27] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("PreemptedByAllocation"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreemptedByAllocation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[28] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeUint(uint64(x.CreateIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[28] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeUint(uint64(x.CreateIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[29] {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeUint(uint64(x.ModifyIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[29] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeUint(uint64(x.ModifyIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[30] {
					yym96 := z.EncBinary()
					_ = yym96
					if false {
					} else {
						r.EncodeUint(uint64(x.AllocModifyIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[30] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("AllocModifyIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym97 := z.EncBinary()
					_ = yym97
					if false {
					} else {
						r.EncodeUint(uint64(x.AllocModifyIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[31] {
					yym99 := z.EncBinary()
					_ = yym99
					if false {
					} else {
						r.EncodeInt(int64(x.CreateTime))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[31] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("CreateTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym100 := z.EncBinary()
					_ = yym100
					if false {
					} else {
						r.EncodeInt(int64(x.CreateTime))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[32] {
					yym102 := z.EncBinary()
					_ = yym102
					if false {
					} else {
						r.EncodeInt(int64(x.ModifyTime))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[32] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ModifyTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym103 := z.EncBinary()
					_ = yym103
					if false {
					} else {
						r.EncodeInt(int64(x.ModifyTime))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocationDiff) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocationDiff) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv8 := &x.EvalID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv10 := &x.Name
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv12 := &x.NodeID
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "NodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				yyv14 := &x.NodeName
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv16 := &x.JobID
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "TaskGroup":
			if r.TryDecodeAsNil() {
				x.TaskGroup = ""
			} else {
				yyv19 := &x.TaskGroup
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					*((*string)(yyv19)) = r.DecodeString()
				}
			}
		case "Resources":
			if r.TryDecodeAsNil() {
				if x.Resources != nil {
					x.Resources = nil
				}
			} else {
				if x.Resources == nil {
					x.Resources = new(Resources)
				}
				x.Resources.CodecDecodeSelf(d)
			}
		case "SharedResources":
			if r.TryDecodeAsNil() {
				if x.SharedResources != nil {
					x.SharedResources = nil
				}
			} else {
				if x.SharedResources == nil {
					x.SharedResources = new(Resources)
				}
				x.SharedResources.CodecDecodeSelf(d)
			}
		case "TaskResources":
			if r.TryDecodeAsNil() {
				x.TaskResources = nil
			} else {
				yyv23 := &x.TaskResources
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else {
					h.decMapstringPtrtoResources((*map[string]*Resources)(yyv23), d)
				}
			}
		case "AllocatedResources":
			if r.TryDecodeAsNil() {
				if x.AllocatedResources != nil {
					x.AllocatedResources = nil
				}
			} else {
				if x.AllocatedResources == nil {
					x.AllocatedResources = new(AllocatedResources)
				}
				x.AllocatedResources.CodecDecodeSelf(d)
			}
		case "Metrics":
			if r.TryDecodeAsNil() {
				if x.Metrics != nil {
					x.Metrics = nil
				}
			} else {
				if x.Metrics == nil {
					x.Metrics = new(AllocMetric)
				}
				x.Metrics.CodecDecodeSelf(d)
			}
		case "DesiredStatus":
			if r.TryDecodeAsNil() {
				x.DesiredStatus = ""
			} else {
				yyv27 := &x.DesiredStatus
				yym28 := z.DecBinary()
				_ = yym28
				if false {
				} else {
					*((*string)(yyv27)) = r.DecodeString()
				}
			}
		case "DesiredDescription":
			if r.TryDecodeAsNil() {
				x.DesiredDescription = ""
			} else {
				yyv29 := &x.DesiredDescription
				yym30 := z.DecBinary()
				_ = yym30
				if false {
				} else {
					*((*string)(yyv29)) = r.DecodeString()
				}
			}
		case "DesiredTransition":
			if r.TryDecodeAsNil() {
				x.DesiredTransition = DesiredTransition{}
			} else {
				yyv31 := &x.DesiredTransition
				yyv31.CodecDecodeSelf(d)
			}
		case "ClientStatus":
			if r.TryDecodeAsNil() {
				x.ClientStatus = ""
			} else {
				yyv32 := &x.ClientStatus
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*string)(yyv32)) = r.DecodeString()
				}
			}
		case "ClientDescription":
			if r.TryDecodeAsNil() {
				x.ClientDescription = ""
			} else {
				yyv34 := &x.ClientDescription
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else {
					*((*string)(yyv34)) = r.DecodeString()
				}
			}
		case "TaskStates":
			if r.TryDecodeAsNil() {
				x.TaskStates = nil
			} else {
				yyv36 := &x.TaskStates
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv36), d)
				}
			}
		case "PreviousAllocation":
			if r.TryDecodeAsNil() {
				x.PreviousAllocation = ""
			} else {
				yyv38 := &x.PreviousAllocation
				yym39 := z.DecBinary()
				_ = yym39
				if false {
				} else {
					*((*string)(yyv38)) = r.DecodeString()
				}
			}
		case "NextAllocation":
			if r.TryDecodeAsNil() {
				x.NextAllocation = ""
			} else {
				yyv40 := &x.NextAllocation
				yym41 := z.DecBinary()
				_ = yym41
				if false {
				} else {
					*((*string)(yyv40)) = r.DecodeString()
				}
			}
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv42 := &x.DeploymentID
				yym43 := z.DecBinary()
				_ = yym43
				if false {
				} else {
					*((*string)(yyv42)) = r.DecodeString()
				}
			}
		case "DeploymentStatus":
			if r.TryDecodeAsNil() {
				if x.DeploymentStatus != nil {
					x.DeploymentStatus = nil
				}
			} else {
				if x.DeploymentStatus == nil {
					x.DeploymentStatus = new(AllocDeploymentStatus)
				}
				x.DeploymentStatus.CodecDecodeSelf(d)
			}
		case "RescheduleTracker":
			if r.TryDecodeAsNil() {
				if x.RescheduleTracker != nil {
					x.RescheduleTracker = nil
				}
			} else {
				if x.RescheduleTracker == nil {
					x.RescheduleTracker = new(RescheduleTracker)
				}
				x.RescheduleTracker.CodecDecodeSelf(d)
			}
		case "FollowupEvalID":
			if r.TryDecodeAsNil() {
				x.FollowupEvalID = ""
			} else {
				yyv46 := &x.FollowupEvalID
				yym47 := z.DecBinary()
				_ = yym47
				if false {
				} else {
					*((*string)(yyv46)) = r.DecodeString()
				}
			}
		case "PreemptedAllocations":
			if r.TryDecodeAsNil() {
				x.PreemptedAllocations = nil
			} else {
				yyv48 := &x.PreemptedAllocations
				yym49 := z.DecBinary()
				_ = yym49
				if false {
				} else {
					z.F.DecSliceStringX(yyv48, false, d)
				}
			}
		case "PreemptedByAllocation":
			if r.TryDecodeAsNil() {
				x.PreemptedByAllocation = ""
			} else {
				yyv50 := &x.PreemptedByAllocation
				yym51 := z.DecBinary()
				_ = yym51
				if false {
				} else {
					*((*string)(yyv50)) = r.DecodeString()
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv52 := &x.CreateIndex
				yym53 := z.DecBinary()
				_ = yym53
				if false {
				} else {
					*((*uint64)(yyv52)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv54 := &x.ModifyIndex
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else {
					*((*uint64)(yyv54)) = uint64(r.DecodeUint(64))
				}
			}
		case "AllocModifyIndex":
			if r.TryDecodeAsNil() {
				x.AllocModifyIndex = 0
			} else {
				yyv56 := &x.AllocModifyIndex
				yym57 := z.DecBinary()
				_ = yym57
				if false {
				} else {
					*((*uint64)(yyv56)) = uint64(r.DecodeUint(64))
				}
			}
		case "CreateTime":
			if r.TryDecodeAsNil() {
				x.CreateTime = 0
			} else {
				yyv58 := &x.CreateTime
				yym59 := z.DecBinary()
				_ = yym59
				if false {
				} else {
					*((*int64)(yyv58)) = int64(r.DecodeInt(64))
				}
			}
		case "ModifyTime":
			if r.TryDecodeAsNil() {
				x.ModifyTime = 0
			} else {
				yyv60 := &x.ModifyTime
				yym61 := z.DecBinary()
				_ = yym61
				if false {
				} else {
					*((*int64)(yyv60)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocationDiff) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj62 int
	var yyb62 bool
	var yyhl62 bool = l >= 0
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv63 := &x.ID
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*string)(yyv63)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv65 := &x.Namespace
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			*((*string)(yyv65)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv67 := &x.EvalID
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv69 := &x.Name
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			*((*string)(yyv69)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv71 := &x.NodeID
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			*((*string)(yyv71)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		yyv73 := &x.NodeName
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else {
			*((*string)(yyv73)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv75 := &x.JobID
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*string)(yyv75)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskGroup = ""
	} else {
		yyv78 := &x.TaskGroup
		yym79 := z.DecBinary()
		_ = yym79
		if false {
		} else {
			*((*string)(yyv78)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Resources != nil {
			x.Resources = nil
		}
	} else {
		if x.Resources == nil {
			x.Resources = new(Resources)
		}
		x.Resources.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.SharedResources != nil {
			x.SharedResources = nil
		}
	} else {
		if x.SharedResources == nil {
			x.SharedResources = new(Resources)
		}
		x.SharedResources.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskResources = nil
	} else {
		yyv82 := &x.TaskResources
		yym83 := z.DecBinary()
		_ = yym83
		if false {
		} else {
			h.decMapstringPtrtoResources((*map[string]*Resources)(yyv82), d)
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.AllocatedResources != nil {
			x.AllocatedResources = nil
		}
	} else {
		if x.AllocatedResources == nil {
			x.AllocatedResources = new(AllocatedResources)
		}
		x.AllocatedResources.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Metrics != nil {
			x.Metrics = nil
		}
	} else {
		if x.Metrics == nil {
			x.Metrics = new(AllocMetric)
		}
		x.Metrics.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredStatus = ""
	} else {
		yyv86 := &x.DesiredStatus
		yym87 := z.DecBinary()
		_ = yym87
		if false {
		} else {
			*((*string)(yyv86)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredDescription = ""
	} else {
		yyv88 := &x.DesiredDescription
		yym89 := z.DecBinary()
		_ = yym89
		if false {
		} else {
			*((*string)(yyv88)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredTransition = DesiredTransition{}
	} else {
		yyv90 := &x.DesiredTransition
		yyv90.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ClientStatus = ""
	} else {
		yyv91 := &x.ClientStatus
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			*((*string)(yyv91)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ClientDescription = ""
	} else {
		yyv93 := &x.ClientDescription
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			*((*string)(yyv93)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskStates = nil
	} else {
		yyv95 := &x.TaskStates
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv95), d)
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreviousAllocation = ""
	} else {
		yyv97 := &x.PreviousAllocation
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			*((*string)(yyv97)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NextAllocation = ""
	} else {
		yyv99 := &x.NextAllocation
		yym100 := z.DecBinary()
		_ = yym100
		if false {
		} else {
			*((*string)(yyv99)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv101 := &x.DeploymentID
		yym102 := z.DecBinary()
		_ = yym102
		if false {
		} else {
			*((*string)(yyv101)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.DeploymentStatus != nil {
			x.DeploymentStatus = nil
		}
	} else {
		if x.DeploymentStatus == nil {
			x.DeploymentStatus = new(AllocDeploymentStatus)
		}
		x.DeploymentStatus.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.RescheduleTracker != nil {
			x.RescheduleTracker = nil
		}
	} else {
		if x.RescheduleTracker == nil {
			x.RescheduleTracker = new(RescheduleTracker)
		}
		x.RescheduleTracker.CodecDecodeSelf(d)
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.FollowupEvalID = ""
	} else {
		yyv105 := &x.FollowupEvalID
		yym106 := z.DecBinary()
		_ = yym106
		if false {
		} else {
			*((*string)(yyv105)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreemptedAllocations = nil
	} else {
		yyv107 := &x.PreemptedAllocations
		yym108 := z.DecBinary()
		_ = yym108
		if false {
		} else {
			z.F.DecSliceStringX(yyv107, false, d)
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreemptedByAllocation = ""
	} else {
		yyv109 := &x.PreemptedByAllocation
		yym110 := z.DecBinary()
		_ = yym110
		if false {
		} else {
			*((*string)(yyv109)) = r.DecodeString()
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv111 := &x.CreateIndex
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			*((*uint64)(yyv111)) = uint64(r.DecodeUint(64))
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv113 := &x.ModifyIndex
		yym114 := z.DecBinary()
		_ = yym114
		if false {
		} else {
			*((*uint64)(yyv113)) = uint64(r.DecodeUint(64))
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocModifyIndex = 0
	} else {
		yyv115 := &x.AllocModifyIndex
		yym116 := z.DecBinary()
		_ = yym116
		if false {
		} else {
			*((*uint64)(yyv115)) = uint64(r.DecodeUint(64))
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateTime = 0
	} else {
		yyv117 := &x.CreateTime
		yym118 := z.DecBinary()
		_ = yym118
		if false {
		} else {
			*((*int64)(yyv117)) = int64(r.DecodeInt(64))
		}
	}
	yyj62++
	if yyhl62 {
		yyb62 = yyj62 > l
	} else {
		yyb62 = r.CheckBreak()
	}
	if yyb62 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyTime = 0
	} else {
		yyv119 := &x.ModifyTime
		yym120 := z.DecBinary()
		_ = yym120
		if false {
		} else {
			*((*int64)(yyv119)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj62++
		if yyhl62 {
			yyb62 = yyj62 > l
		} else {
			yyb62 = r.CheckBreak()
		}
		if yyb62 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj62-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocListStub) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [25]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(25)
			} else {
				yynn2 = 25
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeName"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeName))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobType"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.JobType))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeUint(uint64(x.JobVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("JobVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeUint(uint64(x.JobVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TaskGroup))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TaskGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.TaskGroup))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DesiredStatus))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DesiredStatus"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DesiredStatus))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DesiredDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DesiredDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.DesiredDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ClientStatus))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ClientStatus"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ClientStatus))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ClientDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ClientDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.ClientDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy46 := &x.DesiredTransition
				yy46.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DesiredTransition"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy48 := &x.DesiredTransition
				yy48.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.TaskStates == nil {
					r.EncodeNil()
				} else {
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("TaskStates"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.TaskStates == nil {
					r.EncodeNil()
				} else {
					yym52 := z.EncBinary()
					_ = yym52
					if false {
					} else {
						h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DeploymentStatus == nil {
					r.EncodeNil()
				} else {
					x.DeploymentStatus.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentStatus"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DeploymentStatus == nil {
					r.EncodeNil()
				} else {
					x.DeploymentStatus.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym57 := z.EncBinary()
				_ = yym57
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.FollowupEvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("FollowupEvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.FollowupEvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.RescheduleTracker == nil {
					r.EncodeNil()
				} else {
					x.RescheduleTracker.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RescheduleTracker"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.RescheduleTracker == nil {
					r.EncodeNil()
				} else {
					x.RescheduleTracker.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.PreemptedAllocations == nil {
					r.EncodeNil()
				} else {
					yym63 := z.EncBinary()
					_ = yym63
					if false {
					} else {
						z.F.EncSliceStringV(x.PreemptedAllocations, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PreemptedAllocations"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.PreemptedAllocations == nil {
					r.EncodeNil()
				} else {
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						z.F.EncSliceStringV(x.PreemptedAllocations, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym66 := z.EncBinary()
				_ = yym66
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PreemptedByAllocation))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PreemptedByAllocation"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.PreemptedByAllocation))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym69 := z.EncBinary()
				_ = yym69
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym70 := z.EncBinary()
				_ = yym70
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym72 := z.EncBinary()
				_ = yym72
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym73 := z.EncBinary()
				_ = yym73
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym75 := z.EncBinary()
				_ = yym75
				if false {
				} else {
					r.EncodeInt(int64(x.CreateTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym76 := z.EncBinary()
				_ = yym76
				if false {
				} else {
					r.EncodeInt(int64(x.CreateTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym78 := z.EncBinary()
				_ = yym78
				if false {
				} else {
					r.EncodeInt(int64(x.ModifyTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym79 := z.EncBinary()
				_ = yym79
				if false {
				} else {
					r.EncodeInt(int64(x.ModifyTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocListStub) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocListStub) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv6 := &x.EvalID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv12 := &x.NodeID
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "NodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				yyv14 := &x.NodeName
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv16 := &x.JobID
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "JobType":
			if r.TryDecodeAsNil() {
				x.JobType = ""
			} else {
				yyv18 := &x.JobType
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "JobVersion":
			if r.TryDecodeAsNil() {
				x.JobVersion = 0
			} else {
				yyv20 := &x.JobVersion
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*uint64)(yyv20)) = uint64(r.DecodeUint(64))
				}
			}
		case "TaskGroup":
			if r.TryDecodeAsNil() {
				x.TaskGroup = ""
			} else {
				yyv22 := &x.TaskGroup
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "DesiredStatus":
			if r.TryDecodeAsNil() {
				x.DesiredStatus = ""
			} else {
				yyv24 := &x.DesiredStatus
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "DesiredDescription":
			if r.TryDecodeAsNil() {
				x.DesiredDescription = ""
			} else {
				yyv26 := &x.DesiredDescription
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "ClientStatus":
			if r.TryDecodeAsNil() {
				x.ClientStatus = ""
			} else {
				yyv28 := &x.ClientStatus
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		case "ClientDescription":
			if r.TryDecodeAsNil() {
				x.ClientDescription = ""
			} else {
				yyv30 := &x.ClientDescription
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*string)(yyv30)) = r.DecodeString()
				}
			}
		case "DesiredTransition":
			if r.TryDecodeAsNil() {
				x.DesiredTransition = DesiredTransition{}
			} else {
				yyv32 := &x.DesiredTransition
				yyv32.CodecDecodeSelf(d)
			}
		case "TaskStates":
			if r.TryDecodeAsNil() {
				x.TaskStates = nil
			} else {
				yyv33 := &x.TaskStates
				yym34 := z.DecBinary()
				_ = yym34
				if false {
				} else {
					h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv33), d)
				}
			}
		case "DeploymentStatus":
			if r.TryDecodeAsNil() {
				if x.DeploymentStatus != nil {
					x.DeploymentStatus = nil
				}
			} else {
				if x.DeploymentStatus == nil {
					x.DeploymentStatus = new(AllocDeploymentStatus)
				}
				x.DeploymentStatus.CodecDecodeSelf(d)
			}
		case "FollowupEvalID":
			if r.TryDecodeAsNil() {
				x.FollowupEvalID = ""
			} else {
				yyv36 := &x.FollowupEvalID
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					*((*string)(yyv36)) = r.DecodeString()
				}
			}
		case "RescheduleTracker":
			if r.TryDecodeAsNil() {
				if x.RescheduleTracker != nil {
					x.RescheduleTracker = nil
				}
			} else {
				if x.RescheduleTracker == nil {
					x.RescheduleTracker = new(RescheduleTracker)
				}
				x.RescheduleTracker.CodecDecodeSelf(d)
			}
		case "PreemptedAllocations":
			if r.TryDecodeAsNil() {
				x.PreemptedAllocations = nil
			} else {
				yyv39 := &x.PreemptedAllocations
				yym40 := z.DecBinary()
				_ = yym40
				if false {
				} else {
					z.F.DecSliceStringX(yyv39, false, d)
				}
			}
		case "PreemptedByAllocation":
			if r.TryDecodeAsNil() {
				x.PreemptedByAllocation = ""
			} else {
				yyv41 := &x.PreemptedByAllocation
				yym42 := z.DecBinary()
				_ = yym42
				if false {
				} else {
					*((*string)(yyv41)) = r.DecodeString()
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv43 := &x.CreateIndex
				yym44 := z.DecBinary()
				_ = yym44
				if false {
				} else {
					*((*uint64)(yyv43)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv45 := &x.ModifyIndex
				yym46 := z.DecBinary()
				_ = yym46
				if false {
				} else {
					*((*uint64)(yyv45)) = uint64(r.DecodeUint(64))
				}
			}
		case "CreateTime":
			if r.TryDecodeAsNil() {
				x.CreateTime = 0
			} else {
				yyv47 := &x.CreateTime
				yym48 := z.DecBinary()
				_ = yym48
				if false {
				} else {
					*((*int64)(yyv47)) = int64(r.DecodeInt(64))
				}
			}
		case "ModifyTime":
			if r.TryDecodeAsNil() {
				x.ModifyTime = 0
			} else {
				yyv49 := &x.ModifyTime
				yym50 := z.DecBinary()
				_ = yym50
				if false {
				} else {
					*((*int64)(yyv49)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocListStub) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj51 int
	var yyb51 bool
	var yyhl51 bool = l >= 0
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv52 := &x.ID
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			*((*string)(yyv52)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv54 := &x.EvalID
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			*((*string)(yyv54)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv56 := &x.Name
		yym57 := z.DecBinary()
		_ = yym57
		if false {
		} else {
			*((*string)(yyv56)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv58 := &x.Namespace
		yym59 := z.DecBinary()
		_ = yym59
		if false {
		} else {
			*((*string)(yyv58)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv60 := &x.NodeID
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else {
			*((*string)(yyv60)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		yyv62 := &x.NodeName
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			*((*string)(yyv62)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv64 := &x.JobID
		yym65 := z.DecBinary()
		_ = yym65
		if false {
		} else {
			*((*string)(yyv64)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobType = ""
	} else {
		yyv66 := &x.JobType
		yym67 := z.DecBinary()
		_ = yym67
		if false {
		} else {
			*((*string)(yyv66)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobVersion = 0
	} else {
		yyv68 := &x.JobVersion
		yym69 := z.DecBinary()
		_ = yym69
		if false {
		} else {
			*((*uint64)(yyv68)) = uint64(r.DecodeUint(64))
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskGroup = ""
	} else {
		yyv70 := &x.TaskGroup
		yym71 := z.DecBinary()
		_ = yym71
		if false {
		} else {
			*((*string)(yyv70)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredStatus = ""
	} else {
		yyv72 := &x.DesiredStatus
		yym73 := z.DecBinary()
		_ = yym73
		if false {
		} else {
			*((*string)(yyv72)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredDescription = ""
	} else {
		yyv74 := &x.DesiredDescription
		yym75 := z.DecBinary()
		_ = yym75
		if false {
		} else {
			*((*string)(yyv74)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ClientStatus = ""
	} else {
		yyv76 := &x.ClientStatus
		yym77 := z.DecBinary()
		_ = yym77
		if false {
		} else {
			*((*string)(yyv76)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ClientDescription = ""
	} else {
		yyv78 := &x.ClientDescription
		yym79 := z.DecBinary()
		_ = yym79
		if false {
		} else {
			*((*string)(yyv78)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredTransition = DesiredTransition{}
	} else {
		yyv80 := &x.DesiredTransition
		yyv80.CodecDecodeSelf(d)
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TaskStates = nil
	} else {
		yyv81 := &x.TaskStates
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else {
			h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv81), d)
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.DeploymentStatus != nil {
			x.DeploymentStatus = nil
		}
	} else {
		if x.DeploymentStatus == nil {
			x.DeploymentStatus = new(AllocDeploymentStatus)
		}
		x.DeploymentStatus.CodecDecodeSelf(d)
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.FollowupEvalID = ""
	} else {
		yyv84 := &x.FollowupEvalID
		yym85 := z.DecBinary()
		_ = yym85
		if false {
		} else {
			*((*string)(yyv84)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.RescheduleTracker != nil {
			x.RescheduleTracker = nil
		}
	} else {
		if x.RescheduleTracker == nil {
			x.RescheduleTracker = new(RescheduleTracker)
		}
		x.RescheduleTracker.CodecDecodeSelf(d)
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreemptedAllocations = nil
	} else {
		yyv87 := &x.PreemptedAllocations
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecSliceStringX(yyv87, false, d)
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreemptedByAllocation = ""
	} else {
		yyv89 := &x.PreemptedByAllocation
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*string)(yyv89)) = r.DecodeString()
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv91 := &x.CreateIndex
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			*((*uint64)(yyv91)) = uint64(r.DecodeUint(64))
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv93 := &x.ModifyIndex
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			*((*uint64)(yyv93)) = uint64(r.DecodeUint(64))
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateTime = 0
	} else {
		yyv95 := &x.CreateTime
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			*((*int64)(yyv95)) = int64(r.DecodeInt(64))
		}
	}
	yyj51++
	if yyhl51 {
		yyb51 = yyj51 > l
	} else {
		yyb51 = r.CheckBreak()
	}
	if yyb51 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyTime = 0
	} else {
		yyv97 := &x.ModifyTime
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			*((*int64)(yyv97)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj51++
		if yyhl51 {
			yyb51 = yyj51 > l
		} else {
			yyb51 = r.CheckBreak()
		}
		if yyb51 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj51-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocMetric) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [13]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(13)
			} else {
				yynn2 = 13
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.NodesEvaluated))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodesEvaluated"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.NodesEvaluated))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.NodesFiltered))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodesFiltered"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.NodesFiltered))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodesAvailable == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncMapStringIntV(x.NodesAvailable, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodesAvailable"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodesAvailable == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncMapStringIntV(x.NodesAvailable, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ClassFiltered == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncMapStringIntV(x.ClassFiltered, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ClassFiltered"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ClassFiltered == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncMapStringIntV(x.ClassFiltered, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ConstraintFiltered == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						z.F.EncMapStringIntV(x.ConstraintFiltered, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ConstraintFiltered"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ConstraintFiltered == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						z.F.EncMapStringIntV(x.ConstraintFiltered, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.NodesExhausted))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodesExhausted"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.NodesExhausted))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ClassExhausted == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						z.F.EncMapStringIntV(x.ClassExhausted, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ClassExhausted"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ClassExhausted == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						z.F.EncMapStringIntV(x.ClassExhausted, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DimensionExhausted == nil {
					r.EncodeNil()
				} else {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						z.F.EncMapStringIntV(x.DimensionExhausted, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DimensionExhausted"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DimensionExhausted == nil {
					r.EncodeNil()
				} else {
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						z.F.EncMapStringIntV(x.DimensionExhausted, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.QuotaExhausted == nil {
					r.EncodeNil()
				} else {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						z.F.EncSliceStringV(x.QuotaExhausted, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("QuotaExhausted"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.QuotaExhausted == nil {
					r.EncodeNil()
				} else {
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						z.F.EncSliceStringV(x.QuotaExhausted, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Scores == nil {
					r.EncodeNil()
				} else {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						z.F.EncMapStringFloat64V(x.Scores, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Scores"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Scores == nil {
					r.EncodeNil()
				} else {
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						z.F.EncMapStringFloat64V(x.Scores, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.ScoreMetaData == nil {
					r.EncodeNil()
				} else {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						h.encSlicePtrtoNodeScoreMeta(([]*NodeScoreMeta)(x.ScoreMetaData), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ScoreMetaData"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.ScoreMetaData == nil {
					r.EncodeNil()
				} else {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						h.encSlicePtrtoNodeScoreMeta(([]*NodeScoreMeta)(x.ScoreMetaData), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else if z.HasExtensions() && z.EncExt(x.AllocationTime) {
				} else {
					r.EncodeInt(int64(x.AllocationTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocationTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else if z.HasExtensions() && z.EncExt(x.AllocationTime) {
				} else {
					r.EncodeInt(int64(x.AllocationTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeInt(int64(x.CoalescedFailures))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CoalescedFailures"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeInt(int64(x.CoalescedFailures))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocMetric) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocMetric) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodesEvaluated":
			if r.TryDecodeAsNil() {
				x.NodesEvaluated = 0
			} else {
				yyv4 := &x.NodesEvaluated
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "NodesFiltered":
			if r.TryDecodeAsNil() {
				x.NodesFiltered = 0
			} else {
				yyv6 := &x.NodesFiltered
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "NodesAvailable":
			if r.TryDecodeAsNil() {
				x.NodesAvailable = nil
			} else {
				yyv8 := &x.NodesAvailable
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecMapStringIntX(yyv8, false, d)
				}
			}
		case "ClassFiltered":
			if r.TryDecodeAsNil() {
				x.ClassFiltered = nil
			} else {
				yyv10 := &x.ClassFiltered
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecMapStringIntX(yyv10, false, d)
				}
			}
		case "ConstraintFiltered":
			if r.TryDecodeAsNil() {
				x.ConstraintFiltered = nil
			} else {
				yyv12 := &x.ConstraintFiltered
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					z.F.DecMapStringIntX(yyv12, false, d)
				}
			}
		case "NodesExhausted":
			if r.TryDecodeAsNil() {
				x.NodesExhausted = 0
			} else {
				yyv14 := &x.NodesExhausted
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "ClassExhausted":
			if r.TryDecodeAsNil() {
				x.ClassExhausted = nil
			} else {
				yyv16 := &x.ClassExhausted
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					z.F.DecMapStringIntX(yyv16, false, d)
				}
			}
		case "DimensionExhausted":
			if r.TryDecodeAsNil() {
				x.DimensionExhausted = nil
			} else {
				yyv18 := &x.DimensionExhausted
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					z.F.DecMapStringIntX(yyv18, false, d)
				}
			}
		case "QuotaExhausted":
			if r.TryDecodeAsNil() {
				x.QuotaExhausted = nil
			} else {
				yyv20 := &x.QuotaExhausted
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					z.F.DecSliceStringX(yyv20, false, d)
				}
			}
		case "Scores":
			if r.TryDecodeAsNil() {
				x.Scores = nil
			} else {
				yyv22 := &x.Scores
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					z.F.DecMapStringFloat64X(yyv22, false, d)
				}
			}
		case "ScoreMetaData":
			if r.TryDecodeAsNil() {
				x.ScoreMetaData = nil
			} else {
				yyv24 := &x.ScoreMetaData
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decSlicePtrtoNodeScoreMeta((*[]*NodeScoreMeta)(yyv24), d)
				}
			}
		case "AllocationTime":
			if r.TryDecodeAsNil() {
				x.AllocationTime = 0
			} else {
				yyv26 := &x.AllocationTime
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv26) {
				} else {
					*((*int64)(yyv26)) = int64(r.DecodeInt(64))
				}
			}
		case "CoalescedFailures":
			if r.TryDecodeAsNil() {
				x.CoalescedFailures = 0
			} else {
				yyv28 := &x.CoalescedFailures
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*int)(yyv28)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocMetric) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodesEvaluated = 0
	} else {
		yyv31 := &x.NodesEvaluated
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*int)(yyv31)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodesFiltered = 0
	} else {
		yyv33 := &x.NodesFiltered
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*int)(yyv33)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodesAvailable = nil
	} else {
		yyv35 := &x.NodesAvailable
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			z.F.DecMapStringIntX(yyv35, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ClassFiltered = nil
	} else {
		yyv37 := &x.ClassFiltered
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			z.F.DecMapStringIntX(yyv37, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ConstraintFiltered = nil
	} else {
		yyv39 := &x.ConstraintFiltered
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			z.F.DecMapStringIntX(yyv39, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodesExhausted = 0
	} else {
		yyv41 := &x.NodesExhausted
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*int)(yyv41)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ClassExhausted = nil
	} else {
		yyv43 := &x.ClassExhausted
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			z.F.DecMapStringIntX(yyv43, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DimensionExhausted = nil
	} else {
		yyv45 := &x.DimensionExhausted
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			z.F.DecMapStringIntX(yyv45, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.QuotaExhausted = nil
	} else {
		yyv47 := &x.QuotaExhausted
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			z.F.DecSliceStringX(yyv47, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Scores = nil
	} else {
		yyv49 := &x.Scores
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			z.F.DecMapStringFloat64X(yyv49, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ScoreMetaData = nil
	} else {
		yyv51 := &x.ScoreMetaData
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			h.decSlicePtrtoNodeScoreMeta((*[]*NodeScoreMeta)(yyv51), d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocationTime = 0
	} else {
		yyv53 := &x.AllocationTime
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv53) {
		} else {
			*((*int64)(yyv53)) = int64(r.DecodeInt(64))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CoalescedFailures = 0
	} else {
		yyv55 := &x.CoalescedFailures
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*int)(yyv55)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *NodeScoreMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Scores == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringFloat64V(x.Scores, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Scores"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Scores == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringFloat64V(x.Scores, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeFloat64(float64(x.NormScore))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NormScore"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeFloat64(float64(x.NormScore))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *NodeScoreMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *NodeScoreMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Scores":
			if r.TryDecodeAsNil() {
				x.Scores = nil
			} else {
				yyv6 := &x.Scores
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringFloat64X(yyv6, false, d)
				}
			}
		case "NormScore":
			if r.TryDecodeAsNil() {
				x.NormScore = 0
			} else {
				yyv8 := &x.NormScore
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*float64)(yyv8)) = float64(r.DecodeFloat(false))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *NodeScoreMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv11 := &x.NodeID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Scores = nil
	} else {
		yyv13 := &x.Scores
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecMapStringFloat64X(yyv13, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NormScore = 0
	} else {
		yyv15 := &x.NormScore
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*float64)(yyv15)) = float64(r.DecodeFloat(false))
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *AllocDeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Healthy == nil {
					r.EncodeNil()
				} else {
					yy4 := *x.Healthy
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeBool(bool(yy4))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Healthy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Healthy == nil {
					r.EncodeNil()
				} else {
					yy6 := *x.Healthy
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeBool(bool(yy6))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy9 := &x.Timestamp
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if yym11 := z.TimeRtidIfBinc(); yym11 != 0 {
					r.EncodeBuiltin(yym11, yy9)
				} else if z.HasExtensions() && z.EncExt(yy9) {
				} else if yym10 {
					z.EncBinaryMarshal(yy9)
				} else if !yym10 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy9)
				} else {
					z.EncFallback(yy9)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Timestamp"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy12 := &x.Timestamp
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if yym14 := z.TimeRtidIfBinc(); yym14 != 0 {
					r.EncodeBuiltin(yym14, yy12)
				} else if z.HasExtensions() && z.EncExt(yy12) {
				} else if yym13 {
					z.EncBinaryMarshal(yy12)
				} else if !yym13 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy12)
				} else {
					z.EncFallback(yy12)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Canary))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Canary"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Canary))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *AllocDeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *AllocDeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Healthy":
			if r.TryDecodeAsNil() {
				if x.Healthy != nil {
					x.Healthy = nil
				}
			} else {
				if x.Healthy == nil {
					x.Healthy = new(bool)
				}
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(x.Healthy)) = r.DecodeBool()
				}
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				yyv6 := &x.Timestamp
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if yym8 := z.TimeRtidIfBinc(); yym8 != 0 {
					r.DecodeBuiltin(yym8, yyv6)
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else if yym7 {
					z.DecBinaryUnmarshal(yyv6)
				} else if !yym7 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv6)
				} else {
					z.DecFallback(yyv6, false)
				}
			}
		case "Canary":
			if r.TryDecodeAsNil() {
				x.Canary = false
			} else {
				yyv9 := &x.Canary
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv11 := &x.ModifyIndex
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *AllocDeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Healthy != nil {
			x.Healthy = nil
		}
	} else {
		if x.Healthy == nil {
			x.Healthy = new(bool)
		}
		yym15 := z.DecBinary()
		_ = yym15
		if false {
		} else {
			*((*bool)(x.Healthy)) = r.DecodeBool()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		yyv16 := &x.Timestamp
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
			r.DecodeBuiltin(yym18, yyv16)
		} else if z.HasExtensions() && z.DecExt(yyv16) {
		} else if yym17 {
			z.DecBinaryUnmarshal(yyv16)
		} else if !yym17 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv16)
		} else {
			z.DecFallback(yyv16, false)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Canary = false
	} else {
		yyv19 := &x.Canary
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv21 := &x.ModifyIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Evaluation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [29]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.ID != ""
			yyq2[1] = x.Namespace != ""
			yyq2[2] = x.Priority != 0
			yyq2[3] = x.Type != ""
			yyq2[4] = x.TriggeredBy != ""
			yyq2[5] = x.JobID != ""
			yyq2[6] = x.JobModifyIndex != 0
			yyq2[7] = x.NodeID != ""
			yyq2[8] = x.NodeModifyIndex != 0
			yyq2[9] = x.DeploymentID != ""
			yyq2[10] = x.Status != ""
			yyq2[11] = x.StatusDescription != ""
			yyq2[12] = x.Wait != 0
			yyq2[13] = true
			yyq2[14] = x.NextEval != ""
			yyq2[15] = x.PreviousEval != ""
			yyq2[16] = x.BlockedEval != ""
			yyq2[17] = len(x.FailedTGAllocs) != 0
			yyq2[18] = len(x.ClassEligibility) != 0
			yyq2[19] = x.QuotaLimitReached != ""
			yyq2[20] = x.EscapedComputedClass != false
			yyq2[21] = x.AnnotatePlan != false
			yyq2[22] = len(x.QueuedAllocations) != 0
			yyq2[23] = x.LeaderACL != ""
			yyq2[24] = x.SnapshotIndex != 0
			yyq2[25] = x.CreateIndex != 0
			yyq2[26] = x.ModifyIndex != 0
			yyq2[27] = x.CreateTime != 0
			yyq2[28] = x.ModifyTime != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(29)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.ID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeInt(int64(x.Priority))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Priority"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeInt(int64(x.Priority))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Type"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Type))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.TriggeredBy))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("TriggeredBy"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.TriggeredBy))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("JobID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.JobID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeUint(uint64(x.JobModifyIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("JobModifyIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeUint(uint64(x.JobModifyIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[7] {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NodeID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NodeID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[8] {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						r.EncodeUint(uint64(x.NodeModifyIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NodeModifyIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						r.EncodeUint(uint64(x.NodeModifyIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[9] {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DeploymentID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.DeploymentID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[10] {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Status))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Status"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.Status))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[11] {
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("StatusDescription"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.StatusDescription))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[12] {
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Wait) {
					} else {
						r.EncodeInt(int64(x.Wait))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Wait"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Wait) {
					} else {
						r.EncodeInt(int64(x.Wait))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[13] {
					yy43 := &x.WaitUntil
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else if yym45 := z.TimeRtidIfBinc(); yym45 != 0 {
						r.EncodeBuiltin(yym45, yy43)
					} else if z.HasExtensions() && z.EncExt(yy43) {
					} else if yym44 {
						z.EncBinaryMarshal(yy43)
					} else if !yym44 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy43)
					} else {
						z.EncFallback(yy43)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("WaitUntil"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yy46 := &x.WaitUntil
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else if yym48 := z.TimeRtidIfBinc(); yym48 != 0 {
						r.EncodeBuiltin(yym48, yy46)
					} else if z.HasExtensions() && z.EncExt(yy46) {
					} else if yym47 {
						z.EncBinaryMarshal(yy46)
					} else if !yym47 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy46)
					} else {
						z.EncFallback(yy46)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NextEval))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NextEval"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.NextEval))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[15] {
					yym53 := z.EncBinary()
					_ = yym53
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreviousEval))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("PreviousEval"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym54 := z.EncBinary()
					_ = yym54
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.PreviousEval))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[16] {
					yym56 := z.EncBinary()
					_ = yym56
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.BlockedEval))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("BlockedEval"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym57 := z.EncBinary()
					_ = yym57
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.BlockedEval))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[17] {
					if x.FailedTGAllocs == nil {
						r.EncodeNil()
					} else {
						yym59 := z.EncBinary()
						_ = yym59
						if false {
						} else {
							h.encMapstringPtrtoAllocMetric((map[string]*AllocMetric)(x.FailedTGAllocs), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("FailedTGAllocs"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.FailedTGAllocs == nil {
						r.EncodeNil()
					} else {
						yym60 := z.EncBinary()
						_ = yym60
						if false {
						} else {
							h.encMapstringPtrtoAllocMetric((map[string]*AllocMetric)(x.FailedTGAllocs), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[18] {
					if x.ClassEligibility == nil {
						r.EncodeNil()
					} else {
						yym62 := z.EncBinary()
						_ = yym62
						if false {
						} else {
							z.F.EncMapStringBoolV(x.ClassEligibility, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ClassEligibility"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.ClassEligibility == nil {
						r.EncodeNil()
					} else {
						yym63 := z.EncBinary()
						_ = yym63
						if false {
						} else {
							z.F.EncMapStringBoolV(x.ClassEligibility, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[19] {
					yym65 := z.EncBinary()
					_ = yym65
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.QuotaLimitReached))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("QuotaLimitReached"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym66 := z.EncBinary()
					_ = yym66
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.QuotaLimitReached))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[20] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeBool(bool(x.EscapedComputedClass))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("EscapedComputedClass"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeBool(bool(x.EscapedComputedClass))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[21] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeBool(bool(x.AnnotatePlan))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("AnnotatePlan"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeBool(bool(x.AnnotatePlan))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[22] {
					if x.QueuedAllocations == nil {
						r.EncodeNil()
					} else {
						yym74 := z.EncBinary()
						_ = yym74
						if false {
						} else {
							z.F.EncMapStringIntV(x.QueuedAllocations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("QueuedAllocations"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.QueuedAllocations == nil {
						r.EncodeNil()
					} else {
						yym75 := z.EncBinary()
						_ = yym75
						if false {
						} else {
							z.F.EncMapStringIntV(x.QueuedAllocations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[23] {
					yym77 := z.EncBinary()
					_ = yym77
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.LeaderACL))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("LeaderACL"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym78 := z.EncBinary()
					_ = yym78
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.LeaderACL))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[24] {
					yym80 := z.EncBinary()
					_ = yym80
					if false {
					} else {
						r.EncodeUint(uint64(x.SnapshotIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("SnapshotIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym81 := z.EncBinary()
					_ = yym81
					if false {
					} else {
						r.EncodeUint(uint64(x.SnapshotIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[25] {
					yym83 := z.EncBinary()
					_ = yym83
					if false {
					} else {
						r.EncodeUint(uint64(x.CreateIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[25] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeUint(uint64(x.CreateIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[26] {
					yym86 := z.EncBinary()
					_ = yym86
					if false {
					} else {
						r.EncodeUint(uint64(x.ModifyIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[26] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeUint(uint64(x.ModifyIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[27] {
					yym89 := z.EncBinary()
					_ = yym89
					if false {
					} else {
						r.EncodeInt(int64(x.CreateTime))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[27] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("CreateTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeInt(int64(x.CreateTime))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[28] {
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeInt(int64(x.ModifyTime))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[28] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("ModifyTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeInt(int64(x.ModifyTime))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Evaluation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Evaluation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv8 := &x.Priority
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv10 := &x.Type
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "TriggeredBy":
			if r.TryDecodeAsNil() {
				x.TriggeredBy = ""
			} else {
				yyv12 := &x.TriggeredBy
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv14 := &x.JobID
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv16 := &x.JobModifyIndex
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*uint64)(yyv16)) = uint64(r.DecodeUint(64))
				}
			}
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv18 := &x.NodeID
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "NodeModifyIndex":
			if r.TryDecodeAsNil() {
				x.NodeModifyIndex = 0
			} else {
				yyv20 := &x.NodeModifyIndex
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*uint64)(yyv20)) = uint64(r.DecodeUint(64))
				}
			}
		case "DeploymentID":
			if r.TryDecodeAsNil() {
				x.DeploymentID = ""
			} else {
				yyv22 := &x.DeploymentID
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv24 := &x.Status
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv26 := &x.StatusDescription
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "Wait":
			if r.TryDecodeAsNil() {
				x.Wait = 0
			} else {
				yyv28 := &x.Wait
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv28) {
				} else {
					*((*int64)(yyv28)) = int64(r.DecodeInt(64))
				}
			}
		case "WaitUntil":
			if r.TryDecodeAsNil() {
				x.WaitUntil = time.Time{}
			} else {
				yyv30 := &x.WaitUntil
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else if yym32 := z.TimeRtidIfBinc(); yym32 != 0 {
					r.DecodeBuiltin(yym32, yyv30)
				} else if z.HasExtensions() && z.DecExt(yyv30) {
				} else if yym31 {
					z.DecBinaryUnmarshal(yyv30)
				} else if !yym31 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv30)
				} else {
					z.DecFallback(yyv30, false)
				}
			}
		case "NextEval":
			if r.TryDecodeAsNil() {
				x.NextEval = ""
			} else {
				yyv33 := &x.NextEval
				yym34 := z.DecBinary()
				_ = yym34
				if false {
				} else {
					*((*string)(yyv33)) = r.DecodeString()
				}
			}
		case "PreviousEval":
			if r.TryDecodeAsNil() {
				x.PreviousEval = ""
			} else {
				yyv35 := &x.PreviousEval
				yym36 := z.DecBinary()
				_ = yym36
				if false {
				} else {
					*((*string)(yyv35)) = r.DecodeString()
				}
			}
		case "BlockedEval":
			if r.TryDecodeAsNil() {
				x.BlockedEval = ""
			} else {
				yyv37 := &x.BlockedEval
				yym38 := z.DecBinary()
				_ = yym38
				if false {
				} else {
					*((*string)(yyv37)) = r.DecodeString()
				}
			}
		case "FailedTGAllocs":
			if r.TryDecodeAsNil() {
				x.FailedTGAllocs = nil
			} else {
				yyv39 := &x.FailedTGAllocs
				yym40 := z.DecBinary()
				_ = yym40
				if false {
				} else {
					h.decMapstringPtrtoAllocMetric((*map[string]*AllocMetric)(yyv39), d)
				}
			}
		case "ClassEligibility":
			if r.TryDecodeAsNil() {
				x.ClassEligibility = nil
			} else {
				yyv41 := &x.ClassEligibility
				yym42 := z.DecBinary()
				_ = yym42
				if false {
				} else {
					z.F.DecMapStringBoolX(yyv41, false, d)
				}
			}
		case "QuotaLimitReached":
			if r.TryDecodeAsNil() {
				x.QuotaLimitReached = ""
			} else {
				yyv43 := &x.QuotaLimitReached
				yym44 := z.DecBinary()
				_ = yym44
				if false {
				} else {
					*((*string)(yyv43)) = r.DecodeString()
				}
			}
		case "EscapedComputedClass":
			if r.TryDecodeAsNil() {
				x.EscapedComputedClass = false
			} else {
				yyv45 := &x.EscapedComputedClass
				yym46 := z.DecBinary()
				_ = yym46
				if false {
				} else {
					*((*bool)(yyv45)) = r.DecodeBool()
				}
			}
		case "AnnotatePlan":
			if r.TryDecodeAsNil() {
				x.AnnotatePlan = false
			} else {
				yyv47 := &x.AnnotatePlan
				yym48 := z.DecBinary()
				_ = yym48
				if false {
				} else {
					*((*bool)(yyv47)) = r.DecodeBool()
				}
			}
		case "QueuedAllocations":
			if r.TryDecodeAsNil() {
				x.QueuedAllocations = nil
			} else {
				yyv49 := &x.QueuedAllocations
				yym50 := z.DecBinary()
				_ = yym50
				if false {
				} else {
					z.F.DecMapStringIntX(yyv49, false, d)
				}
			}
		case "LeaderACL":
			if r.TryDecodeAsNil() {
				x.LeaderACL = ""
			} else {
				yyv51 := &x.LeaderACL
				yym52 := z.DecBinary()
				_ = yym52
				if false {
				} else {
					*((*string)(yyv51)) = r.DecodeString()
				}
			}
		case "SnapshotIndex":
			if r.TryDecodeAsNil() {
				x.SnapshotIndex = 0
			} else {
				yyv53 := &x.SnapshotIndex
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else {
					*((*uint64)(yyv53)) = uint64(r.DecodeUint(64))
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv55 := &x.CreateIndex
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else {
					*((*uint64)(yyv55)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv57 := &x.ModifyIndex
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*uint64)(yyv57)) = uint64(r.DecodeUint(64))
				}
			}
		case "CreateTime":
			if r.TryDecodeAsNil() {
				x.CreateTime = 0
			} else {
				yyv59 := &x.CreateTime
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					*((*int64)(yyv59)) = int64(r.DecodeInt(64))
				}
			}
		case "ModifyTime":
			if r.TryDecodeAsNil() {
				x.ModifyTime = 0
			} else {
				yyv61 := &x.ModifyTime
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					*((*int64)(yyv61)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Evaluation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv64 := &x.ID
		yym65 := z.DecBinary()
		_ = yym65
		if false {
		} else {
			*((*string)(yyv64)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv66 := &x.Namespace
		yym67 := z.DecBinary()
		_ = yym67
		if false {
		} else {
			*((*string)(yyv66)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv68 := &x.Priority
		yym69 := z.DecBinary()
		_ = yym69
		if false {
		} else {
			*((*int)(yyv68)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv70 := &x.Type
		yym71 := z.DecBinary()
		_ = yym71
		if false {
		} else {
			*((*string)(yyv70)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.TriggeredBy = ""
	} else {
		yyv72 := &x.TriggeredBy
		yym73 := z.DecBinary()
		_ = yym73
		if false {
		} else {
			*((*string)(yyv72)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv74 := &x.JobID
		yym75 := z.DecBinary()
		_ = yym75
		if false {
		} else {
			*((*string)(yyv74)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv76 := &x.JobModifyIndex
		yym77 := z.DecBinary()
		_ = yym77
		if false {
		} else {
			*((*uint64)(yyv76)) = uint64(r.DecodeUint(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv78 := &x.NodeID
		yym79 := z.DecBinary()
		_ = yym79
		if false {
		} else {
			*((*string)(yyv78)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeModifyIndex = 0
	} else {
		yyv80 := &x.NodeModifyIndex
		yym81 := z.DecBinary()
		_ = yym81
		if false {
		} else {
			*((*uint64)(yyv80)) = uint64(r.DecodeUint(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentID = ""
	} else {
		yyv82 := &x.DeploymentID
		yym83 := z.DecBinary()
		_ = yym83
		if false {
		} else {
			*((*string)(yyv82)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv84 := &x.Status
		yym85 := z.DecBinary()
		_ = yym85
		if false {
		} else {
			*((*string)(yyv84)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv86 := &x.StatusDescription
		yym87 := z.DecBinary()
		_ = yym87
		if false {
		} else {
			*((*string)(yyv86)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Wait = 0
	} else {
		yyv88 := &x.Wait
		yym89 := z.DecBinary()
		_ = yym89
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv88) {
		} else {
			*((*int64)(yyv88)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.WaitUntil = time.Time{}
	} else {
		yyv90 := &x.WaitUntil
		yym91 := z.DecBinary()
		_ = yym91
		if false {
		} else if yym92 := z.TimeRtidIfBinc(); yym92 != 0 {
			r.DecodeBuiltin(yym92, yyv90)
		} else if z.HasExtensions() && z.DecExt(yyv90) {
		} else if yym91 {
			z.DecBinaryUnmarshal(yyv90)
		} else if !yym91 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv90)
		} else {
			z.DecFallback(yyv90, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NextEval = ""
	} else {
		yyv93 := &x.NextEval
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			*((*string)(yyv93)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreviousEval = ""
	} else {
		yyv95 := &x.PreviousEval
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			*((*string)(yyv95)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.BlockedEval = ""
	} else {
		yyv97 := &x.BlockedEval
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			*((*string)(yyv97)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.FailedTGAllocs = nil
	} else {
		yyv99 := &x.FailedTGAllocs
		yym100 := z.DecBinary()
		_ = yym100
		if false {
		} else {
			h.decMapstringPtrtoAllocMetric((*map[string]*AllocMetric)(yyv99), d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ClassEligibility = nil
	} else {
		yyv101 := &x.ClassEligibility
		yym102 := z.DecBinary()
		_ = yym102
		if false {
		} else {
			z.F.DecMapStringBoolX(yyv101, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.QuotaLimitReached = ""
	} else {
		yyv103 := &x.QuotaLimitReached
		yym104 := z.DecBinary()
		_ = yym104
		if false {
		} else {
			*((*string)(yyv103)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EscapedComputedClass = false
	} else {
		yyv105 := &x.EscapedComputedClass
		yym106 := z.DecBinary()
		_ = yym106
		if false {
		} else {
			*((*bool)(yyv105)) = r.DecodeBool()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AnnotatePlan = false
	} else {
		yyv107 := &x.AnnotatePlan
		yym108 := z.DecBinary()
		_ = yym108
		if false {
		} else {
			*((*bool)(yyv107)) = r.DecodeBool()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.QueuedAllocations = nil
	} else {
		yyv109 := &x.QueuedAllocations
		yym110 := z.DecBinary()
		_ = yym110
		if false {
		} else {
			z.F.DecMapStringIntX(yyv109, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LeaderACL = ""
	} else {
		yyv111 := &x.LeaderACL
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			*((*string)(yyv111)) = r.DecodeString()
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SnapshotIndex = 0
	} else {
		yyv113 := &x.SnapshotIndex
		yym114 := z.DecBinary()
		_ = yym114
		if false {
		} else {
			*((*uint64)(yyv113)) = uint64(r.DecodeUint(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv115 := &x.CreateIndex
		yym116 := z.DecBinary()
		_ = yym116
		if false {
		} else {
			*((*uint64)(yyv115)) = uint64(r.DecodeUint(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv117 := &x.ModifyIndex
		yym118 := z.DecBinary()
		_ = yym118
		if false {
		} else {
			*((*uint64)(yyv117)) = uint64(r.DecodeUint(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateTime = 0
	} else {
		yyv119 := &x.CreateTime
		yym120 := z.DecBinary()
		_ = yym120
		if false {
		} else {
			*((*int64)(yyv119)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyTime = 0
	} else {
		yyv121 := &x.ModifyTime
		yym122 := z.DecBinary()
		_ = yym122
		if false {
		} else {
			*((*int64)(yyv121)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *Plan) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.EvalID != ""
			yyq2[1] = x.EvalToken != ""
			yyq2[2] = x.Priority != 0
			yyq2[3] = x.AllAtOnce != false
			yyq2[4] = x.Job != nil
			yyq2[5] = len(x.NodeUpdate) != 0
			yyq2[6] = len(x.NodeAllocation) != 0
			yyq2[7] = x.Annotations != nil
			yyq2[8] = x.Deployment != nil
			yyq2[9] = len(x.DeploymentUpdates) != 0
			yyq2[10] = len(x.NodePreemptions) != 0
			yyq2[11] = x.SnapshotIndex != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("EvalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.EvalID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.EvalToken))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8100, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("EvalToken"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8100, string(x.EvalToken))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeInt(int64(x.Priority))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Priority"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeInt(int64(x.Priority))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeBool(bool(x.AllAtOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("AllAtOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeBool(bool(x.AllAtOnce))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[4] {
					if x.Job == nil {
						r.EncodeNil()
					} else {
						x.Job.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Job"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.Job == nil {
						r.EncodeNil()
					} else {
						x.Job.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[5] {
					if x.NodeUpdate == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeUpdate), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NodeUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.NodeUpdate == nil {
						r.EncodeNil()
					} else {
						yym20 := z.EncBinary()
						_ = yym20
						if false {
						} else {
							h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeUpdate), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[6] {
					if x.NodeAllocation == nil {
						r.EncodeNil()
					} else {
						yym22 := z.EncBinary()
						_ = yym22
						if false {
						} else {
							h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeAllocation), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NodeAllocation"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.NodeAllocation == nil {
						r.EncodeNil()
					} else {
						yym23 := z.EncBinary()
						_ = yym23
						if false {
						} else {
							h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeAllocation), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[7] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						x.Annotations.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						x.Annotations.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[8] {
					if x.Deployment == nil {
						r.EncodeNil()
					} else {
						x.Deployment.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("Deployment"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.Deployment == nil {
						r.EncodeNil()
					} else {
						x.Deployment.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[9] {
					if x.DeploymentUpdates == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else {
							h.encSlicePtrtoDeploymentStatusUpdate(([]*DeploymentStatusUpdate)(x.DeploymentUpdates), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("DeploymentUpdates"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.DeploymentUpdates == nil {
						r.EncodeNil()
					} else {
						yym32 := z.EncBinary()
						_ = yym32
						if false {
						} else {
							h.encSlicePtrtoDeploymentStatusUpdate(([]*DeploymentStatusUpdate)(x.DeploymentUpdates), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[10] {
					if x.NodePreemptions == nil {
						r.EncodeNil()
					} else {
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodePreemptions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("NodePreemptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					if x.NodePreemptions == nil {
						r.EncodeNil()
					} else {
						yym35 := z.EncBinary()
						_ = yym35
						if false {
						} else {
							h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodePreemptions), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if yyq2[11] {
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeUint(uint64(x.SnapshotIndex))
					}
				} else {
					r.EncodeUint(0)
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey100)
					r.EncodeString(codecSelferC_UTF8100, string("SnapshotIndex"))
					z.EncSendContainerState(codecSelfer_containerMapValue100)
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeUint(uint64(x.SnapshotIndex))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *Plan) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *Plan) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalToken":
			if r.TryDecodeAsNil() {
				x.EvalToken = ""
			} else {
				yyv6 := &x.EvalToken
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv8 := &x.Priority
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		case "AllAtOnce":
			if r.TryDecodeAsNil() {
				x.AllAtOnce = false
			} else {
				yyv10 := &x.AllAtOnce
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "NodeUpdate":
			if r.TryDecodeAsNil() {
				x.NodeUpdate = nil
			} else {
				yyv13 := &x.NodeUpdate
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv13), d)
				}
			}
		case "NodeAllocation":
			if r.TryDecodeAsNil() {
				x.NodeAllocation = nil
			} else {
				yyv15 := &x.NodeAllocation
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv15), d)
				}
			}
		case "Annotations":
			if r.TryDecodeAsNil() {
				if x.Annotations != nil {
					x.Annotations = nil
				}
			} else {
				if x.Annotations == nil {
					x.Annotations = new(PlanAnnotations)
				}
				x.Annotations.CodecDecodeSelf(d)
			}
		case "Deployment":
			if r.TryDecodeAsNil() {
				if x.Deployment != nil {
					x.Deployment = nil
				}
			} else {
				if x.Deployment == nil {
					x.Deployment = new(Deployment)
				}
				x.Deployment.CodecDecodeSelf(d)
			}
		case "DeploymentUpdates":
			if r.TryDecodeAsNil() {
				x.DeploymentUpdates = nil
			} else {
				yyv19 := &x.DeploymentUpdates
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					h.decSlicePtrtoDeploymentStatusUpdate((*[]*DeploymentStatusUpdate)(yyv19), d)
				}
			}
		case "NodePreemptions":
			if r.TryDecodeAsNil() {
				x.NodePreemptions = nil
			} else {
				yyv21 := &x.NodePreemptions
				yym22 := z.DecBinary()
				_ = yym22
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv21), d)
				}
			}
		case "SnapshotIndex":
			if r.TryDecodeAsNil() {
				x.SnapshotIndex = 0
			} else {
				yyv23 := &x.SnapshotIndex
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else {
					*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *Plan) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj25 int
	var yyb25 bool
	var yyhl25 bool = l >= 0
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv26 := &x.EvalID
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else {
			*((*string)(yyv26)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.EvalToken = ""
	} else {
		yyv28 := &x.EvalToken
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			*((*string)(yyv28)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv30 := &x.Priority
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			*((*int)(yyv30)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllAtOnce = false
	} else {
		yyv32 := &x.AllAtOnce
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			*((*bool)(yyv32)) = r.DecodeBool()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeUpdate = nil
	} else {
		yyv35 := &x.NodeUpdate
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv35), d)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeAllocation = nil
	} else {
		yyv37 := &x.NodeAllocation
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv37), d)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Annotations != nil {
			x.Annotations = nil
		}
	} else {
		if x.Annotations == nil {
			x.Annotations = new(PlanAnnotations)
		}
		x.Annotations.CodecDecodeSelf(d)
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Deployment != nil {
			x.Deployment = nil
		}
	} else {
		if x.Deployment == nil {
			x.Deployment = new(Deployment)
		}
		x.Deployment.CodecDecodeSelf(d)
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentUpdates = nil
	} else {
		yyv41 := &x.DeploymentUpdates
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			h.decSlicePtrtoDeploymentStatusUpdate((*[]*DeploymentStatusUpdate)(yyv41), d)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodePreemptions = nil
	} else {
		yyv43 := &x.NodePreemptions
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv43), d)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SnapshotIndex = 0
	} else {
		yyv45 := &x.SnapshotIndex
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*uint64)(yyv45)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj25++
		if yyhl25 {
			yyb25 = yyj25 > l
		} else {
			yyb25 = r.CheckBreak()
		}
		if yyb25 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj25-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *PlanResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeUpdate == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeUpdate), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeUpdate"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeUpdate == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeUpdate), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodeAllocation == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeAllocation), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodeAllocation"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodeAllocation == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeAllocation), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Deployment == nil {
					r.EncodeNil()
				} else {
					x.Deployment.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Deployment"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Deployment == nil {
					r.EncodeNil()
				} else {
					x.Deployment.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DeploymentUpdates == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoDeploymentStatusUpdate(([]*DeploymentStatusUpdate)(x.DeploymentUpdates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DeploymentUpdates"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DeploymentUpdates == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoDeploymentStatusUpdate(([]*DeploymentStatusUpdate)(x.DeploymentUpdates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.NodePreemptions == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodePreemptions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NodePreemptions"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.NodePreemptions == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodePreemptions), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.RefreshIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("RefreshIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.RefreshIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeUint(uint64(x.AllocIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllocIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeUint(uint64(x.AllocIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *PlanResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *PlanResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "NodeUpdate":
			if r.TryDecodeAsNil() {
				x.NodeUpdate = nil
			} else {
				yyv4 := &x.NodeUpdate
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv4), d)
				}
			}
		case "NodeAllocation":
			if r.TryDecodeAsNil() {
				x.NodeAllocation = nil
			} else {
				yyv6 := &x.NodeAllocation
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv6), d)
				}
			}
		case "Deployment":
			if r.TryDecodeAsNil() {
				if x.Deployment != nil {
					x.Deployment = nil
				}
			} else {
				if x.Deployment == nil {
					x.Deployment = new(Deployment)
				}
				x.Deployment.CodecDecodeSelf(d)
			}
		case "DeploymentUpdates":
			if r.TryDecodeAsNil() {
				x.DeploymentUpdates = nil
			} else {
				yyv9 := &x.DeploymentUpdates
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					h.decSlicePtrtoDeploymentStatusUpdate((*[]*DeploymentStatusUpdate)(yyv9), d)
				}
			}
		case "NodePreemptions":
			if r.TryDecodeAsNil() {
				x.NodePreemptions = nil
			} else {
				yyv11 := &x.NodePreemptions
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv11), d)
				}
			}
		case "RefreshIndex":
			if r.TryDecodeAsNil() {
				x.RefreshIndex = 0
			} else {
				yyv13 := &x.RefreshIndex
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
				}
			}
		case "AllocIndex":
			if r.TryDecodeAsNil() {
				x.AllocIndex = 0
			} else {
				yyv15 := &x.AllocIndex
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *PlanResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj17 int
	var yyb17 bool
	var yyhl17 bool = l >= 0
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeUpdate = nil
	} else {
		yyv18 := &x.NodeUpdate
		yym19 := z.DecBinary()
		_ = yym19
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv18), d)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodeAllocation = nil
	} else {
		yyv20 := &x.NodeAllocation
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv20), d)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Deployment != nil {
			x.Deployment = nil
		}
	} else {
		if x.Deployment == nil {
			x.Deployment = new(Deployment)
		}
		x.Deployment.CodecDecodeSelf(d)
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DeploymentUpdates = nil
	} else {
		yyv23 := &x.DeploymentUpdates
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decSlicePtrtoDeploymentStatusUpdate((*[]*DeploymentStatusUpdate)(yyv23), d)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NodePreemptions = nil
	} else {
		yyv25 := &x.NodePreemptions
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv25), d)
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.RefreshIndex = 0
	} else {
		yyv27 := &x.RefreshIndex
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
		}
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = r.CheckBreak()
	}
	if yyb17 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllocIndex = 0
	} else {
		yyv29 := &x.AllocIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj17++
		if yyhl17 {
			yyb17 = yyj17 > l
		} else {
			yyb17 = r.CheckBreak()
		}
		if yyb17 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj17-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *PlanAnnotations) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.DesiredTGUpdates == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringPtrtoDesiredUpdates((map[string]*DesiredUpdates)(x.DesiredTGUpdates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DesiredTGUpdates"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.DesiredTGUpdates == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringPtrtoDesiredUpdates((map[string]*DesiredUpdates)(x.DesiredTGUpdates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.PreemptedAllocs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.PreemptedAllocs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("PreemptedAllocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.PreemptedAllocs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.PreemptedAllocs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *PlanAnnotations) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *PlanAnnotations) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "DesiredTGUpdates":
			if r.TryDecodeAsNil() {
				x.DesiredTGUpdates = nil
			} else {
				yyv4 := &x.DesiredTGUpdates
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringPtrtoDesiredUpdates((*map[string]*DesiredUpdates)(yyv4), d)
				}
			}
		case "PreemptedAllocs":
			if r.TryDecodeAsNil() {
				x.PreemptedAllocs = nil
			} else {
				yyv6 := &x.PreemptedAllocs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv6), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *PlanAnnotations) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DesiredTGUpdates = nil
	} else {
		yyv9 := &x.DesiredTGUpdates
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			h.decMapstringPtrtoDesiredUpdates((*map[string]*DesiredUpdates)(yyv9), d)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.PreemptedAllocs = nil
	} else {
		yyv11 := &x.PreemptedAllocs
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv11), d)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *DesiredUpdates) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Ignore))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Ignore"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Ignore))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Place))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Place"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Place))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Migrate))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Migrate"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Migrate))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.Stop))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Stop"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Stop))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.InPlaceUpdate))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("InPlaceUpdate"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.InPlaceUpdate))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.DestructiveUpdate))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("DestructiveUpdate"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.DestructiveUpdate))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeUint(uint64(x.Canary))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Canary"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeUint(uint64(x.Canary))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeUint(uint64(x.Preemptions))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Preemptions"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeUint(uint64(x.Preemptions))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *DesiredUpdates) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *DesiredUpdates) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Ignore":
			if r.TryDecodeAsNil() {
				x.Ignore = 0
			} else {
				yyv4 := &x.Ignore
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "Place":
			if r.TryDecodeAsNil() {
				x.Place = 0
			} else {
				yyv6 := &x.Place
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "Migrate":
			if r.TryDecodeAsNil() {
				x.Migrate = 0
			} else {
				yyv8 := &x.Migrate
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "Stop":
			if r.TryDecodeAsNil() {
				x.Stop = 0
			} else {
				yyv10 := &x.Stop
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "InPlaceUpdate":
			if r.TryDecodeAsNil() {
				x.InPlaceUpdate = 0
			} else {
				yyv12 := &x.InPlaceUpdate
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "DestructiveUpdate":
			if r.TryDecodeAsNil() {
				x.DestructiveUpdate = 0
			} else {
				yyv14 := &x.DestructiveUpdate
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		case "Canary":
			if r.TryDecodeAsNil() {
				x.Canary = 0
			} else {
				yyv16 := &x.Canary
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*uint64)(yyv16)) = uint64(r.DecodeUint(64))
				}
			}
		case "Preemptions":
			if r.TryDecodeAsNil() {
				x.Preemptions = 0
			} else {
				yyv18 := &x.Preemptions
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*uint64)(yyv18)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *DesiredUpdates) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Ignore = 0
	} else {
		yyv21 := &x.Ignore
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Place = 0
	} else {
		yyv23 := &x.Place
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Migrate = 0
	} else {
		yyv25 := &x.Migrate
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Stop = 0
	} else {
		yyv27 := &x.Stop
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.InPlaceUpdate = 0
	} else {
		yyv29 := &x.InPlaceUpdate
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.DestructiveUpdate = 0
	} else {
		yyv31 := &x.DestructiveUpdate
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*uint64)(yyv31)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Canary = 0
	} else {
		yyv33 := &x.Canary
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Preemptions = 0
	} else {
		yyv35 := &x.Preemptions
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*uint64)(yyv35)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *KeyringResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Messages == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncMapStringStringV(x.Messages, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Messages"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Messages == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncMapStringStringV(x.Messages, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Keys == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringIntV(x.Keys, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Keys"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Keys == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringIntV(x.Keys, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.NumNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("NumNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.NumNodes))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *KeyringResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *KeyringResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Messages":
			if r.TryDecodeAsNil() {
				x.Messages = nil
			} else {
				yyv4 := &x.Messages
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4, false, d)
				}
			}
		case "Keys":
			if r.TryDecodeAsNil() {
				x.Keys = nil
			} else {
				yyv6 := &x.Keys
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringIntX(yyv6, false, d)
				}
			}
		case "NumNodes":
			if r.TryDecodeAsNil() {
				x.NumNodes = 0
			} else {
				yyv8 := &x.NumNodes
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize100))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *KeyringResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Messages = nil
	} else {
		yyv11 := &x.Messages
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			z.F.DecMapStringStringX(yyv11, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Keys = nil
	} else {
		yyv13 := &x.Keys
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecMapStringIntX(yyv13, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.NumNodes = 0
	} else {
		yyv15 := &x.NumNodes
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*int)(yyv15)) = int(r.DecodeInt(codecSelferBitsize100))
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *KeyringRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Key"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Key))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *KeyringRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *KeyringRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				yyv4 := &x.Key
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *KeyringRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		yyv7 := &x.Key
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*string)(yyv7)) = r.DecodeString()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *RecoverableError) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Err))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Err"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Err))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Recoverable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Recoverable"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Recoverable))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *RecoverableError) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *RecoverableError) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Err":
			if r.TryDecodeAsNil() {
				x.Err = ""
			} else {
				yyv4 := &x.Err
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Recoverable":
			if r.TryDecodeAsNil() {
				x.Recoverable = false
			} else {
				yyv6 := &x.Recoverable
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *RecoverableError) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Err = ""
	} else {
		yyv9 := &x.Err
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Recoverable = false
	} else {
		yyv11 := &x.Recoverable
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*bool)(yyv11)) = r.DecodeBool()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *WrappedServerError) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Err == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.EncFallback(x.Err)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Err"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Err == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.EncFallback(x.Err)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *WrappedServerError) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *WrappedServerError) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Err":
			if r.TryDecodeAsNil() {
				x.Err = nil
			} else {
				yyv4 := &x.Err
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.DecFallback(yyv4, true)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *WrappedServerError) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Err = nil
	} else {
		yyv7 := &x.Err
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			z.DecFallback(yyv7, true)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Description))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Description"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Description))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Rules))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Rules"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Rules))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Hash == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Hash))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Hash"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Hash == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Hash))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				yyv6 := &x.Description
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Rules":
			if r.TryDecodeAsNil() {
				x.Rules = ""
			} else {
				yyv8 := &x.Rules
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Hash":
			if r.TryDecodeAsNil() {
				x.Hash = nil
			} else {
				yyv10 := &x.Hash
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*yyv10 = r.DecodeBytes(*(*[]byte)(yyv10), false, false)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv12 := &x.CreateIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv14 := &x.ModifyIndex
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv17 := &x.Name
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		yyv19 := &x.Description
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Rules = ""
	} else {
		yyv21 := &x.Rules
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Hash = nil
	} else {
		yyv23 := &x.Hash
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*yyv23 = r.DecodeBytes(*(*[]byte)(yyv23), false, false)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv25 := &x.CreateIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv27 := &x.ModifyIndex
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLPolicyListStub) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Description))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Description"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Description))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Hash == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Hash))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Hash"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Hash == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Hash))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLPolicyListStub) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLPolicyListStub) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				yyv6 := &x.Description
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Hash":
			if r.TryDecodeAsNil() {
				x.Hash = nil
			} else {
				yyv8 := &x.Hash
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*yyv8 = r.DecodeBytes(*(*[]byte)(yyv8), false, false)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv10 := &x.CreateIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv12 := &x.ModifyIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLPolicyListStub) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv15 := &x.Name
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		yyv17 := &x.Description
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Hash = nil
	} else {
		yyv19 := &x.Hash
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*yyv19 = r.DecodeBytes(*(*[]byte)(yyv19), false, false)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv21 := &x.CreateIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv23 := &x.ModifyIndex
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLPolicyListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLPolicyListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLPolicyListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv6 := &x.Namespace
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv16 := &x.AuthToken
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv18 := &x.Forwarded
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLPolicyListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv21 := &x.Region
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv23 := &x.Namespace
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv33 := &x.AuthToken
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv35 := &x.Forwarded
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*bool)(yyv35)) = r.DecodeBool()
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLPolicySpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLPolicySpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLPolicySpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLPolicySpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv23 := &x.Name
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLPolicySetRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Names"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLPolicySetRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLPolicySetRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv4 := &x.Names
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLPolicySetRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv23 := &x.Names
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			z.F.DecSliceStringX(yyv23, false, d)
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLPolicyListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoACLPolicyListStub(([]*ACLPolicyListStub)(x.Policies), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Policies"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoACLPolicyListStub(([]*ACLPolicyListStub)(x.Policies), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLPolicyListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLPolicyListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Policies":
			if r.TryDecodeAsNil() {
				x.Policies = nil
			} else {
				yyv4 := &x.Policies
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoACLPolicyListStub((*[]*ACLPolicyListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLPolicyListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Policies = nil
	} else {
		yyv13 := &x.Policies
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoACLPolicyListStub((*[]*ACLPolicyListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SingleACLPolicyResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Policy == nil {
					r.EncodeNil()
				} else {
					x.Policy.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Policy"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Policy == nil {
					r.EncodeNil()
				} else {
					x.Policy.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SingleACLPolicyResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SingleACLPolicyResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Policy":
			if r.TryDecodeAsNil() {
				if x.Policy != nil {
					x.Policy = nil
				}
			} else {
				if x.Policy == nil {
					x.Policy = new(ACLPolicy)
				}
				x.Policy.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SingleACLPolicyResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Policy != nil {
			x.Policy = nil
		}
	} else {
		if x.Policy == nil {
			x.Policy = new(ACLPolicy)
		}
		x.Policy.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLPolicySetResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringPtrtoACLPolicy((map[string]*ACLPolicy)(x.Policies), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Policies"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringPtrtoACLPolicy((map[string]*ACLPolicy)(x.Policies), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLPolicySetResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLPolicySetResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Policies":
			if r.TryDecodeAsNil() {
				x.Policies = nil
			} else {
				yyv4 := &x.Policies
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringPtrtoACLPolicy((*map[string]*ACLPolicy)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLPolicySetResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Policies = nil
	} else {
		yyv13 := &x.Policies
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decMapstringPtrtoACLPolicy((*map[string]*ACLPolicy)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLPolicyDeleteRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Names"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLPolicyDeleteRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLPolicyDeleteRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv4 := &x.Names
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLPolicyDeleteRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv15 := &x.Names
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLPolicyUpsertRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoACLPolicy(([]*ACLPolicy)(x.Policies), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Policies"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoACLPolicy(([]*ACLPolicy)(x.Policies), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLPolicyUpsertRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLPolicyUpsertRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Policies":
			if r.TryDecodeAsNil() {
				x.Policies = nil
			} else {
				yyv4 := &x.Policies
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoACLPolicy((*[]*ACLPolicy)(yyv4), d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLPolicyUpsertRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Policies = nil
	} else {
		yyv15 := &x.Policies
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decSlicePtrtoACLPolicy((*[]*ACLPolicy)(yyv15), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLToken) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AccessorID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AccessorID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AccessorID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SecretID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						z.F.EncSliceStringV(x.Policies, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Policies"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						z.F.EncSliceStringV(x.Policies, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Global))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Global"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Global))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Hash == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Hash))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Hash"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Hash == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Hash))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy25 := &x.CreateTime
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else if yym27 := z.TimeRtidIfBinc(); yym27 != 0 {
					r.EncodeBuiltin(yym27, yy25)
				} else if z.HasExtensions() && z.EncExt(yy25) {
				} else if yym26 {
					z.EncBinaryMarshal(yy25)
				} else if !yym26 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy25)
				} else {
					z.EncFallback(yy25)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy28 := &x.CreateTime
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else if yym30 := z.TimeRtidIfBinc(); yym30 != 0 {
					r.EncodeBuiltin(yym30, yy28)
				} else if z.HasExtensions() && z.EncExt(yy28) {
				} else if yym29 {
					z.EncBinaryMarshal(yy28)
				} else if !yym29 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy28)
				} else {
					z.EncFallback(yy28)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym33 := z.EncBinary()
				_ = yym33
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym36 := z.EncBinary()
				_ = yym36
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLToken) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLToken) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AccessorID":
			if r.TryDecodeAsNil() {
				x.AccessorID = ""
			} else {
				yyv4 := &x.AccessorID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "SecretID":
			if r.TryDecodeAsNil() {
				x.SecretID = ""
			} else {
				yyv6 := &x.SecretID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv10 := &x.Type
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Policies":
			if r.TryDecodeAsNil() {
				x.Policies = nil
			} else {
				yyv12 := &x.Policies
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					z.F.DecSliceStringX(yyv12, false, d)
				}
			}
		case "Global":
			if r.TryDecodeAsNil() {
				x.Global = false
			} else {
				yyv14 := &x.Global
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Hash":
			if r.TryDecodeAsNil() {
				x.Hash = nil
			} else {
				yyv16 := &x.Hash
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*yyv16 = r.DecodeBytes(*(*[]byte)(yyv16), false, false)
				}
			}
		case "CreateTime":
			if r.TryDecodeAsNil() {
				x.CreateTime = time.Time{}
			} else {
				yyv18 := &x.CreateTime
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else if yym20 := z.TimeRtidIfBinc(); yym20 != 0 {
					r.DecodeBuiltin(yym20, yyv18)
				} else if z.HasExtensions() && z.DecExt(yyv18) {
				} else if yym19 {
					z.DecBinaryUnmarshal(yyv18)
				} else if !yym19 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv18)
				} else {
					z.DecFallback(yyv18, false)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv21 := &x.CreateIndex
				yym22 := z.DecBinary()
				_ = yym22
				if false {
				} else {
					*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv23 := &x.ModifyIndex
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else {
					*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLToken) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj25 int
	var yyb25 bool
	var yyhl25 bool = l >= 0
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AccessorID = ""
	} else {
		yyv26 := &x.AccessorID
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else {
			*((*string)(yyv26)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SecretID = ""
	} else {
		yyv28 := &x.SecretID
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			*((*string)(yyv28)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv30 := &x.Name
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			*((*string)(yyv30)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv32 := &x.Type
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			*((*string)(yyv32)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Policies = nil
	} else {
		yyv34 := &x.Policies
		yym35 := z.DecBinary()
		_ = yym35
		if false {
		} else {
			z.F.DecSliceStringX(yyv34, false, d)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Global = false
	} else {
		yyv36 := &x.Global
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else {
			*((*bool)(yyv36)) = r.DecodeBool()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Hash = nil
	} else {
		yyv38 := &x.Hash
		yym39 := z.DecBinary()
		_ = yym39
		if false {
		} else {
			*yyv38 = r.DecodeBytes(*(*[]byte)(yyv38), false, false)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateTime = time.Time{}
	} else {
		yyv40 := &x.CreateTime
		yym41 := z.DecBinary()
		_ = yym41
		if false {
		} else if yym42 := z.TimeRtidIfBinc(); yym42 != 0 {
			r.DecodeBuiltin(yym42, yyv40)
		} else if z.HasExtensions() && z.DecExt(yyv40) {
		} else if yym41 {
			z.DecBinaryUnmarshal(yyv40)
		} else if !yym41 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv40)
		} else {
			z.DecFallback(yyv40, false)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv43 := &x.CreateIndex
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*uint64)(yyv43)) = uint64(r.DecodeUint(64))
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv45 := &x.ModifyIndex
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*uint64)(yyv45)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj25++
		if yyhl25 {
			yyb25 = yyj25 > l
		} else {
			yyb25 = r.CheckBreak()
		}
		if yyb25 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj25-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenListStub) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AccessorID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AccessorID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AccessorID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncSliceStringV(x.Policies, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Policies"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncSliceStringV(x.Policies, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Global))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Global"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Global))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Hash == nil {
					r.EncodeNil()
				} else {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Hash))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Hash"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Hash == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW100, []byte(x.Hash))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yy22 := &x.CreateTime
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else if yym24 := z.TimeRtidIfBinc(); yym24 != 0 {
					r.EncodeBuiltin(yym24, yy22)
				} else if z.HasExtensions() && z.EncExt(yy22) {
				} else if yym23 {
					z.EncBinaryMarshal(yy22)
				} else if !yym23 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy22)
				} else {
					z.EncFallback(yy22)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yy25 := &x.CreateTime
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else if yym27 := z.TimeRtidIfBinc(); yym27 != 0 {
					r.EncodeBuiltin(yym27, yy25)
				} else if z.HasExtensions() && z.EncExt(yy25) {
				} else if yym26 {
					z.EncBinaryMarshal(yy25)
				} else if !yym26 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy25)
				} else {
					z.EncFallback(yy25)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym30 := z.EncBinary()
				_ = yym30
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym33 := z.EncBinary()
				_ = yym33
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenListStub) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenListStub) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AccessorID":
			if r.TryDecodeAsNil() {
				x.AccessorID = ""
			} else {
				yyv4 := &x.AccessorID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv6 := &x.Name
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv8 := &x.Type
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Policies":
			if r.TryDecodeAsNil() {
				x.Policies = nil
			} else {
				yyv10 := &x.Policies
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecSliceStringX(yyv10, false, d)
				}
			}
		case "Global":
			if r.TryDecodeAsNil() {
				x.Global = false
			} else {
				yyv12 := &x.Global
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Hash":
			if r.TryDecodeAsNil() {
				x.Hash = nil
			} else {
				yyv14 := &x.Hash
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*yyv14 = r.DecodeBytes(*(*[]byte)(yyv14), false, false)
				}
			}
		case "CreateTime":
			if r.TryDecodeAsNil() {
				x.CreateTime = time.Time{}
			} else {
				yyv16 := &x.CreateTime
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
					r.DecodeBuiltin(yym18, yyv16)
				} else if z.HasExtensions() && z.DecExt(yyv16) {
				} else if yym17 {
					z.DecBinaryUnmarshal(yyv16)
				} else if !yym17 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv16)
				} else {
					z.DecFallback(yyv16, false)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv19 := &x.CreateIndex
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv21 := &x.ModifyIndex
				yym22 := z.DecBinary()
				_ = yym22
				if false {
				} else {
					*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenListStub) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj23 int
	var yyb23 bool
	var yyhl23 bool = l >= 0
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AccessorID = ""
	} else {
		yyv24 := &x.AccessorID
		yym25 := z.DecBinary()
		_ = yym25
		if false {
		} else {
			*((*string)(yyv24)) = r.DecodeString()
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv26 := &x.Name
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else {
			*((*string)(yyv26)) = r.DecodeString()
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv28 := &x.Type
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			*((*string)(yyv28)) = r.DecodeString()
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Policies = nil
	} else {
		yyv30 := &x.Policies
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			z.F.DecSliceStringX(yyv30, false, d)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Global = false
	} else {
		yyv32 := &x.Global
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			*((*bool)(yyv32)) = r.DecodeBool()
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Hash = nil
	} else {
		yyv34 := &x.Hash
		yym35 := z.DecBinary()
		_ = yym35
		if false {
		} else {
			*yyv34 = r.DecodeBytes(*(*[]byte)(yyv34), false, false)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateTime = time.Time{}
	} else {
		yyv36 := &x.CreateTime
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else if yym38 := z.TimeRtidIfBinc(); yym38 != 0 {
			r.DecodeBuiltin(yym38, yyv36)
		} else if z.HasExtensions() && z.DecExt(yyv36) {
		} else if yym37 {
			z.DecBinaryUnmarshal(yyv36)
		} else if !yym37 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv36)
		} else {
			z.DecFallback(yyv36, false)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv39 := &x.CreateIndex
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*uint64)(yyv39)) = uint64(r.DecodeUint(64))
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv41 := &x.ModifyIndex
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*uint64)(yyv41)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj23++
		if yyhl23 {
			yyb23 = yyj23 > l
		} else {
			yyb23 = r.CheckBreak()
		}
		if yyb23 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj23-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.GlobalOnly))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("GlobalOnly"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.GlobalOnly))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "GlobalOnly":
			if r.TryDecodeAsNil() {
				x.GlobalOnly = false
			} else {
				yyv4 := &x.GlobalOnly
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.GlobalOnly = false
	} else {
		yyv23 := &x.GlobalOnly
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AccessorID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AccessorID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AccessorID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AccessorID":
			if r.TryDecodeAsNil() {
				x.AccessorID = ""
			} else {
				yyv4 := &x.AccessorID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AccessorID = ""
	} else {
		yyv23 := &x.AccessorID
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenSetRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AccessorIDS == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.AccessorIDS, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AccessorIDS"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AccessorIDS == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.AccessorIDS, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenSetRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenSetRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AccessorIDS":
			if r.TryDecodeAsNil() {
				x.AccessorIDS = nil
			} else {
				yyv4 := &x.AccessorIDS
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenSetRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AccessorIDS = nil
	} else {
		yyv23 := &x.AccessorIDS
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			z.F.DecSliceStringX(yyv23, false, d)
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tokens == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoACLTokenListStub(([]*ACLTokenListStub)(x.Tokens), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tokens"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tokens == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoACLTokenListStub(([]*ACLTokenListStub)(x.Tokens), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Tokens":
			if r.TryDecodeAsNil() {
				x.Tokens = nil
			} else {
				yyv4 := &x.Tokens
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoACLTokenListStub((*[]*ACLTokenListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tokens = nil
	} else {
		yyv13 := &x.Tokens
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoACLTokenListStub((*[]*ACLTokenListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *SingleACLTokenResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Token == nil {
					r.EncodeNil()
				} else {
					x.Token.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Token"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Token == nil {
					r.EncodeNil()
				} else {
					x.Token.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *SingleACLTokenResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *SingleACLTokenResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Token":
			if r.TryDecodeAsNil() {
				if x.Token != nil {
					x.Token = nil
				}
			} else {
				if x.Token == nil {
					x.Token = new(ACLToken)
				}
				x.Token.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *SingleACLTokenResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Token != nil {
			x.Token = nil
		}
	} else {
		if x.Token == nil {
			x.Token = new(ACLToken)
		}
		x.Token.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenSetResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tokens == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringPtrtoACLToken((map[string]*ACLToken)(x.Tokens), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tokens"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tokens == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringPtrtoACLToken((map[string]*ACLToken)(x.Tokens), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenSetResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenSetResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Tokens":
			if r.TryDecodeAsNil() {
				x.Tokens = nil
			} else {
				yyv4 := &x.Tokens
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringPtrtoACLToken((*map[string]*ACLToken)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenSetResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tokens = nil
	} else {
		yyv13 := &x.Tokens
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decMapstringPtrtoACLToken((*map[string]*ACLToken)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ResolveACLTokenRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("SecretID"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.SecretID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ResolveACLTokenRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ResolveACLTokenRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "SecretID":
			if r.TryDecodeAsNil() {
				x.SecretID = ""
			} else {
				yyv4 := &x.SecretID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv18 := &x.AuthToken
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv20 := &x.Forwarded
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ResolveACLTokenRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.SecretID = ""
	} else {
		yyv23 := &x.SecretID
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv25 := &x.Region
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv27 := &x.Namespace
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv29 := &x.MinQueryIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv31 := &x.MaxQueryTime
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv33 := &x.AllowStale
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*bool)(yyv33)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv35 := &x.Prefix
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv37 := &x.AuthToken
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv39 := &x.Forwarded
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*bool)(yyv39)) = r.DecodeBool()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ResolveACLTokenResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Token == nil {
					r.EncodeNil()
				} else {
					x.Token.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Token"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Token == nil {
					r.EncodeNil()
				} else {
					x.Token.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ResolveACLTokenResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ResolveACLTokenResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Token":
			if r.TryDecodeAsNil() {
				if x.Token != nil {
					x.Token = nil
				}
			} else {
				if x.Token == nil {
					x.Token = new(ACLToken)
				}
				x.Token.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ResolveACLTokenResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Token != nil {
			x.Token = nil
		}
	} else {
		if x.Token == nil {
			x.Token = new(ACLToken)
		}
		x.Token.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenDeleteRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.AccessorIDs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.AccessorIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AccessorIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.AccessorIDs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.AccessorIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenDeleteRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenDeleteRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "AccessorIDs":
			if r.TryDecodeAsNil() {
				x.AccessorIDs = nil
			} else {
				yyv4 := &x.AccessorIDs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenDeleteRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AccessorIDs = nil
	} else {
		yyv15 := &x.AccessorIDs
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenBootstrapRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Token == nil {
					r.EncodeNil()
				} else {
					x.Token.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Token"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Token == nil {
					r.EncodeNil()
				} else {
					x.Token.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.ResetIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("ResetIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.ResetIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenBootstrapRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenBootstrapRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Token":
			if r.TryDecodeAsNil() {
				if x.Token != nil {
					x.Token = nil
				}
			} else {
				if x.Token == nil {
					x.Token = new(ACLToken)
				}
				x.Token.CodecDecodeSelf(d)
			}
		case "ResetIndex":
			if r.TryDecodeAsNil() {
				x.ResetIndex = 0
			} else {
				yyv5 := &x.ResetIndex
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv7 := &x.Region
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv9 := &x.Namespace
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv11 := &x.AuthToken
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*string)(yyv11)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv13 := &x.Forwarded
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					*((*bool)(yyv13)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenBootstrapRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		if x.Token != nil {
			x.Token = nil
		}
	} else {
		if x.Token == nil {
			x.Token = new(ACLToken)
		}
		x.Token.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.ResetIndex = 0
	} else {
		yyv17 := &x.ResetIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv19 := &x.Region
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv21 := &x.Namespace
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv23 := &x.AuthToken
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv25 := &x.Forwarded
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenUpsertRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tokens == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoACLToken(([]*ACLToken)(x.Tokens), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tokens"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tokens == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoACLToken(([]*ACLToken)(x.Tokens), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8100, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenUpsertRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenUpsertRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Tokens":
			if r.TryDecodeAsNil() {
				x.Tokens = nil
			} else {
				yyv4 := &x.Tokens
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoACLToken((*[]*ACLToken)(yyv4), d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv8 := &x.Namespace
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv10 := &x.AuthToken
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv12 := &x.Forwarded
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenUpsertRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tokens = nil
	} else {
		yyv15 := &x.Tokens
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decSlicePtrtoACLToken((*[]*ACLToken)(yyv15), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv19 := &x.Namespace
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv21 := &x.AuthToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv23 := &x.Forwarded
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x *ACLTokenUpsertResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				if x.Tokens == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoACLToken(([]*ACLToken)(x.Tokens), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Tokens"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				if x.Tokens == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoACLToken(([]*ACLToken)(x.Tokens), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem100)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey100)
				r.EncodeString(codecSelferC_UTF8100, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue100)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd100)
			}
		}
	}
}

func (x *ACLTokenUpsertResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap100 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd100)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray100 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd100)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr100)
		}
	}
}

func (x *ACLTokenUpsertResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey100)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue100)
		switch yys3 {
		case "Tokens":
			if r.TryDecodeAsNil() {
				x.Tokens = nil
			} else {
				yyv4 := &x.Tokens
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoACLToken((*[]*ACLToken)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x *ACLTokenUpsertResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Tokens = nil
	} else {
		yyv9 := &x.Tokens
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			h.decSlicePtrtoACLToken((*[]*ACLToken)(yyv9), d)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd100)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem100)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv11 := &x.Index
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem100)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) encBitmap(v Bitmap, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytes(codecSelferC_RAW100, []byte(v))
}

func (x codecSelfer100) decBitmap(v *Bitmap, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	*v = r.DecodeBytes(*((*[]byte)(v)), false, false)
}

func (x codecSelfer100) encMapDeviceIdTuplePtrtoDeviceAccounterInstance(v map[DeviceIdTuple]*DeviceAccounterInstance, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yy2 := &yyk1
		yy2.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapDeviceIdTuplePtrtoDeviceAccounterInstance(v *map[DeviceIdTuple]*DeviceAccounterInstance, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 56)
		yyv1 = make(map[DeviceIdTuple]*DeviceAccounterInstance, yyrl1)
		*v = yyv1
	}
	var yymk1 DeviceIdTuple
	var yymv1 *DeviceAccounterInstance
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = DeviceIdTuple{}
			} else {
				yyv2 := &yymk1
				yyv2.CodecDecodeSelf(d)
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DeviceAccounterInstance{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DeviceAccounterInstance)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = DeviceIdTuple{}
			} else {
				yyv4 := &yymk1
				yyv4.CodecDecodeSelf(d)
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DeviceAccounterInstance{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DeviceAccounterInstance)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoFieldDiff(v []*FieldDiff, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoFieldDiff(v *[]*FieldDiff, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*FieldDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*FieldDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*FieldDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = FieldDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(FieldDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = FieldDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(FieldDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *FieldDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = FieldDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(FieldDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*FieldDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoObjectDiff(v []*ObjectDiff, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoObjectDiff(v *[]*ObjectDiff, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ObjectDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ObjectDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*ObjectDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ObjectDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ObjectDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ObjectDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ObjectDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ObjectDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ObjectDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ObjectDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ObjectDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoTaskGroupDiff(v []*TaskGroupDiff, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoTaskGroupDiff(v *[]*TaskGroupDiff, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskGroupDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskGroupDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskGroupDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskGroupDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskGroupDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskGroupDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskGroupDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskGroupDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskGroupDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskGroupDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskGroupDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoTaskDiff(v []*TaskDiff, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoTaskDiff(v *[]*TaskDiff, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encTaskGroupDiffs(v TaskGroupDiffs, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decTaskGroupDiffs(v *TaskGroupDiffs, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskGroupDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskGroupDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskGroupDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskGroupDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskGroupDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskGroupDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskGroupDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskGroupDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskGroupDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskGroupDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskGroupDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encTaskDiffs(v TaskDiffs, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decTaskDiffs(v *TaskDiffs, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encObjectDiffs(v ObjectDiffs, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decObjectDiffs(v *ObjectDiffs, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ObjectDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ObjectDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*ObjectDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ObjectDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ObjectDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ObjectDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ObjectDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ObjectDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ObjectDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ObjectDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ObjectDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encFieldDiffs(v FieldDiffs, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decFieldDiffs(v *FieldDiffs, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*FieldDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*FieldDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*FieldDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = FieldDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(FieldDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = FieldDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(FieldDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *FieldDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = FieldDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(FieldDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*FieldDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoNetworkResource(v []*NetworkResource, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoNetworkResource(v *[]*NetworkResource, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NetworkResource{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NetworkResource, yyrl1)
				}
			} else {
				yyv1 = make([]*NetworkResource, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NetworkResource{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NetworkResource)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NetworkResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NetworkResource)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NetworkResource
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NetworkResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NetworkResource)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NetworkResource{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringBitmap(v map[string]Bitmap, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringBitmap(v *map[string]Bitmap, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 40)
		yyv1 = make(map[string]Bitmap, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 Bitmap
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoRaftServer(v []*RaftServer, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoRaftServer(v *[]*RaftServer, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*RaftServer{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*RaftServer, yyrl1)
				}
			} else {
				yyv1 = make([]*RaftServer, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = RaftServer{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(RaftServer)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = RaftServer{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(RaftServer)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *RaftServer
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = RaftServer{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(RaftServer)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*RaftServer{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringPtrtoDrainUpdate(v map[string]*DrainUpdate, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoDrainUpdate(v *map[string]*DrainUpdate, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*DrainUpdate, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *DrainUpdate
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DrainUpdate{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DrainUpdate)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DrainUpdate{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DrainUpdate)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encMapstringPtrtoNodeEvent(v map[string]*NodeEvent, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoNodeEvent(v *map[string]*NodeEvent, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*NodeEvent, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *NodeEvent
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = NodeEvent{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(NodeEvent)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = NodeEvent{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(NodeEvent)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encMapContextSlicestring(v map[Context][]string, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yyk1.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yym3 := z.EncBinary()
			_ = yym3
			if false {
			} else {
				z.F.EncSliceStringV(yyv1, false, e)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapContextSlicestring(v *map[Context][]string, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 40)
		yyv1 = make(map[Context][]string, yyrl1)
		*v = yyv1
	}
	var yymk1 Context
	var yymv1 []string
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yyv2.CodecDecodeSelf(d)
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv3 := &yymv1
				yym4 := z.DecBinary()
				_ = yym4
				if false {
				} else {
					z.F.DecSliceStringX(yyv3, false, d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yyv5.CodecDecodeSelf(d)
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv6 := &yymv1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicestring(v []string, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyv1))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicestring(v *[]string, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
			} else {
				yyv1 = make([]string, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = ""
			} else {
				yyv2 := &yyv1[yyj1]
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, "")
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv4 := &yyv1[yyj1]
					yym5 := z.DecBinary()
					_ = yym5
					if false {
					} else {
						*((*string)(yyv4)) = r.DecodeString()
					}
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "") // var yyz1 string
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv6 := &yyv1[yyj1]
					yym7 := z.DecBinary()
					_ = yym7
					if false {
					} else {
						*((*string)(yyv6)) = r.DecodeString()
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapContextbool(v map[Context]bool, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yyk1.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		yym3 := z.EncBinary()
		_ = yym3
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapContextbool(v *map[Context]bool, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[Context]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 Context
	var yymv1 bool
	var yymg1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yyv2.CodecDecodeSelf(d)
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = false
			} else {
				yyv3 := &yymv1
				yym4 := z.DecBinary()
				_ = yym4
				if false {
				} else {
					*((*bool)(yyv3)) = r.DecodeBool()
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yyv5.CodecDecodeSelf(d)
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = false
			} else {
				yyv6 := &yymv1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encMapNamespacedIDPtrtoJobDeregisterOptions(v map[NamespacedID]*JobDeregisterOptions, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yy2 := &yyk1
		yy2.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapNamespacedIDPtrtoJobDeregisterOptions(v *map[NamespacedID]*JobDeregisterOptions, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 40)
		yyv1 = make(map[NamespacedID]*JobDeregisterOptions, yyrl1)
		*v = yyv1
	}
	var yymk1 NamespacedID
	var yymv1 *JobDeregisterOptions
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = NamespacedID{}
			} else {
				yyv2 := &yymk1
				yyv2.CodecDecodeSelf(d)
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = JobDeregisterOptions{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(JobDeregisterOptions)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = NamespacedID{}
			} else {
				yyv4 := &yymk1
				yyv4.CodecDecodeSelf(d)
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = JobDeregisterOptions{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(JobDeregisterOptions)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoEvaluation(v []*Evaluation, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoEvaluation(v *[]*Evaluation, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Evaluation{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Evaluation, yyrl1)
				}
			} else {
				yyv1 = make([]*Evaluation, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Evaluation{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Evaluation)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Evaluation{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Evaluation)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Evaluation
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Evaluation{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Evaluation)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Evaluation{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoAllocation(v []*Allocation, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoAllocation(v *[]*Allocation, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Allocation{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Allocation, yyrl1)
				}
			} else {
				yyv1 = make([]*Allocation, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Allocation{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Allocation)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Allocation{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Allocation)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Allocation
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Allocation{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Allocation)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Allocation{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoAllocationDiff(v []*AllocationDiff, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoAllocationDiff(v *[]*AllocationDiff, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*AllocationDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*AllocationDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*AllocationDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = AllocationDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(AllocationDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocationDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocationDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *AllocationDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocationDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocationDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*AllocationDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoDeploymentStatusUpdate(v []*DeploymentStatusUpdate, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoDeploymentStatusUpdate(v *[]*DeploymentStatusUpdate, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*DeploymentStatusUpdate{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*DeploymentStatusUpdate, yyrl1)
				}
			} else {
				yyv1 = make([]*DeploymentStatusUpdate, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = DeploymentStatusUpdate{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(DeploymentStatusUpdate)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = DeploymentStatusUpdate{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DeploymentStatusUpdate)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *DeploymentStatusUpdate
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = DeploymentStatusUpdate{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DeploymentStatusUpdate)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*DeploymentStatusUpdate{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringPtrtoDesiredTransition(v map[string]*DesiredTransition, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoDesiredTransition(v *map[string]*DesiredTransition, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*DesiredTransition, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *DesiredTransition
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DesiredTransition{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DesiredTransition)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DesiredTransition{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DesiredTransition)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoServerMember(v []*ServerMember, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoServerMember(v *[]*ServerMember, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ServerMember{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ServerMember, yyrl1)
				}
			} else {
				yyv1 = make([]*ServerMember, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ServerMember{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ServerMember)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ServerMember{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ServerMember)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ServerMember
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ServerMember{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ServerMember)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ServerMember{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encnet_IP(v net.IP, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytes(codecSelferC_RAW100, []byte(v))
}

func (x codecSelfer100) decnet_IP(v *net.IP, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	*v = r.DecodeBytes(*((*[]byte)(v)), false, false)
}

func (x codecSelfer100) encSlicePtrtoVaultAccessor(v []*VaultAccessor, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoVaultAccessor(v *[]*VaultAccessor, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*VaultAccessor{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*VaultAccessor, yyrl1)
				}
			} else {
				yyv1 = make([]*VaultAccessor, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = VaultAccessor{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(VaultAccessor)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = VaultAccessor{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(VaultAccessor)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *VaultAccessor
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = VaultAccessor{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(VaultAccessor)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*VaultAccessor{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapNamespacedIDstring(v map[NamespacedID]string, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yy2 := &yyk1
		yy2.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		yym4 := z.EncBinary()
		_ = yym4
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyv1))
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapNamespacedIDstring(v *map[NamespacedID]string, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 48)
		yyv1 = make(map[NamespacedID]string, yyrl1)
		*v = yyv1
	}
	var yymk1 NamespacedID
	var yymv1 string
	var yymg1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = NamespacedID{}
			} else {
				yyv2 := &yymk1
				yyv2.CodecDecodeSelf(d)
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = ""
			} else {
				yyv3 := &yymv1
				yym4 := z.DecBinary()
				_ = yym4
				if false {
				} else {
					*((*string)(yyv3)) = r.DecodeString()
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = NamespacedID{}
			} else {
				yyv5 := &yymk1
				yyv5.CodecDecodeSelf(d)
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = ""
			} else {
				yyv6 := &yymv1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoNodeServerInfo(v []*NodeServerInfo, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoNodeServerInfo(v *[]*NodeServerInfo, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NodeServerInfo{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NodeServerInfo, yyrl1)
				}
			} else {
				yyv1 = make([]*NodeServerInfo, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NodeServerInfo{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NodeServerInfo)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeServerInfo{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeServerInfo)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NodeServerInfo
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeServerInfo{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeServerInfo)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NodeServerInfo{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoNodeListStub(v []*NodeListStub, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoNodeListStub(v *[]*NodeListStub, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NodeListStub{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NodeListStub, yyrl1)
				}
			} else {
				yyv1 = make([]*NodeListStub, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NodeListStub{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NodeListStub)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeListStub)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NodeListStub
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeListStub)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NodeListStub{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoJobListStub(v []*JobListStub, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoJobListStub(v *[]*JobListStub, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*JobListStub{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*JobListStub, yyrl1)
				}
			} else {
				yyv1 = make([]*JobListStub, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = JobListStub{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(JobListStub)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = JobListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(JobListStub)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *JobListStub
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = JobListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(JobListStub)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*JobListStub{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoJob(v []*Job, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoJob(v *[]*Job, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Job{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Job, yyrl1)
				}
			} else {
				yyv1 = make([]*Job, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Job{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Job)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Job{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Job)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Job
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Job{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Job)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Job{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoJobDiff(v []*JobDiff, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoJobDiff(v *[]*JobDiff, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*JobDiff{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*JobDiff, yyrl1)
				}
			} else {
				yyv1 = make([]*JobDiff, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = JobDiff{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(JobDiff)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = JobDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(JobDiff)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *JobDiff
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = JobDiff{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(JobDiff)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*JobDiff{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringPtrtoAllocMetric(v map[string]*AllocMetric, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoAllocMetric(v *map[string]*AllocMetric, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*AllocMetric, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *AllocMetric
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = AllocMetric{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(AllocMetric)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = AllocMetric{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(AllocMetric)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoAllocListStub(v []*AllocListStub, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoAllocListStub(v *[]*AllocListStub, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*AllocListStub{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*AllocListStub, yyrl1)
				}
			} else {
				yyv1 = make([]*AllocListStub, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = AllocListStub{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(AllocListStub)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocListStub)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *AllocListStub
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocListStub)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*AllocListStub{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoDeployment(v []*Deployment, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoDeployment(v *[]*Deployment, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Deployment{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Deployment, yyrl1)
				}
			} else {
				yyv1 = make([]*Deployment, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Deployment{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Deployment)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Deployment{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Deployment)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Deployment
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Deployment{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Deployment)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Deployment{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringSlicePtrtoNodeEvent(v map[string][]*NodeEvent, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yym3 := z.EncBinary()
			_ = yym3
			if false {
			} else {
				h.encSlicePtrtoNodeEvent(([]*NodeEvent)(yyv1), e)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringSlicePtrtoNodeEvent(v *map[string][]*NodeEvent, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 40)
		yyv1 = make(map[string][]*NodeEvent, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 []*NodeEvent
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv4 := &yymv1
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoNodeEvent((*[]*NodeEvent)(yyv4), d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv6 := &yymk1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv8 := &yymv1
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSlicePtrtoNodeEvent((*[]*NodeEvent)(yyv8), d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoNodeEvent(v []*NodeEvent, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoNodeEvent(v *[]*NodeEvent, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NodeEvent{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NodeEvent, yyrl1)
				}
			} else {
				yyv1 = make([]*NodeEvent, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NodeEvent{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NodeEvent)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeEvent{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeEvent)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NodeEvent
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeEvent{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeEvent)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NodeEvent{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringPtrtoDriverInfo(v map[string]*DriverInfo, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoDriverInfo(v *map[string]*DriverInfo, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*DriverInfo, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *DriverInfo
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DriverInfo{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DriverInfo)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DriverInfo{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DriverInfo)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encResourceDevices(v ResourceDevices, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decResourceDevices(v *ResourceDevices, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*RequestedDevice{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*RequestedDevice, yyrl1)
				}
			} else {
				yyv1 = make([]*RequestedDevice, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = RequestedDevice{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(RequestedDevice)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = RequestedDevice{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(RequestedDevice)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *RequestedDevice
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = RequestedDevice{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(RequestedDevice)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*RequestedDevice{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePort(v []Port, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePort(v *[]Port, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Port{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Port, yyrl1)
				}
			} else {
				yyv1 = make([]Port, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Port{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Port{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Port{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Port{}) // var yyz1 Port
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Port{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Port{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encNetworks(v Networks, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decNetworks(v *Networks, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NetworkResource{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NetworkResource, yyrl1)
				}
			} else {
				yyv1 = make([]*NetworkResource, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NetworkResource{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NetworkResource)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NetworkResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NetworkResource)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NetworkResource
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NetworkResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NetworkResource)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NetworkResource{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoNodeDeviceResource(v []*NodeDeviceResource, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoNodeDeviceResource(v *[]*NodeDeviceResource, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NodeDeviceResource{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NodeDeviceResource, yyrl1)
				}
			} else {
				yyv1 = make([]*NodeDeviceResource, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NodeDeviceResource{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NodeDeviceResource)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeDeviceResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeDeviceResource)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NodeDeviceResource
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeDeviceResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeDeviceResource)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NodeDeviceResource{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoNodeDevice(v []*NodeDevice, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoNodeDevice(v *[]*NodeDevice, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NodeDevice{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NodeDevice, yyrl1)
				}
			} else {
				yyv1 = make([]*NodeDevice, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NodeDevice{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NodeDevice)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeDevice{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeDevice)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NodeDevice
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeDevice{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeDevice)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NodeDevice{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringPtrtostructs_Attribute(v map[string]*pkg1_structs.Attribute, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yym3 := z.EncBinary()
			_ = yym3
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv1) {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtostructs_Attribute(v *map[string]*pkg1_structs.Attribute, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*pkg1_structs.Attribute, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *pkg1_structs.Attribute
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = pkg1_structs.Attribute{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(pkg1_structs.Attribute)
				}
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yymv1) {
				} else {
					z.DecFallback(yymv1, false)
				}
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv6 := &yymk1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = pkg1_structs.Attribute{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(pkg1_structs.Attribute)
				}
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yymv1) {
				} else {
					z.DecFallback(yymv1, false)
				}
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encMapstringPtrtoAllocatedTaskResources(v map[string]*AllocatedTaskResources, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoAllocatedTaskResources(v *map[string]*AllocatedTaskResources, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*AllocatedTaskResources, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *AllocatedTaskResources
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = AllocatedTaskResources{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(AllocatedTaskResources)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = AllocatedTaskResources{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(AllocatedTaskResources)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoAllocatedDeviceResource(v []*AllocatedDeviceResource, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoAllocatedDeviceResource(v *[]*AllocatedDeviceResource, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*AllocatedDeviceResource{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*AllocatedDeviceResource, yyrl1)
				}
			} else {
				yyv1 = make([]*AllocatedDeviceResource, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = AllocatedDeviceResource{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(AllocatedDeviceResource)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocatedDeviceResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocatedDeviceResource)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *AllocatedDeviceResource
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocatedDeviceResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocatedDeviceResource)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*AllocatedDeviceResource{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encAllocatedDevices(v AllocatedDevices, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decAllocatedDevices(v *AllocatedDevices, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*AllocatedDeviceResource{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*AllocatedDeviceResource, yyrl1)
				}
			} else {
				yyv1 = make([]*AllocatedDeviceResource, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = AllocatedDeviceResource{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(AllocatedDeviceResource)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocatedDeviceResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocatedDeviceResource)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *AllocatedDeviceResource
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocatedDeviceResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocatedDeviceResource)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*AllocatedDeviceResource{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoConstraint(v []*Constraint, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoConstraint(v *[]*Constraint, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Constraint{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Constraint, yyrl1)
				}
			} else {
				yyv1 = make([]*Constraint, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Constraint{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Constraint)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Constraint{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Constraint)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Constraint
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Constraint{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Constraint)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Constraint{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoAffinity(v []*Affinity, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoAffinity(v *[]*Affinity, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Affinity{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Affinity, yyrl1)
				}
			} else {
				yyv1 = make([]*Affinity, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Affinity{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Affinity)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Affinity{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Affinity)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Affinity
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Affinity{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Affinity)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Affinity{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoSpread(v []*Spread, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoSpread(v *[]*Spread, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Spread{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Spread, yyrl1)
				}
			} else {
				yyv1 = make([]*Spread, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Spread{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Spread)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Spread{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Spread)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Spread
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Spread{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Spread)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Spread{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoTaskGroup(v []*TaskGroup, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoTaskGroup(v *[]*TaskGroup, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskGroup{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskGroup, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskGroup, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskGroup{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskGroup)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskGroup{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskGroup)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskGroup
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskGroup{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskGroup)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskGroup{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringTaskGroupSummary(v map[string]TaskGroupSummary, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringTaskGroupSummary(v *map[string]TaskGroupSummary, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 64)
		yyv1 = make(map[string]TaskGroupSummary, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 TaskGroupSummary
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = TaskGroupSummary{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = TaskGroupSummary{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = TaskGroupSummary{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = TaskGroupSummary{}
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoTask(v []*Task, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoTask(v *[]*Task, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Task{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Task, yyrl1)
				}
			} else {
				yyv1 = make([]*Task, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Task{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Task)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Task{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Task)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Task
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Task{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Task)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Task{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringSlicestring(v map[string][]string, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yym3 := z.EncBinary()
			_ = yym3
			if false {
			} else {
				z.F.EncSliceStringV(yyv1, false, e)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringSlicestring(v *map[string][]string, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 40)
		yyv1 = make(map[string][]string, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 []string
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv4 := &yymv1
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv6 := &yymk1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv8 := &yymv1
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoServiceCheck(v []*ServiceCheck, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoServiceCheck(v *[]*ServiceCheck, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ServiceCheck{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ServiceCheck, yyrl1)
				}
			} else {
				yyv1 = make([]*ServiceCheck, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ServiceCheck{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ServiceCheck)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ServiceCheck{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ServiceCheck)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ServiceCheck
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ServiceCheck{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ServiceCheck)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ServiceCheck{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoService(v []*Service, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoService(v *[]*Service, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Service{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Service, yyrl1)
				}
			} else {
				yyv1 = make([]*Service, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Service{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Service)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Service{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Service)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Service
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Service{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Service)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Service{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoTemplate(v []*Template, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoTemplate(v *[]*Template, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Template{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Template, yyrl1)
				}
			} else {
				yyv1 = make([]*Template, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Template{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Template)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Template{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Template)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Template
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Template{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Template)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Template{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoTaskArtifact(v []*TaskArtifact, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoTaskArtifact(v *[]*TaskArtifact, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskArtifact{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskArtifact, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskArtifact, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskArtifact{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskArtifact)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskArtifact{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskArtifact)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskArtifact
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskArtifact{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskArtifact)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskArtifact{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoTaskEvent(v []*TaskEvent, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoTaskEvent(v *[]*TaskEvent, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskEvent{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskEvent, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskEvent, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskEvent{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskEvent)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskEvent{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskEvent)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskEvent
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskEvent{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskEvent)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskEvent{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encConstraints(v Constraints, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decConstraints(v *Constraints, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Constraint{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Constraint, yyrl1)
				}
			} else {
				yyv1 = make([]*Constraint, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Constraint{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Constraint)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Constraint{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Constraint)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Constraint
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Constraint{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Constraint)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Constraint{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoSpreadTarget(v []*SpreadTarget, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoSpreadTarget(v *[]*SpreadTarget, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*SpreadTarget{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*SpreadTarget, yyrl1)
				}
			} else {
				yyv1 = make([]*SpreadTarget, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = SpreadTarget{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(SpreadTarget)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = SpreadTarget{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(SpreadTarget)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *SpreadTarget
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = SpreadTarget{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(SpreadTarget)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*SpreadTarget{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encAffinities(v Affinities, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decAffinities(v *Affinities, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Affinity{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Affinity, yyrl1)
				}
			} else {
				yyv1 = make([]*Affinity, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Affinity{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Affinity)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Affinity{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Affinity)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Affinity
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Affinity{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Affinity)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Affinity{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringPtrtoDeploymentState(v map[string]*DeploymentState, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoDeploymentState(v *map[string]*DeploymentState, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*DeploymentState, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *DeploymentState
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DeploymentState{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DeploymentState)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DeploymentState{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DeploymentState)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoRescheduleEvent(v []*RescheduleEvent, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoRescheduleEvent(v *[]*RescheduleEvent, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*RescheduleEvent{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*RescheduleEvent, yyrl1)
				}
			} else {
				yyv1 = make([]*RescheduleEvent, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = RescheduleEvent{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(RescheduleEvent)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = RescheduleEvent{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(RescheduleEvent)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *RescheduleEvent
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = RescheduleEvent{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(RescheduleEvent)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*RescheduleEvent{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringPtrtoResources(v map[string]*Resources, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoResources(v *map[string]*Resources, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*Resources, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *Resources
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = Resources{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(Resources)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = Resources{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(Resources)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encMapstringPtrtoTaskState(v map[string]*TaskState, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoTaskState(v *map[string]*TaskState, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*TaskState, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *TaskState
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = TaskState{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(TaskState)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = TaskState{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(TaskState)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoNodeScoreMeta(v []*NodeScoreMeta, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoNodeScoreMeta(v *[]*NodeScoreMeta, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NodeScoreMeta{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NodeScoreMeta, yyrl1)
				}
			} else {
				yyv1 = make([]*NodeScoreMeta, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NodeScoreMeta{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NodeScoreMeta)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeScoreMeta{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeScoreMeta)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NodeScoreMeta
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeScoreMeta{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeScoreMeta)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NodeScoreMeta{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringSlicePtrtoAllocation(v map[string][]*Allocation, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yym3 := z.EncBinary()
			_ = yym3
			if false {
			} else {
				h.encSlicePtrtoAllocation(([]*Allocation)(yyv1), e)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringSlicePtrtoAllocation(v *map[string][]*Allocation, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 40)
		yyv1 = make(map[string][]*Allocation, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 []*Allocation
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv4 := &yymv1
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv4), d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv6 := &yymk1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv8 := &yymv1
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv8), d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encMapstringPtrtoDesiredUpdates(v map[string]*DesiredUpdates, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoDesiredUpdates(v *map[string]*DesiredUpdates, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*DesiredUpdates, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *DesiredUpdates
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DesiredUpdates{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DesiredUpdates)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DesiredUpdates{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DesiredUpdates)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoACLPolicyListStub(v []*ACLPolicyListStub, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoACLPolicyListStub(v *[]*ACLPolicyListStub, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ACLPolicyListStub{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ACLPolicyListStub, yyrl1)
				}
			} else {
				yyv1 = make([]*ACLPolicyListStub, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ACLPolicyListStub{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ACLPolicyListStub)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ACLPolicyListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ACLPolicyListStub)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ACLPolicyListStub
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ACLPolicyListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ACLPolicyListStub)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ACLPolicyListStub{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringPtrtoACLPolicy(v map[string]*ACLPolicy, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoACLPolicy(v *map[string]*ACLPolicy, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*ACLPolicy, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *ACLPolicy
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = ACLPolicy{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(ACLPolicy)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = ACLPolicy{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(ACLPolicy)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoACLPolicy(v []*ACLPolicy, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoACLPolicy(v *[]*ACLPolicy, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ACLPolicy{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ACLPolicy, yyrl1)
				}
			} else {
				yyv1 = make([]*ACLPolicy, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ACLPolicy{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ACLPolicy)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ACLPolicy{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ACLPolicy)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ACLPolicy
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ACLPolicy{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ACLPolicy)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ACLPolicy{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encSlicePtrtoACLTokenListStub(v []*ACLTokenListStub, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoACLTokenListStub(v *[]*ACLTokenListStub, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ACLTokenListStub{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ACLTokenListStub, yyrl1)
				}
			} else {
				yyv1 = make([]*ACLTokenListStub, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ACLTokenListStub{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ACLTokenListStub)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ACLTokenListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ACLTokenListStub)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ACLTokenListStub
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ACLTokenListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ACLTokenListStub)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ACLTokenListStub{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer100) encMapstringPtrtoACLToken(v map[string]*ACLToken, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey100)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8100, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) decMapstringPtrtoACLToken(v *map[string]*ACLToken, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*ACLToken, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *ACLToken
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = ACLToken{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(ACLToken)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey100)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue100)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = ACLToken{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(ACLToken)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd100)
}

func (x codecSelfer100) encSlicePtrtoACLToken(v []*ACLToken, e *codec1978.Encoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem100)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd100)
}

func (x codecSelfer100) decSlicePtrtoACLToken(v *[]*ACLToken, d *codec1978.Decoder) {
	var h codecSelfer100
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ACLToken{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ACLToken, yyrl1)
				}
			} else {
				yyv1 = make([]*ACLToken, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ACLToken{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ACLToken)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ACLToken{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ACLToken)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ACLToken
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ACLToken{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ACLToken)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ACLToken{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
